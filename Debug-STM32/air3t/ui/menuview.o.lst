   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"menuview.cpp"
  23              	.Ltext0:
  24              		.file 1 "../air3t/ui/menuview.cpp"
 3479              		.align	2
 3480              		.weak	_ZN5Air3T4View8observerEv
 3481              		.thumb
 3482              		.thumb_func
 3484              	_ZN5Air3T4View8observerEv:
 3485              	.LFB27:
   1:../air3t/ui/view.h **** #pragma once
   2:../air3t/ui/view.h **** #include "IView"
   3:../air3t/ui/view.h **** #include <cstring>
   4:../air3t/ui/view.h **** 
   5:../air3t/ui/view.h **** namespace Air3T
   6:../air3t/ui/view.h **** {
   7:../air3t/ui/view.h **** 	class IViewObserver;
   8:../air3t/ui/view.h **** 
   9:../air3t/ui/view.h **** 	/**
  10:../air3t/ui/view.h **** 	 * @ingroup ui
  11:../air3t/ui/view.h **** 	 * @brief Base class of all view implementations. Handles the pointers to the input event observer
  12:../air3t/ui/view.h **** 	 */
  13:../air3t/ui/view.h **** 	class View : public IView
  14:../air3t/ui/view.h **** 	{
  15:../air3t/ui/view.h **** 	protected:
  16:../air3t/ui/view.h **** 		// Constructor is protected, only derived classes can be instanciated.
  17:../air3t/ui/view.h **** 		explicit View();
  18:../air3t/ui/view.h **** 
  19:../air3t/ui/view.h **** 		//Â Returns the pointer to the observer to derived classes.
  20:../air3t/ui/view.h **** 		inline IViewObserver * observer() { return _observer; }
 3486              		.loc 5 20 0
 3487              		.cfi_startproc
 3488              		@ args = 0, pretend = 0, frame = 8
 3489              		@ frame_needed = 1, uses_anonymous_args = 0
 3490              		@ link register save eliminated.
 3491 0000 80B4     		push	{r7}
 3492              	.LCFI0:
 3493              		.cfi_def_cfa_offset 4
 3494 0002 83B0     		sub	sp, sp, #12
 3495              	.LCFI1:
 3496              		.cfi_def_cfa_offset 16
 3497 0004 00AF     		add	r7, sp, #0
 3498              		.cfi_offset 7, -4
 3499              	.LCFI2:
 3500              		.cfi_def_cfa_register 7
 3501 0006 7860     		str	r0, [r7, #4]
 3502              		.loc 5 20 0
 3503 0008 7B68     		ldr	r3, [r7, #4]
 3504 000a 5B68     		ldr	r3, [r3, #4]
 3505 000c 1846     		mov	r0, r3
 3506 000e 07F10C07 		add	r7, r7, #12
 3507 0012 BD46     		mov	sp, r7
 3508 0014 80BC     		pop	{r7}
 3509 0016 7047     		bx	lr
 3510              		.cfi_endproc
 3511              	.LFE27:
 3513              		.section	.text._ZL20__gthread_key_deletei,"ax",%progbits
 3514              		.align	2
 3515              		.thumb
 3516              		.thumb_func
 3518              	_ZL20__gthread_key_deletei:
 3519              	.LFB607:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Threads compatibility routines for libgcc2 and libobjc.  */
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Compile this one with gcc.  */
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Copyright (C) 1997, 1999, 2000, 2004, 2008, 2009
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****    Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** This file is part of GCC.
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** GCC is free software; you can redistribute it and/or modify it under
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** the terms of the GNU General Public License as published by the Free
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** Software Foundation; either version 3, or (at your option) any later
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** version.
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** GCC is distributed in the hope that it will be useful, but WITHOUT ANY
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** WARRANTY; without even the implied warranty of MERCHANTABILITY or
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** for more details.
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** Under Section 7 of GPL version 3, you are granted additional
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** permissions described in the GCC Runtime Library Exception, version
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 3.1, as published by the Free Software Foundation.
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** You should have received a copy of the GNU General Public License and
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** a copy of the GCC Runtime Library Exception along with this program;
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** <http://www.gnu.org/licenses/>.  */
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #ifndef _GLIBCXX_GCC_GTHR_SINGLE_H
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define _GLIBCXX_GCC_GTHR_SINGLE_H
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Just provide compatibility for mutex handling.  */
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_key_t;
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_once_t;
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_mutex_t;
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_recursive_mutex_t;
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_ONCE_INIT 0
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_MUTEX_INIT 0
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_RECURSIVE_MUTEX_INIT 0
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define _GLIBCXX_UNUSED __attribute__((unused))
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #ifdef _LIBOBJC
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Thread local storage for a single thread */
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static void *thread_local_storage = NULL;
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend initialization functions */
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Initialize the threads subsystem.  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_init_thread_system (void)
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Close the threads subsystem.  */
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_close_thread_system (void)
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend thread functions */
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Create a new thread of execution.  */
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline objc_thread_t
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_detach (void (* func)(void *), void * arg _GLIBCXX_UNUSED)
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return NULL;
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Set the current thread's priority.  */
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_set_priority (int priority _GLIBCXX_UNUSED)
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Return the current thread's priority.  */
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_get_priority (void)
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return OBJC_THREAD_INTERACTIVE_PRIORITY;
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Yield our process time to another thread.  */
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline void
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_yield (void)
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return;
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Terminate the current thread.  */
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_exit (void)
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* Should we really exit the program */
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* exit (&__objc_thread_exit_status); */
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Returns an integer value which uniquely describes a thread.  */
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline objc_thread_t
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_id (void)
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support, use 1.  */
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return (objc_thread_t) 1;
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Sets the thread's local storage pointer.  */
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_set_data (void *value)
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   thread_local_storage = value;
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Returns the thread's local storage pointer.  */
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline void *
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_get_data (void)
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return thread_local_storage;
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend mutex functions */
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Allocate a mutex.  */
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_allocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Deallocate a mutex.  */
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_deallocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Grab a lock on a mutex.  */
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_lock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* There can only be one thread, so we always get the lock */
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Try to grab a lock on a mutex.  */
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_trylock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* There can only be one thread, so we always get the lock */
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Unlock the mutex */
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_unlock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend condition mutex functions */
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Allocate a condition.  */
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_allocate (objc_condition_t condition _GLIBCXX_UNUSED)
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Deallocate a condition.  */
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_deallocate (objc_condition_t condition _GLIBCXX_UNUSED)
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wait on the condition */
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_wait (objc_condition_t condition _GLIBCXX_UNUSED,
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 			       objc_mutex_t mutex _GLIBCXX_UNUSED)
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wake up all threads waiting on this condition.  */
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_broadcast (objc_condition_t condition _GLIBCXX_UNUSED)
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wake up one thread waiting on this condition.  */
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_signal (objc_condition_t condition _GLIBCXX_UNUSED)
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #else /* _LIBOBJC */
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_active_p (void)
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_once (__gthread_once_t *__once _GLIBCXX_UNUSED, void (*__func) (void) _GLIBCXX_UNUSED)
 218:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 219:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 220:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 221:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 222:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int _GLIBCXX_UNUSED
 223:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_key_create (__gthread_key_t *__key _GLIBCXX_UNUSED, void (*__func) (void *) _GLIBCXX_UNUS
 224:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 225:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 226:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 227:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 228:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static int _GLIBCXX_UNUSED
 229:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_key_delete (__gthread_key_t __key _GLIBCXX_UNUSED)
 230:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 3520              		.loc 76 230 0
 3521              		.cfi_startproc
 3522              		@ args = 0, pretend = 0, frame = 8
 3523              		@ frame_needed = 1, uses_anonymous_args = 0
 3524              		@ link register save eliminated.
 3525 0000 80B4     		push	{r7}
 3526              	.LCFI3:
 3527              		.cfi_def_cfa_offset 4
 3528 0002 83B0     		sub	sp, sp, #12
 3529              	.LCFI4:
 3530              		.cfi_def_cfa_offset 16
 3531 0004 00AF     		add	r7, sp, #0
 3532              		.cfi_offset 7, -4
 3533              	.LCFI5:
 3534              		.cfi_def_cfa_register 7
 3535 0006 7860     		str	r0, [r7, #4]
 231:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 3536              		.loc 76 231 0
 3537 0008 4FF00003 		mov	r3, #0
 232:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 3538              		.loc 76 232 0
 3539 000c 1846     		mov	r0, r3
 3540 000e 07F10C07 		add	r7, r7, #12
 3541 0012 BD46     		mov	sp, r7
 3542 0014 80BC     		pop	{r7}
 3543 0016 7047     		bx	lr
 3544              		.cfi_endproc
 3545              	.LFE607:
 3547              		.section	.text._ZN18IMonochromeDisplay5PointC2Eii,"axG",%progbits,_ZN18IMonochromeDisplay5PointC5E
 3548              		.align	2
 3549              		.weak	_ZN18IMonochromeDisplay5PointC2Eii
 3550              		.thumb
 3551              		.thumb_func
 3553              	_ZN18IMonochromeDisplay5PointC2Eii:
 3554              	.LFB812:
   1:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** #pragma once
   2:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** #include <stdint.h>
   3:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** #include <cstddef>
   4:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** #include <string>
   5:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 
   6:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** /**
   7:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * @ingroup interfaces
   8:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * @brief Abstracts a simple monochrome display, with either unaccelerated or accelerated drawing m
   9:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  *
  10:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * Note that if you need a common way to paint into displays with different accelerated features, u
  11:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * MonochromeDisplayPainter class, the class uses for each drawing instruction the  most effective 
  12:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * draw into the display.
  13:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  */
  14:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** class IMonochromeDisplay
  15:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** {
  16:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** public:
  17:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	/**
  18:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * @brief The definitions for the pixel colors. Quite a short list for monochrome displays...
  19:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 */
  20:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	enum PixelColor
  21:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	{
  22:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		Undefined 	=  0 ,	///< Undefined color, use if you want no stroke or no fill.
  23:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		White 		= -1 ,	///< White pixel value.
  24:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		Black 		=  1 	///< Black pixel value.
  25:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	};
  26:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 
  27:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	/**
  28:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * @brief A bit-mask defining the possible accelerated drawing operations a display can offer.
  29:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 *
  30:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * The MonochromeDisplayPainter class will use accelerated methods if available and will fall back
  31:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * to software based rendering methods if the display does not support the accelerated operations.
  32:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 */
  33:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	struct AcceleratedDrawingMethods
  34:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	{
  35:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned clearAccelerated : 1;					///< @brief The display supports to clear screen.
  36:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned memoryCopyAccelerated : 1;				///< @brief The display supports burst access to the displ
  37:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawLineAccelerated : 1;				///< @brief The display supports drawing simple lines.
  38:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawRectangleStrokeAccelerated : 1;	///< @brief The display supports drawing strokes of 
  39:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawRectangeFillAccelerated : 1;		///< @brief The display supports filling rectangles.
  40:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawEllipseStrokeAccelerated : 1;		///< @brief The display supports drawing ellipse stro
  41:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawEllipseFillAccelerated : 1;		///< @brief The display supports filling ellipses.
  42:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawTextAccelerated : 1;				///< @brief The display supports text drawing.
  43:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	};
  44:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 
  45:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	/**
  46:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * @brief This class represents a point in a two-dimensional space and is used to draw into the di
  47:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 */
  48:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	class Point
  49:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	{
  50:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	public:
  51:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		/**
  52:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @brief Constructor, initializes the x and y coordinates of the point.
  53:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 *
  54:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @param x The X coordinate.
  55:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @param y The Y coordinate.
  56:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 */
  57:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		inline explicit Point( int x = 0 , int y = 0 ) : x( x ) , y( y ) {}
 3555              		.loc 82 57 0
 3556              		.cfi_startproc
 3557              		@ args = 0, pretend = 0, frame = 16
 3558              		@ frame_needed = 1, uses_anonymous_args = 0
 3559              		@ link register save eliminated.
 3560 0000 80B4     		push	{r7}
 3561              	.LCFI6:
 3562              		.cfi_def_cfa_offset 4
 3563 0002 85B0     		sub	sp, sp, #20
 3564              	.LCFI7:
 3565              		.cfi_def_cfa_offset 24
 3566 0004 00AF     		add	r7, sp, #0
 3567              		.cfi_offset 7, -4
 3568              	.LCFI8:
 3569              		.cfi_def_cfa_register 7
 3570 0006 F860     		str	r0, [r7, #12]
 3571 0008 B960     		str	r1, [r7, #8]
 3572 000a 7A60     		str	r2, [r7, #4]
 3573              	.LBB2:
 3574              		.loc 82 57 0
 3575 000c FB68     		ldr	r3, [r7, #12]
 3576 000e BA68     		ldr	r2, [r7, #8]
 3577 0010 1A60     		str	r2, [r3, #0]
 3578 0012 FB68     		ldr	r3, [r7, #12]
 3579 0014 7A68     		ldr	r2, [r7, #4]
 3580 0016 5A60     		str	r2, [r3, #4]
 3581              	.LBE2:
 3582 0018 FB68     		ldr	r3, [r7, #12]
 3583 001a 1846     		mov	r0, r3
 3584 001c 07F11407 		add	r7, r7, #20
 3585 0020 BD46     		mov	sp, r7
 3586 0022 80BC     		pop	{r7}
 3587 0024 7047     		bx	lr
 3588              		.cfi_endproc
 3589              	.LFE812:
 3591              		.weak	_ZN18IMonochromeDisplay5PointC1Eii
 3592              		.thumb_set _ZN18IMonochromeDisplay5PointC1Eii,_ZN18IMonochromeDisplay5PointC2Eii
 3593 0026 00BF     		.section	.text._ZN18IMonochromeDisplay4SizeC2Eii,"axG",%progbits,_ZN18IMonochromeDisplay4SizeC5Eii
 3594              		.align	2
 3595              		.weak	_ZN18IMonochromeDisplay4SizeC2Eii
 3596              		.thumb
 3597              		.thumb_func
 3599              	_ZN18IMonochromeDisplay4SizeC2Eii:
 3600              	.LFB815:
  58:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 
  59:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		int x;		///< @brief The X coordinate.
  60:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		int y;		///< @brief The Y coordinate.
  61:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	};
  62:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 
  63:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	/**
  64:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * @brief This class represents a size in a two-dimensional space used to describe the size for al
  65:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 */
  66:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	class Size
  67:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	{
  68:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	public:
  69:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		/**
  70:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @brief Constructor, initializes the width and height of a size.
  71:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 *
  72:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @param width 	The width.
  73:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @param height 	The height.
  74:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 */
  75:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		inline explicit Size( int width = 0 , int height = 0 ) : width( width ) , height( height ) {}
 3601              		.loc 82 75 0
 3602              		.cfi_startproc
 3603              		@ args = 0, pretend = 0, frame = 16
 3604              		@ frame_needed = 1, uses_anonymous_args = 0
 3605              		@ link register save eliminated.
 3606 0000 80B4     		push	{r7}
 3607              	.LCFI9:
 3608              		.cfi_def_cfa_offset 4
 3609 0002 85B0     		sub	sp, sp, #20
 3610              	.LCFI10:
 3611              		.cfi_def_cfa_offset 24
 3612 0004 00AF     		add	r7, sp, #0
 3613              		.cfi_offset 7, -4
 3614              	.LCFI11:
 3615              		.cfi_def_cfa_register 7
 3616 0006 F860     		str	r0, [r7, #12]
 3617 0008 B960     		str	r1, [r7, #8]
 3618 000a 7A60     		str	r2, [r7, #4]
 3619              	.LBB3:
 3620              		.loc 82 75 0
 3621 000c FB68     		ldr	r3, [r7, #12]
 3622 000e BA68     		ldr	r2, [r7, #8]
 3623 0010 1A60     		str	r2, [r3, #0]
 3624 0012 FB68     		ldr	r3, [r7, #12]
 3625 0014 7A68     		ldr	r2, [r7, #4]
 3626 0016 5A60     		str	r2, [r3, #4]
 3627              	.LBE3:
 3628 0018 FB68     		ldr	r3, [r7, #12]
 3629 001a 1846     		mov	r0, r3
 3630 001c 07F11407 		add	r7, r7, #20
 3631 0020 BD46     		mov	sp, r7
 3632 0022 80BC     		pop	{r7}
 3633 0024 7047     		bx	lr
 3634              		.cfi_endproc
 3635              	.LFE815:
 3637              		.weak	_ZN18IMonochromeDisplay4SizeC1Eii
 3638              		.thumb_set _ZN18IMonochromeDisplay4SizeC1Eii,_ZN18IMonochromeDisplay4SizeC2Eii
 3639 0026 00BF     		.section	.text._ZN5Air3T8MenuViewC2ER24MonochromeDisplayPainterRKSs,"ax",%progbits
 3640              		.align	2
 3641              		.global	_ZN5Air3T8MenuViewC2ER24MonochromeDisplayPainterRKSs
 3642              		.thumb
 3643              		.thumb_func
 3645              	_ZN5Air3T8MenuViewC2ER24MonochromeDisplayPainterRKSs:
 3646              	.LFB1024:
   1:../air3t/ui/menuview.cpp **** #include "MenuView"
   2:../air3t/ui/menuview.cpp **** #include <utils/MonochromeDisplayPainter>
   3:../air3t/ui/menuview.cpp **** #include <cstring>
   4:../air3t/ui/menuview.cpp **** #include <algorithm>
   5:../air3t/ui/menuview.cpp **** #include "IViewObserver"
   6:../air3t/ui/menuview.cpp **** 
   7:../air3t/ui/menuview.cpp **** namespace Air3T
   8:../air3t/ui/menuview.cpp **** {
   9:../air3t/ui/menuview.cpp **** 
  10:../air3t/ui/menuview.cpp **** 	MenuView::MenuView( MonochromeDisplayPainter & painter , const std::string & title )
 3647              		.loc 1 10 0
 3648              		.cfi_startproc
 3649              		@ args = 0, pretend = 0, frame = 16
 3650              		@ frame_needed = 1, uses_anonymous_args = 0
 3651 0000 80B5     		push	{r7, lr}
 3652              	.LCFI12:
 3653              		.cfi_def_cfa_offset 8
 3654 0002 84B0     		sub	sp, sp, #16
 3655              	.LCFI13:
 3656              		.cfi_def_cfa_offset 24
 3657 0004 00AF     		add	r7, sp, #0
 3658              		.cfi_offset 14, -4
 3659              		.cfi_offset 7, -8
 3660              	.LCFI14:
 3661              		.cfi_def_cfa_register 7
 3662 0006 F860     		str	r0, [r7, #12]
 3663 0008 B960     		str	r1, [r7, #8]
 3664 000a 7A60     		str	r2, [r7, #4]
 3665              	.LBB4:
  11:../air3t/ui/menuview.cpp **** 		: _painter( painter ) , _title( title ) , _window( 0 ) , _cursor( 0 )
 3666              		.loc 1 11 0
 3667 000c FB68     		ldr	r3, [r7, #12]
 3668 000e 1846     		mov	r0, r3
 3669 0010 FFF7FEFF 		bl	_ZN5Air3T4ViewC2Ev
 3670 0014 FB68     		ldr	r3, [r7, #12]
 3671 0016 134A     		ldr	r2, .L9
 3672 0018 1A60     		str	r2, [r3, #0]
 3673 001a FB68     		ldr	r3, [r7, #12]
 3674 001c BA68     		ldr	r2, [r7, #8]
 3675 001e 9A60     		str	r2, [r3, #8]
 3676 0020 FB68     		ldr	r3, [r7, #12]
 3677 0022 03F10C03 		add	r3, r3, #12
 3678 0026 1846     		mov	r0, r3
 3679 0028 7968     		ldr	r1, [r7, #4]
 3680 002a FFF7FEFF 		bl	_ZNSsC1ERKSs
 3681 002e FB68     		ldr	r3, [r7, #12]
 3682 0030 03F11003 		add	r3, r3, #16
 3683 0034 1846     		mov	r0, r3
 3684 0036 FFF7FEFF 		bl	_ZNSt6vectorISsSaISsEEC1Ev
 3685 003a FB68     		ldr	r3, [r7, #12]
 3686 003c 4FF00002 		mov	r2, #0
 3687 0040 DA61     		str	r2, [r3, #28]
 3688 0042 FB68     		ldr	r3, [r7, #12]
 3689 0044 4FF00002 		mov	r2, #0
 3690 0048 1A62     		str	r2, [r3, #32]
  12:../air3t/ui/menuview.cpp **** 	{
  13:../air3t/ui/menuview.cpp **** 		_painter.setAutoUpdate( false );
 3691              		.loc 1 13 0
 3692 004a FB68     		ldr	r3, [r7, #12]
 3693 004c 9B68     		ldr	r3, [r3, #8]
 3694 004e 1846     		mov	r0, r3
 3695 0050 4FF00001 		mov	r1, #0
 3696 0054 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter13setAutoUpdateEb
 3697              	.LBE4:
  14:../air3t/ui/menuview.cpp **** 	}
 3698              		.loc 1 14 0
 3699 0058 FB68     		ldr	r3, [r7, #12]
 3700 005a 1846     		mov	r0, r3
 3701 005c 07F11007 		add	r7, r7, #16
 3702 0060 BD46     		mov	sp, r7
 3703 0062 80BD     		pop	{r7, pc}
 3704              	.L10:
 3705              		.align	2
 3706              	.L9:
 3707 0064 08000000 		.word	_ZTVN5Air3T8MenuViewE+8
 3708              		.cfi_endproc
 3709              	.LFE1024:
 3711              		.global	_ZN5Air3T8MenuViewC1ER24MonochromeDisplayPainterRKSs
 3712              		.thumb_set _ZN5Air3T8MenuViewC1ER24MonochromeDisplayPainterRKSs,_ZN5Air3T8MenuViewC2ER24Monochrome
 3713              		.section	.text._ZN5Air3T8MenuViewD2Ev,"ax",%progbits
 3714              		.align	2
 3715              		.global	_ZN5Air3T8MenuViewD2Ev
 3716              		.thumb
 3717              		.thumb_func
 3719              	_ZN5Air3T8MenuViewD2Ev:
 3720              	.LFB1027:
  15:../air3t/ui/menuview.cpp **** 
  16:../air3t/ui/menuview.cpp **** 	MenuView::~MenuView()
 3721              		.loc 1 16 0
 3722              		.cfi_startproc
 3723              		@ args = 0, pretend = 0, frame = 8
 3724              		@ frame_needed = 1, uses_anonymous_args = 0
 3725 0000 80B5     		push	{r7, lr}
 3726              	.LCFI15:
 3727              		.cfi_def_cfa_offset 8
 3728 0002 82B0     		sub	sp, sp, #8
 3729              	.LCFI16:
 3730              		.cfi_def_cfa_offset 16
 3731 0004 00AF     		add	r7, sp, #0
 3732              		.cfi_offset 14, -4
 3733              		.cfi_offset 7, -8
 3734              	.LCFI17:
 3735              		.cfi_def_cfa_register 7
 3736 0006 7860     		str	r0, [r7, #4]
 3737              	.LBB5:
 3738              		.loc 1 16 0
 3739 0008 7B68     		ldr	r3, [r7, #4]
 3740 000a 114A     		ldr	r2, .L14
 3741 000c 1A60     		str	r2, [r3, #0]
 3742 000e 7B68     		ldr	r3, [r7, #4]
 3743 0010 03F11003 		add	r3, r3, #16
  17:../air3t/ui/menuview.cpp **** 	{}
 3744              		.loc 1 17 0
 3745 0014 1846     		mov	r0, r3
 3746 0016 FFF7FEFF 		bl	_ZNSt6vectorISsSaISsEED1Ev
  16:../air3t/ui/menuview.cpp **** 	MenuView::~MenuView()
 3747              		.loc 1 16 0
 3748 001a 7B68     		ldr	r3, [r7, #4]
 3749 001c 03F10C03 		add	r3, r3, #12
 3750              		.loc 1 17 0
 3751 0020 1846     		mov	r0, r3
 3752 0022 FFF7FEFF 		bl	_ZNSsD1Ev
  16:../air3t/ui/menuview.cpp **** 	MenuView::~MenuView()
 3753              		.loc 1 16 0
 3754 0026 7B68     		ldr	r3, [r7, #4]
 3755              		.loc 1 17 0
 3756 0028 1846     		mov	r0, r3
 3757 002a FFF7FEFF 		bl	_ZN5Air3T4ViewD2Ev
 3758              	.LBE5:
 3759 002e 4FF00003 		mov	r3, #0
 3760 0032 03F00103 		and	r3, r3, #1
 3761 0036 DBB2     		uxtb	r3, r3
 3762 0038 002B     		cmp	r3, #0
 3763 003a 02D0     		beq	.L13
 3764              		.loc 1 17 0 is_stmt 0 discriminator 2
 3765 003c 7868     		ldr	r0, [r7, #4]
 3766 003e FFF7FEFF 		bl	_ZdlPv
 3767              	.L13:
 3768              		.loc 1 17 0 discriminator 3
 3769 0042 7B68     		ldr	r3, [r7, #4]
 3770 0044 1846     		mov	r0, r3
 3771 0046 07F10807 		add	r7, r7, #8
 3772 004a BD46     		mov	sp, r7
 3773 004c 80BD     		pop	{r7, pc}
 3774              	.L15:
 3775 004e 00BF     		.align	2
 3776              	.L14:
 3777 0050 08000000 		.word	_ZTVN5Air3T8MenuViewE+8
 3778              		.cfi_endproc
 3779              	.LFE1027:
 3781              		.global	_ZN5Air3T8MenuViewD1Ev
 3782              		.thumb_set _ZN5Air3T8MenuViewD1Ev,_ZN5Air3T8MenuViewD2Ev
 3783              		.section	.text._ZN5Air3T8MenuViewD0Ev,"ax",%progbits
 3784              		.align	2
 3785              		.global	_ZN5Air3T8MenuViewD0Ev
 3786              		.thumb
 3787              		.thumb_func
 3789              	_ZN5Air3T8MenuViewD0Ev:
 3790              	.LFB1029:
  16:../air3t/ui/menuview.cpp **** 	MenuView::~MenuView()
 3791              		.loc 1 16 0 is_stmt 1
 3792              		.cfi_startproc
 3793              		@ args = 0, pretend = 0, frame = 8
 3794              		@ frame_needed = 1, uses_anonymous_args = 0
 3795 0000 80B5     		push	{r7, lr}
 3796              	.LCFI18:
 3797              		.cfi_def_cfa_offset 8
 3798 0002 82B0     		sub	sp, sp, #8
 3799              	.LCFI19:
 3800              		.cfi_def_cfa_offset 16
 3801 0004 00AF     		add	r7, sp, #0
 3802              		.cfi_offset 14, -4
 3803              		.cfi_offset 7, -8
 3804              	.LCFI20:
 3805              		.cfi_def_cfa_register 7
 3806 0006 7860     		str	r0, [r7, #4]
 3807              		.loc 1 17 0
 3808 0008 7868     		ldr	r0, [r7, #4]
 3809 000a FFF7FEFF 		bl	_ZN5Air3T8MenuViewD1Ev
 3810 000e 7868     		ldr	r0, [r7, #4]
 3811 0010 FFF7FEFF 		bl	_ZdlPv
 3812 0014 7B68     		ldr	r3, [r7, #4]
 3813 0016 1846     		mov	r0, r3
 3814 0018 07F10807 		add	r7, r7, #8
 3815 001c BD46     		mov	sp, r7
 3816 001e 80BD     		pop	{r7, pc}
 3817              		.cfi_endproc
 3818              	.LFE1029:
 3820              		.section	.text._ZN5Air3T8MenuView7repaintEv,"ax",%progbits
 3821              		.align	2
 3822              		.global	_ZN5Air3T8MenuView7repaintEv
 3823              		.thumb
 3824              		.thumb_func
 3826              	_ZN5Air3T8MenuView7repaintEv:
 3827              	.LFB1030:
  18:../air3t/ui/menuview.cpp **** 
  19:../air3t/ui/menuview.cpp **** 	void MenuView::repaint()
  20:../air3t/ui/menuview.cpp **** 	{
 3828              		.loc 1 20 0
 3829              		.cfi_startproc
 3830              		@ args = 0, pretend = 0, frame = 112
 3831              		@ frame_needed = 1, uses_anonymous_args = 0
 3832 0000 90B5     		push	{r4, r7, lr}
 3833              	.LCFI21:
 3834              		.cfi_def_cfa_offset 12
 3835 0002 9FB0     		sub	sp, sp, #124
 3836              	.LCFI22:
 3837              		.cfi_def_cfa_offset 136
 3838 0004 02AF     		add	r7, sp, #8
 3839              		.cfi_offset 14, -4
 3840              		.cfi_offset 7, -8
 3841              		.cfi_offset 4, -12
 3842              	.LCFI23:
 3843              		.cfi_def_cfa 7, 128
 3844 0006 7860     		str	r0, [r7, #4]
 3845              	.LBB6:
  21:../air3t/ui/menuview.cpp **** 		//Â Check that _cursor and _window are within the size.
  22:../air3t/ui/menuview.cpp **** 		_window = std::max( 0 , std::min( _window , static_cast<int>( _menu.size() ) - 4 ) );
 3846              		.loc 1 22 0
 3847 0008 4FF00003 		mov	r3, #0
 3848 000c BB60     		str	r3, [r7, #8]
 3849 000e 7B68     		ldr	r3, [r7, #4]
 3850 0010 03F11C04 		add	r4, r3, #28
 3851 0014 7B68     		ldr	r3, [r7, #4]
 3852 0016 03F11003 		add	r3, r3, #16
 3853 001a 1846     		mov	r0, r3
 3854 001c FFF7FEFF 		bl	_ZNKSt6vectorISsSaISsEE4sizeEv
 3855 0020 0346     		mov	r3, r0
 3856 0022 A3F10403 		sub	r3, r3, #4
 3857 0026 FB60     		str	r3, [r7, #12]
 3858 0028 07F10C03 		add	r3, r7, #12
 3859 002c 2046     		mov	r0, r4
 3860 002e 1946     		mov	r1, r3
 3861 0030 FFF7FEFF 		bl	_ZSt3minIiERKT_S2_S2_
 3862 0034 0346     		mov	r3, r0
 3863 0036 07F10802 		add	r2, r7, #8
 3864 003a 1046     		mov	r0, r2
 3865 003c 1946     		mov	r1, r3
 3866 003e FFF7FEFF 		bl	_ZSt3maxIiERKT_S2_S2_
 3867 0042 0346     		mov	r3, r0
 3868 0044 1A68     		ldr	r2, [r3, #0]
 3869 0046 7B68     		ldr	r3, [r7, #4]
 3870 0048 DA61     		str	r2, [r3, #28]
  23:../air3t/ui/menuview.cpp **** 		_cursor = std::max( 0 , std::min( _cursor , static_cast<int>( _menu.size() ) - 1 ) );
 3871              		.loc 1 23 0
 3872 004a 4FF00003 		mov	r3, #0
 3873 004e 3B61     		str	r3, [r7, #16]
 3874 0050 7B68     		ldr	r3, [r7, #4]
 3875 0052 03F12004 		add	r4, r3, #32
 3876 0056 7B68     		ldr	r3, [r7, #4]
 3877 0058 03F11003 		add	r3, r3, #16
 3878 005c 1846     		mov	r0, r3
 3879 005e FFF7FEFF 		bl	_ZNKSt6vectorISsSaISsEE4sizeEv
 3880 0062 0346     		mov	r3, r0
 3881 0064 03F1FF33 		add	r3, r3, #-1
 3882 0068 7B61     		str	r3, [r7, #20]
 3883 006a 07F11403 		add	r3, r7, #20
 3884 006e 2046     		mov	r0, r4
 3885 0070 1946     		mov	r1, r3
 3886 0072 FFF7FEFF 		bl	_ZSt3minIiERKT_S2_S2_
 3887 0076 0346     		mov	r3, r0
 3888 0078 07F11002 		add	r2, r7, #16
 3889 007c 1046     		mov	r0, r2
 3890 007e 1946     		mov	r1, r3
 3891 0080 FFF7FEFF 		bl	_ZSt3maxIiERKT_S2_S2_
 3892 0084 0346     		mov	r3, r0
 3893 0086 1A68     		ldr	r2, [r3, #0]
 3894 0088 7B68     		ldr	r3, [r7, #4]
 3895 008a 1A62     		str	r2, [r3, #32]
  24:../air3t/ui/menuview.cpp **** 
  25:../air3t/ui/menuview.cpp **** 		//Â Clear display.
  26:../air3t/ui/menuview.cpp **** 		_painter.clear();
 3896              		.loc 1 26 0
 3897 008c 7B68     		ldr	r3, [r7, #4]
 3898 008e 9B68     		ldr	r3, [r3, #8]
 3899 0090 1846     		mov	r0, r3
 3900 0092 4FF0FF31 		mov	r1, #-1
 3901 0096 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE
  27:../air3t/ui/menuview.cpp **** 
  28:../air3t/ui/menuview.cpp **** 		//Â Draw title and box.
  29:../air3t/ui/menuview.cpp **** 		_painter.drawRectangle( IMDPoint( 0 , 0 ) , IMDSize( 84 , 48 ) , IMonochromeDisplay::Black );
 3902              		.loc 1 29 0
 3903 009a 7B68     		ldr	r3, [r7, #4]
 3904 009c 9C68     		ldr	r4, [r3, #8]
 3905 009e 07F11803 		add	r3, r7, #24
 3906 00a2 1846     		mov	r0, r3
 3907 00a4 4FF00001 		mov	r1, #0
 3908 00a8 4FF00002 		mov	r2, #0
 3909 00ac FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 3910 00b0 07F12003 		add	r3, r7, #32
 3911 00b4 1846     		mov	r0, r3
 3912 00b6 4FF05401 		mov	r1, #84
 3913 00ba 4FF03002 		mov	r2, #48
 3914 00be FFF7FEFF 		bl	_ZN18IMonochromeDisplay4SizeC1Eii
 3915 00c2 07F11802 		add	r2, r7, #24
 3916 00c6 07F12003 		add	r3, r7, #32
 3917 00ca 4FF00001 		mov	r1, #0
 3918 00ce 0091     		str	r1, [sp, #0]
 3919 00d0 2046     		mov	r0, r4
 3920 00d2 1146     		mov	r1, r2
 3921 00d4 1A46     		mov	r2, r3
 3922 00d6 4FF00103 		mov	r3, #1
 3923 00da FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10Pi
  30:../air3t/ui/menuview.cpp **** 		_painter.drawRectangle( IMDPoint( 0 , 0 ) , IMDSize( 84 , 9 ) , IMonochromeDisplay::Black ,
  31:../air3t/ui/menuview.cpp **** 								IMonochromeDisplay::Black );
 3924              		.loc 1 31 0
 3925 00de 7B68     		ldr	r3, [r7, #4]
 3926 00e0 9C68     		ldr	r4, [r3, #8]
 3927 00e2 07F12803 		add	r3, r7, #40
 3928 00e6 1846     		mov	r0, r3
 3929 00e8 4FF00001 		mov	r1, #0
 3930 00ec 4FF00002 		mov	r2, #0
 3931 00f0 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 3932 00f4 07F13003 		add	r3, r7, #48
 3933 00f8 1846     		mov	r0, r3
 3934 00fa 4FF05401 		mov	r1, #84
 3935 00fe 4FF00902 		mov	r2, #9
 3936 0102 FFF7FEFF 		bl	_ZN18IMonochromeDisplay4SizeC1Eii
 3937 0106 07F12802 		add	r2, r7, #40
 3938 010a 07F13003 		add	r3, r7, #48
 3939 010e 4FF00101 		mov	r1, #1
 3940 0112 0091     		str	r1, [sp, #0]
 3941 0114 2046     		mov	r0, r4
 3942 0116 1146     		mov	r1, r2
 3943 0118 1A46     		mov	r2, r3
 3944 011a 4FF00103 		mov	r3, #1
 3945 011e FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10Pi
  32:../air3t/ui/menuview.cpp **** 		_painter.drawText( IMDPoint( 42 - _title.size() * 6 / 2 , 1 ) , _title ,
  33:../air3t/ui/menuview.cpp **** 						   IMonochromeDisplay::White );
 3946              		.loc 1 33 0
 3947 0122 7B68     		ldr	r3, [r7, #4]
 3948 0124 9C68     		ldr	r4, [r3, #8]
  32:../air3t/ui/menuview.cpp **** 		_painter.drawText( IMDPoint( 42 - _title.size() * 6 / 2 , 1 ) , _title ,
 3949              		.loc 1 32 0
 3950 0126 7B68     		ldr	r3, [r7, #4]
 3951 0128 03F10C03 		add	r3, r3, #12
 3952 012c 1846     		mov	r0, r3
 3953 012e FFF7FEFF 		bl	_ZNKSs4sizeEv
 3954 0132 0246     		mov	r2, r0
 3955              		.loc 1 33 0
 3956 0134 1346     		mov	r3, r2
 3957 0136 4FEA4303 		lsl	r3, r3, #1
 3958 013a 9B18     		adds	r3, r3, r2
 3959 013c 4FEA4303 		lsl	r3, r3, #1
 3960 0140 4FEA5303 		lsr	r3, r3, #1
 3961 0144 C3F12A03 		rsb	r3, r3, #42
 3962 0148 07F13802 		add	r2, r7, #56
 3963 014c 1046     		mov	r0, r2
 3964 014e 1946     		mov	r1, r3
 3965 0150 4FF00102 		mov	r2, #1
 3966 0154 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 3967 0158 7B68     		ldr	r3, [r7, #4]
 3968 015a 03F10C03 		add	r3, r3, #12
 3969 015e 07F13802 		add	r2, r7, #56
 3970 0162 2046     		mov	r0, r4
 3971 0164 1146     		mov	r1, r2
 3972 0166 1A46     		mov	r2, r3
 3973 0168 4FF0FF33 		mov	r3, #-1
 3974 016c FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE
  34:../air3t/ui/menuview.cpp **** 
  35:../air3t/ui/menuview.cpp **** 		int displayedSize = std::min( static_cast<unsigned int>( _menu.size() ) , 4U );
 3975              		.loc 1 35 0
 3976 0170 7B68     		ldr	r3, [r7, #4]
 3977 0172 03F11003 		add	r3, r3, #16
 3978 0176 1846     		mov	r0, r3
 3979 0178 FFF7FEFF 		bl	_ZNKSt6vectorISsSaISsEE4sizeEv
 3980 017c 0346     		mov	r3, r0
 3981 017e 3B64     		str	r3, [r7, #64]
 3982 0180 4FF00403 		mov	r3, #4
 3983 0184 7B64     		str	r3, [r7, #68]
 3984 0186 07F14002 		add	r2, r7, #64
 3985 018a 07F14403 		add	r3, r7, #68
 3986 018e 1046     		mov	r0, r2
 3987 0190 1946     		mov	r1, r3
 3988 0192 FFF7FEFF 		bl	_ZSt3minIjERKT_S2_S2_
 3989 0196 0346     		mov	r3, r0
 3990 0198 1B68     		ldr	r3, [r3, #0]
 3991 019a BB66     		str	r3, [r7, #104]
 3992              	.LBB7:
  36:../air3t/ui/menuview.cpp **** 
  37:../air3t/ui/menuview.cpp **** 		for ( int i = 0 ; i < displayedSize ; ++i )
 3993              		.loc 1 37 0
 3994 019c 4FF00003 		mov	r3, #0
 3995 01a0 FB66     		str	r3, [r7, #108]
 3996 01a2 ECE0     		b	.L19
 3997              	.L22:
  38:../air3t/ui/menuview.cpp **** 		{
  39:../air3t/ui/menuview.cpp **** 			if ( _cursor == i + _window )
 3998              		.loc 1 39 0
 3999 01a4 7B68     		ldr	r3, [r7, #4]
 4000 01a6 1A6A     		ldr	r2, [r3, #32]
 4001 01a8 7B68     		ldr	r3, [r7, #4]
 4002 01aa D969     		ldr	r1, [r3, #28]
 4003 01ac FB6E     		ldr	r3, [r7, #108]
 4004 01ae CB18     		adds	r3, r1, r3
 4005 01b0 9A42     		cmp	r2, r3
 4006 01b2 40F09E80 		bne	.L20
  40:../air3t/ui/menuview.cpp **** 			{
  41:../air3t/ui/menuview.cpp **** 				_painter.drawRectangle( IMDPoint( 42 - _menu[i + _window].size() * 6 / 2 - 2 ,
  42:../air3t/ui/menuview.cpp **** 												  28 - displayedSize * 4 + i * 8 ) ,
  43:../air3t/ui/menuview.cpp **** 										IMDSize( _menu[i + _window].size() * 6 + 3 , 8 ) ,
  44:../air3t/ui/menuview.cpp **** 										IMonochromeDisplay::Black , IMonochromeDisplay::Black );
 4007              		.loc 1 44 0
 4008 01b6 7B68     		ldr	r3, [r7, #4]
 4009 01b8 9C68     		ldr	r4, [r3, #8]
  41:../air3t/ui/menuview.cpp **** 				_painter.drawRectangle( IMDPoint( 42 - _menu[i + _window].size() * 6 / 2 - 2 ,
 4010              		.loc 1 41 0
 4011 01ba 7B68     		ldr	r3, [r7, #4]
 4012 01bc 03F11002 		add	r2, r3, #16
 4013 01c0 7B68     		ldr	r3, [r7, #4]
 4014 01c2 D969     		ldr	r1, [r3, #28]
 4015 01c4 FB6E     		ldr	r3, [r7, #108]
 4016 01c6 CB18     		adds	r3, r1, r3
 4017 01c8 1046     		mov	r0, r2
 4018 01ca 1946     		mov	r1, r3
 4019 01cc FFF7FEFF 		bl	_ZNSt6vectorISsSaISsEEixEj
 4020 01d0 0346     		mov	r3, r0
 4021 01d2 1846     		mov	r0, r3
 4022 01d4 FFF7FEFF 		bl	_ZNKSs4sizeEv
 4023 01d8 0246     		mov	r2, r0
 4024              		.loc 1 44 0
 4025 01da 1346     		mov	r3, r2
 4026 01dc 4FEA4303 		lsl	r3, r3, #1
 4027 01e0 9B18     		adds	r3, r3, r2
 4028 01e2 4FEA4303 		lsl	r3, r3, #1
 4029 01e6 4FEA5303 		lsr	r3, r3, #1
 4030 01ea C3F12803 		rsb	r3, r3, #40
 4031 01ee 1A46     		mov	r2, r3
 4032 01f0 BB6E     		ldr	r3, [r7, #104]
 4033 01f2 C3F10701 		rsb	r1, r3, #7
 4034 01f6 FB6E     		ldr	r3, [r7, #108]
 4035 01f8 4FEA4303 		lsl	r3, r3, #1
 4036 01fc CB18     		adds	r3, r1, r3
 4037 01fe 4FEA8303 		lsl	r3, r3, #2
 4038 0202 07F14801 		add	r1, r7, #72
 4039 0206 0846     		mov	r0, r1
 4040 0208 1146     		mov	r1, r2
 4041 020a 1A46     		mov	r2, r3
 4042 020c FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
  43:../air3t/ui/menuview.cpp **** 										IMDSize( _menu[i + _window].size() * 6 + 3 , 8 ) ,
 4043              		.loc 1 43 0
 4044 0210 7B68     		ldr	r3, [r7, #4]
 4045 0212 03F11002 		add	r2, r3, #16
 4046 0216 7B68     		ldr	r3, [r7, #4]
 4047 0218 D969     		ldr	r1, [r3, #28]
 4048 021a FB6E     		ldr	r3, [r7, #108]
 4049 021c CB18     		adds	r3, r1, r3
 4050 021e 1046     		mov	r0, r2
 4051 0220 1946     		mov	r1, r3
 4052 0222 FFF7FEFF 		bl	_ZNSt6vectorISsSaISsEEixEj
 4053 0226 0346     		mov	r3, r0
 4054 0228 1846     		mov	r0, r3
 4055 022a FFF7FEFF 		bl	_ZNKSs4sizeEv
 4056 022e 0246     		mov	r2, r0
 4057              		.loc 1 44 0
 4058 0230 1346     		mov	r3, r2
 4059 0232 4FEA4303 		lsl	r3, r3, #1
 4060 0236 9B18     		adds	r3, r3, r2
 4061 0238 4FEA4303 		lsl	r3, r3, #1
 4062 023c 03F10303 		add	r3, r3, #3
 4063 0240 07F15002 		add	r2, r7, #80
 4064 0244 1046     		mov	r0, r2
 4065 0246 1946     		mov	r1, r3
 4066 0248 4FF00802 		mov	r2, #8
 4067 024c FFF7FEFF 		bl	_ZN18IMonochromeDisplay4SizeC1Eii
 4068 0250 07F14802 		add	r2, r7, #72
 4069 0254 07F15003 		add	r3, r7, #80
 4070 0258 4FF00101 		mov	r1, #1
 4071 025c 0091     		str	r1, [sp, #0]
 4072 025e 2046     		mov	r0, r4
 4073 0260 1146     		mov	r1, r2
 4074 0262 1A46     		mov	r2, r3
 4075 0264 4FF00103 		mov	r3, #1
 4076 0268 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10Pi
  45:../air3t/ui/menuview.cpp **** 
  46:../air3t/ui/menuview.cpp **** 				_painter.drawText( IMDPoint( 42 - _menu[i + _window].size() * 6 / 2 ,
  47:../air3t/ui/menuview.cpp **** 											 28 - displayedSize * 4 + i * 8 ) ,
  48:../air3t/ui/menuview.cpp **** 											 _menu[i + _window] , IMonochromeDisplay::White );
 4077              		.loc 1 48 0
 4078 026c 7B68     		ldr	r3, [r7, #4]
 4079 026e 9C68     		ldr	r4, [r3, #8]
  46:../air3t/ui/menuview.cpp **** 				_painter.drawText( IMDPoint( 42 - _menu[i + _window].size() * 6 / 2 ,
 4080              		.loc 1 46 0
 4081 0270 7B68     		ldr	r3, [r7, #4]
 4082 0272 03F11002 		add	r2, r3, #16
 4083 0276 7B68     		ldr	r3, [r7, #4]
 4084 0278 D969     		ldr	r1, [r3, #28]
 4085 027a FB6E     		ldr	r3, [r7, #108]
 4086 027c CB18     		adds	r3, r1, r3
 4087 027e 1046     		mov	r0, r2
 4088 0280 1946     		mov	r1, r3
 4089 0282 FFF7FEFF 		bl	_ZNSt6vectorISsSaISsEEixEj
 4090 0286 0346     		mov	r3, r0
 4091 0288 1846     		mov	r0, r3
 4092 028a FFF7FEFF 		bl	_ZNKSs4sizeEv
 4093 028e 0246     		mov	r2, r0
 4094              		.loc 1 48 0
 4095 0290 1346     		mov	r3, r2
 4096 0292 4FEA4303 		lsl	r3, r3, #1
 4097 0296 9B18     		adds	r3, r3, r2
 4098 0298 4FEA4303 		lsl	r3, r3, #1
 4099 029c 4FEA5303 		lsr	r3, r3, #1
 4100 02a0 C3F12A03 		rsb	r3, r3, #42
 4101 02a4 1A46     		mov	r2, r3
 4102 02a6 BB6E     		ldr	r3, [r7, #104]
 4103 02a8 C3F10701 		rsb	r1, r3, #7
 4104 02ac FB6E     		ldr	r3, [r7, #108]
 4105 02ae 4FEA4303 		lsl	r3, r3, #1
 4106 02b2 CB18     		adds	r3, r1, r3
 4107 02b4 4FEA8303 		lsl	r3, r3, #2
 4108 02b8 07F15801 		add	r1, r7, #88
 4109 02bc 0846     		mov	r0, r1
 4110 02be 1146     		mov	r1, r2
 4111 02c0 1A46     		mov	r2, r3
 4112 02c2 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 4113 02c6 7B68     		ldr	r3, [r7, #4]
 4114 02c8 03F11002 		add	r2, r3, #16
 4115 02cc 7B68     		ldr	r3, [r7, #4]
 4116 02ce D969     		ldr	r1, [r3, #28]
 4117 02d0 FB6E     		ldr	r3, [r7, #108]
 4118 02d2 CB18     		adds	r3, r1, r3
 4119 02d4 1046     		mov	r0, r2
 4120 02d6 1946     		mov	r1, r3
 4121 02d8 FFF7FEFF 		bl	_ZNSt6vectorISsSaISsEEixEj
 4122 02dc 0346     		mov	r3, r0
 4123 02de 07F15802 		add	r2, r7, #88
 4124 02e2 2046     		mov	r0, r4
 4125 02e4 1146     		mov	r1, r2
 4126 02e6 1A46     		mov	r2, r3
 4127 02e8 4FF0FF33 		mov	r3, #-1
 4128 02ec FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE
 4129 02f0 41E0     		b	.L21
 4130              	.L20:
  49:../air3t/ui/menuview.cpp **** 			}
  50:../air3t/ui/menuview.cpp **** 			else
  51:../air3t/ui/menuview.cpp **** 			{
  52:../air3t/ui/menuview.cpp **** 				_painter.drawText( IMDPoint( 42 - _menu[i + _window].size() * 6 / 2 ,
  53:../air3t/ui/menuview.cpp **** 											 28 - displayedSize * 4 + i * 8 ) ,
  54:../air3t/ui/menuview.cpp **** 											 _menu[i + _window] , IMonochromeDisplay::Black );
 4131              		.loc 1 54 0
 4132 02f2 7B68     		ldr	r3, [r7, #4]
 4133 02f4 9C68     		ldr	r4, [r3, #8]
  52:../air3t/ui/menuview.cpp **** 				_painter.drawText( IMDPoint( 42 - _menu[i + _window].size() * 6 / 2 ,
 4134              		.loc 1 52 0
 4135 02f6 7B68     		ldr	r3, [r7, #4]
 4136 02f8 03F11002 		add	r2, r3, #16
 4137 02fc 7B68     		ldr	r3, [r7, #4]
 4138 02fe D969     		ldr	r1, [r3, #28]
 4139 0300 FB6E     		ldr	r3, [r7, #108]
 4140 0302 CB18     		adds	r3, r1, r3
 4141 0304 1046     		mov	r0, r2
 4142 0306 1946     		mov	r1, r3
 4143 0308 FFF7FEFF 		bl	_ZNSt6vectorISsSaISsEEixEj
 4144 030c 0346     		mov	r3, r0
 4145 030e 1846     		mov	r0, r3
 4146 0310 FFF7FEFF 		bl	_ZNKSs4sizeEv
 4147 0314 0246     		mov	r2, r0
 4148              		.loc 1 54 0
 4149 0316 1346     		mov	r3, r2
 4150 0318 4FEA4303 		lsl	r3, r3, #1
 4151 031c 9B18     		adds	r3, r3, r2
 4152 031e 4FEA4303 		lsl	r3, r3, #1
 4153 0322 4FEA5303 		lsr	r3, r3, #1
 4154 0326 C3F12A03 		rsb	r3, r3, #42
 4155 032a 1A46     		mov	r2, r3
 4156 032c BB6E     		ldr	r3, [r7, #104]
 4157 032e C3F10701 		rsb	r1, r3, #7
 4158 0332 FB6E     		ldr	r3, [r7, #108]
 4159 0334 4FEA4303 		lsl	r3, r3, #1
 4160 0338 CB18     		adds	r3, r1, r3
 4161 033a 4FEA8303 		lsl	r3, r3, #2
 4162 033e 07F16001 		add	r1, r7, #96
 4163 0342 0846     		mov	r0, r1
 4164 0344 1146     		mov	r1, r2
 4165 0346 1A46     		mov	r2, r3
 4166 0348 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 4167 034c 7B68     		ldr	r3, [r7, #4]
 4168 034e 03F11002 		add	r2, r3, #16
 4169 0352 7B68     		ldr	r3, [r7, #4]
 4170 0354 D969     		ldr	r1, [r3, #28]
 4171 0356 FB6E     		ldr	r3, [r7, #108]
 4172 0358 CB18     		adds	r3, r1, r3
 4173 035a 1046     		mov	r0, r2
 4174 035c 1946     		mov	r1, r3
 4175 035e FFF7FEFF 		bl	_ZNSt6vectorISsSaISsEEixEj
 4176 0362 0346     		mov	r3, r0
 4177 0364 07F16002 		add	r2, r7, #96
 4178 0368 2046     		mov	r0, r4
 4179 036a 1146     		mov	r1, r2
 4180 036c 1A46     		mov	r2, r3
 4181 036e 4FF00103 		mov	r3, #1
 4182 0372 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE
 4183              	.L21:
  37:../air3t/ui/menuview.cpp **** 		for ( int i = 0 ; i < displayedSize ; ++i )
 4184              		.loc 1 37 0
 4185 0376 FB6E     		ldr	r3, [r7, #108]
 4186 0378 03F10103 		add	r3, r3, #1
 4187 037c FB66     		str	r3, [r7, #108]
 4188              	.L19:
  37:../air3t/ui/menuview.cpp **** 		for ( int i = 0 ; i < displayedSize ; ++i )
 4189              		.loc 1 37 0 is_stmt 0 discriminator 1
 4190 037e FA6E     		ldr	r2, [r7, #108]
 4191 0380 BB6E     		ldr	r3, [r7, #104]
 4192 0382 9A42     		cmp	r2, r3
 4193 0384 ACBF     		ite	ge
 4194 0386 0023     		movge	r3, #0
 4195 0388 0123     		movlt	r3, #1
 4196 038a DBB2     		uxtb	r3, r3
 4197 038c 002B     		cmp	r3, #0
 4198 038e 7FF409AF 		bne	.L22
 4199              	.LBE7:
  55:../air3t/ui/menuview.cpp **** 			}
  56:../air3t/ui/menuview.cpp **** 		}
  57:../air3t/ui/menuview.cpp **** 
  58:../air3t/ui/menuview.cpp **** 		_painter.update();
 4200              		.loc 1 58 0 is_stmt 1
 4201 0392 7B68     		ldr	r3, [r7, #4]
 4202 0394 9B68     		ldr	r3, [r3, #8]
 4203 0396 1846     		mov	r0, r3
 4204 0398 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter6updateEv
 4205              	.LBE6:
  59:../air3t/ui/menuview.cpp **** 	}
 4206              		.loc 1 59 0
 4207 039c 07F17407 		add	r7, r7, #116
 4208 03a0 BD46     		mov	sp, r7
 4209 03a2 90BD     		pop	{r4, r7, pc}
 4210              		.cfi_endproc
 4211              	.LFE1030:
 4213              		.section	.text._ZN5Air3T8MenuView16onPositionChangeEN9IJoystick8PositionE,"ax",%progbits
 4214              		.align	2
 4215              		.global	_ZN5Air3T8MenuView16onPositionChangeEN9IJoystick8PositionE
 4216              		.thumb
 4217              		.thumb_func
 4219              	_ZN5Air3T8MenuView16onPositionChangeEN9IJoystick8PositionE:
 4220              	.LFB1031:
  60:../air3t/ui/menuview.cpp **** 
  61:../air3t/ui/menuview.cpp **** 	void MenuView::onPositionChange( IJoystick::Position position )
  62:../air3t/ui/menuview.cpp **** 	{
 4221              		.loc 1 62 0
 4222              		.cfi_startproc
 4223              		@ args = 0, pretend = 0, frame = 8
 4224              		@ frame_needed = 1, uses_anonymous_args = 0
 4225 0000 90B5     		push	{r4, r7, lr}
 4226              	.LCFI24:
 4227              		.cfi_def_cfa_offset 12
 4228 0002 83B0     		sub	sp, sp, #12
 4229              	.LCFI25:
 4230              		.cfi_def_cfa_offset 24
 4231 0004 00AF     		add	r7, sp, #0
 4232              		.cfi_offset 14, -4
 4233              		.cfi_offset 7, -8
 4234              		.cfi_offset 4, -12
 4235              	.LCFI26:
 4236              		.cfi_def_cfa_register 7
 4237 0006 7860     		str	r0, [r7, #4]
 4238 0008 0B46     		mov	r3, r1
 4239 000a FB70     		strb	r3, [r7, #3]
  63:../air3t/ui/menuview.cpp **** 		switch ( position )
 4240              		.loc 1 63 0
 4241 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4242 000e 102B     		cmp	r3, #16
 4243 0010 1BD0     		beq	.L26
 4244 0012 202B     		cmp	r3, #32
 4245 0014 42D0     		beq	.L27
 4246 0016 082B     		cmp	r3, #8
 4247 0018 5AD1     		bne	.L33
 4248              	.L25:
  64:../air3t/ui/menuview.cpp **** 		{
  65:../air3t/ui/menuview.cpp **** 			case IJoystick::Up:
  66:../air3t/ui/menuview.cpp **** 				if ( _cursor > 0 )
 4249              		.loc 1 66 0
 4250 001a 7B68     		ldr	r3, [r7, #4]
 4251 001c 1B6A     		ldr	r3, [r3, #32]
 4252 001e 002B     		cmp	r3, #0
 4253 0020 58DD     		ble	.L34
  67:../air3t/ui/menuview.cpp **** 				{
  68:../air3t/ui/menuview.cpp **** 					_cursor--;
 4254              		.loc 1 68 0
 4255 0022 7B68     		ldr	r3, [r7, #4]
 4256 0024 1B6A     		ldr	r3, [r3, #32]
 4257 0026 03F1FF32 		add	r2, r3, #-1
 4258 002a 7B68     		ldr	r3, [r7, #4]
 4259 002c 1A62     		str	r2, [r3, #32]
  69:../air3t/ui/menuview.cpp **** 					if ( _window > _cursor ) _window = _cursor;
 4260              		.loc 1 69 0
 4261 002e 7B68     		ldr	r3, [r7, #4]
 4262 0030 DA69     		ldr	r2, [r3, #28]
 4263 0032 7B68     		ldr	r3, [r7, #4]
 4264 0034 1B6A     		ldr	r3, [r3, #32]
 4265 0036 9A42     		cmp	r2, r3
 4266 0038 03DD     		ble	.L29
 4267              		.loc 1 69 0 is_stmt 0 discriminator 1
 4268 003a 7B68     		ldr	r3, [r7, #4]
 4269 003c 1A6A     		ldr	r2, [r3, #32]
 4270 003e 7B68     		ldr	r3, [r7, #4]
 4271 0040 DA61     		str	r2, [r3, #28]
 4272              	.L29:
  70:../air3t/ui/menuview.cpp **** 					repaint();
 4273              		.loc 1 70 0 is_stmt 1
 4274 0042 7868     		ldr	r0, [r7, #4]
 4275 0044 FFF7FEFF 		bl	_ZN5Air3T8MenuView7repaintEv
  71:../air3t/ui/menuview.cpp **** 				}
  72:../air3t/ui/menuview.cpp **** 				break;
 4276              		.loc 1 72 0
 4277 0048 49E0     		b	.L23
 4278              	.L26:
  73:../air3t/ui/menuview.cpp **** 
  74:../air3t/ui/menuview.cpp **** 			case IJoystick::Down:
  75:../air3t/ui/menuview.cpp **** 				if ( _cursor < static_cast<int>( _menu.size() ) - 1 )
 4279              		.loc 1 75 0
 4280 004a 7B68     		ldr	r3, [r7, #4]
 4281 004c 1C6A     		ldr	r4, [r3, #32]
 4282 004e 7B68     		ldr	r3, [r7, #4]
 4283 0050 03F11003 		add	r3, r3, #16
 4284 0054 1846     		mov	r0, r3
 4285 0056 FFF7FEFF 		bl	_ZNKSt6vectorISsSaISsEE4sizeEv
 4286 005a 0346     		mov	r3, r0
 4287 005c 03F1FF33 		add	r3, r3, #-1
 4288 0060 9C42     		cmp	r4, r3
 4289 0062 ACBF     		ite	ge
 4290 0064 0023     		movge	r3, #0
 4291 0066 0123     		movlt	r3, #1
 4292 0068 DBB2     		uxtb	r3, r3
 4293 006a 002B     		cmp	r3, #0
 4294 006c 34D0     		beq	.L35
  76:../air3t/ui/menuview.cpp **** 				{
  77:../air3t/ui/menuview.cpp **** 					_cursor++;
 4295              		.loc 1 77 0
 4296 006e 7B68     		ldr	r3, [r7, #4]
 4297 0070 1B6A     		ldr	r3, [r3, #32]
 4298 0072 03F10102 		add	r2, r3, #1
 4299 0076 7B68     		ldr	r3, [r7, #4]
 4300 0078 1A62     		str	r2, [r3, #32]
  78:../air3t/ui/menuview.cpp **** 					if ( _cursor - _window > 3 ) _window = _cursor - 3;
 4301              		.loc 1 78 0
 4302 007a 7B68     		ldr	r3, [r7, #4]
 4303 007c 1A6A     		ldr	r2, [r3, #32]
 4304 007e 7B68     		ldr	r3, [r7, #4]
 4305 0080 DB69     		ldr	r3, [r3, #28]
 4306 0082 D31A     		subs	r3, r2, r3
 4307 0084 032B     		cmp	r3, #3
 4308 0086 05DD     		ble	.L32
 4309              		.loc 1 78 0 is_stmt 0 discriminator 1
 4310 0088 7B68     		ldr	r3, [r7, #4]
 4311 008a 1B6A     		ldr	r3, [r3, #32]
 4312 008c A3F10302 		sub	r2, r3, #3
 4313 0090 7B68     		ldr	r3, [r7, #4]
 4314 0092 DA61     		str	r2, [r3, #28]
 4315              	.L32:
  79:../air3t/ui/menuview.cpp **** 					repaint();
 4316              		.loc 1 79 0 is_stmt 1
 4317 0094 7868     		ldr	r0, [r7, #4]
 4318 0096 FFF7FEFF 		bl	_ZN5Air3T8MenuView7repaintEv
  80:../air3t/ui/menuview.cpp **** 				}
  81:../air3t/ui/menuview.cpp **** 				break;
 4319              		.loc 1 81 0
 4320 009a 20E0     		b	.L23
 4321              	.L27:
  82:../air3t/ui/menuview.cpp **** 
  83:../air3t/ui/menuview.cpp **** 			case IJoystick::Pressed:
  84:../air3t/ui/menuview.cpp **** 				if ( observer() )
 4322              		.loc 1 84 0
 4323 009c 7B68     		ldr	r3, [r7, #4]
 4324 009e 1846     		mov	r0, r3
 4325 00a0 FFF7FEFF 		bl	_ZN5Air3T4View8observerEv
 4326 00a4 0346     		mov	r3, r0
 4327 00a6 002B     		cmp	r3, #0
 4328 00a8 0CBF     		ite	eq
 4329 00aa 0023     		moveq	r3, #0
 4330 00ac 0123     		movne	r3, #1
 4331 00ae DBB2     		uxtb	r3, r3
 4332 00b0 002B     		cmp	r3, #0
 4333 00b2 13D0     		beq	.L36
  85:../air3t/ui/menuview.cpp **** 					observer()->onMenuPointSelection( _cursor );
 4334              		.loc 1 85 0
 4335 00b4 7B68     		ldr	r3, [r7, #4]
 4336 00b6 1846     		mov	r0, r3
 4337 00b8 FFF7FEFF 		bl	_ZN5Air3T4View8observerEv
 4338 00bc 0346     		mov	r3, r0
 4339 00be 1A68     		ldr	r2, [r3, #0]
 4340 00c0 02F10802 		add	r2, r2, #8
 4341 00c4 1268     		ldr	r2, [r2, #0]
 4342 00c6 7968     		ldr	r1, [r7, #4]
 4343 00c8 096A     		ldr	r1, [r1, #32]
 4344 00ca 1846     		mov	r0, r3
 4345 00cc 9047     		blx	r2
  86:../air3t/ui/menuview.cpp **** 
  87:../air3t/ui/menuview.cpp **** 			default:
  88:../air3t/ui/menuview.cpp **** 				//Â Do nothing...
  89:../air3t/ui/menuview.cpp **** 				break;
 4346              		.loc 1 89 0
 4347 00ce 06E0     		b	.L23
 4348              	.L33:
 4349 00d0 00BF     		nop
 4350 00d2 04E0     		b	.L23
 4351              	.L34:
  72:../air3t/ui/menuview.cpp **** 				break;
 4352              		.loc 1 72 0
 4353 00d4 00BF     		nop
 4354 00d6 02E0     		b	.L23
 4355              	.L35:
  81:../air3t/ui/menuview.cpp **** 				break;
 4356              		.loc 1 81 0
 4357 00d8 00BF     		nop
 4358 00da 00E0     		b	.L23
 4359              	.L36:
 4360              		.loc 1 89 0
 4361 00dc 00BF     		nop
 4362              	.L23:
  90:../air3t/ui/menuview.cpp **** 		}
  91:../air3t/ui/menuview.cpp **** 	}
 4363              		.loc 1 91 0
 4364 00de 07F10C07 		add	r7, r7, #12
 4365 00e2 BD46     		mov	sp, r7
 4366 00e4 90BD     		pop	{r4, r7, pc}
 4367              		.cfi_endproc
 4368              	.LFE1031:
 4370 00e6 00BF     		.section	.text._ZNSt6vectorISsSaISsEEC2Ev,"axG",%progbits,_ZNSt6vectorISsSaISsEEC5Ev,comdat
 4371              		.align	2
 4372              		.weak	_ZNSt6vectorISsSaISsEEC2Ev
 4373              		.thumb
 4374              		.thumb_func
 4376              	_ZNSt6vectorISsSaISsEEC2Ev:
 4377              	.LFB1040:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Copyright (c) 1996
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** /** @file stl_vector.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #include <bits/functexcept.h>
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #include <bits/concept_check.h>
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #include <initializer_list>
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     struct _Vector_base
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     {
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       struct _Vector_impl 
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : public _Tp_alloc_type
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_start;
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_finish;
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_end_of_storage;
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_Vector_impl()
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	{ }
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	{ }
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       };
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef _Alloc allocator_type;
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Tp_alloc_type&
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_get_Tp_allocator()
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const _Tp_alloc_type&
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_get_Tp_allocator() const
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       allocator_type
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       get_allocator() const
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base()
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl() { }
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a)
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl(__a) { }
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl(__a)
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x)
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl(__x._M_get_Tp_allocator())
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_start = __x._M_impl._M_start;
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_finish = __x._M_impl._M_finish;
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	__x._M_impl._M_start = 0;
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	__x._M_impl._M_finish = 0;
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	__x._M_impl._M_end_of_storage = 0;
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       ~_Vector_base()
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_impl _M_impl;
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typename _Tp_alloc_type::pointer
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_allocate(size_t __n)
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	if (__p)
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     };
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   /**
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  individual elements in any order.
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  @ingroup sequences
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   */
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     {
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // Concept requirements.
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef _Tp					 value_type;
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::pointer           pointer;
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::const_pointer     const_pointer;
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::reference         reference;
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::const_reference   const_reference;
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator;
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef size_t					 size_type;
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     protected:
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::_M_allocate;
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::_M_deallocate;
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::_M_impl;
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Default constructor creates no elements.
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector()
 4378              		.loc 51 207 0
 4379              		.cfi_startproc
 4380              		@ args = 0, pretend = 0, frame = 8
 4381              		@ frame_needed = 1, uses_anonymous_args = 0
 4382 0000 80B5     		push	{r7, lr}
 4383              	.LCFI27:
 4384              		.cfi_def_cfa_offset 8
 4385 0002 82B0     		sub	sp, sp, #8
 4386              	.LCFI28:
 4387              		.cfi_def_cfa_offset 16
 4388 0004 00AF     		add	r7, sp, #0
 4389              		.cfi_offset 14, -4
 4390              		.cfi_offset 7, -8
 4391              	.LCFI29:
 4392              		.cfi_def_cfa_register 7
 4393 0006 7860     		str	r0, [r7, #4]
 4394              	.LBB8:
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base() { }
 4395              		.loc 51 208 0
 4396 0008 7B68     		ldr	r3, [r7, #4]
 4397 000a 1846     		mov	r0, r3
 4398 000c FFF7FEFF 		bl	_ZNSt12_Vector_baseISsSaISsEEC2Ev
 4399              	.LBE8:
 4400 0010 7B68     		ldr	r3, [r7, #4]
 4401 0012 1846     		mov	r0, r3
 4402 0014 07F10807 		add	r7, r7, #8
 4403 0018 BD46     		mov	sp, r7
 4404 001a 80BD     		pop	{r7, pc}
 4405              		.cfi_endproc
 4406              	.LFE1040:
 4408              		.weak	_ZNSt6vectorISsSaISsEEC1Ev
 4409              		.thumb_set _ZNSt6vectorISsSaISsEEC1Ev,_ZNSt6vectorISsSaISsEEC2Ev
 4410              		.section	.text._ZNSt6vectorISsSaISsEED2Ev,"axG",%progbits,_ZNSt6vectorISsSaISsEED5Ev,comdat
 4411              		.align	2
 4412              		.weak	_ZNSt6vectorISsSaISsEED2Ev
 4413              		.thumb
 4414              		.thumb_func
 4416              	_ZNSt6vectorISsSaISsEED2Ev:
 4417              	.LFB1043:
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  a  An allocator object.
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       explicit
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(const allocator_type& __a)
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(__a) { }
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 218:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 219:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 220:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 221:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  value  An element to copy.
 222:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  a  An allocator.
 223:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 224:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n copies of @a value.
 225:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 226:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       explicit
 227:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 228:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 229:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(__n, __a)
 230:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 231:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 232:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 233:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 234:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 235:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 236:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 237:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  object used by @a x.  All the elements of @a x are copied,
 238:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  but any extra memory in
 239:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.
 240:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 241:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(const vector& __x)
 242:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(__x.size(), __x._M_get_Tp_allocator())
 243:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 244:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 245:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 246:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 247:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 248:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 249:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 250:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 251:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 252:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 253:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 254:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a x.
 255:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The contents of @a x are a valid, but unspecified %vector.
 256:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 257:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(vector&& __x)
 258:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(std::forward<_Base>(__x)) { }
 259:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 260:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 261:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 262:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 263:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  a  An allocator.
 264:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 265:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 266:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  initializer_list @a l.
 267:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 268:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 269:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  (where N is @a l.size()) and do no memory reallocation.
 270:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 271:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 272:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 273:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(__a)
 274:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 275:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 276:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 			    random_access_iterator_tag());
 277:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 278:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 279:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 280:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 281:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 282:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  first  An input iterator.
 283:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  last  An input iterator.
 284:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  a  An allocator.
 285:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 286:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 287:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  [first,last).
 288:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 289:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 290:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 291:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 292:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 293:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 294:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 295:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 296:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       template<typename _InputIterator>
 297:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 298:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 299:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	: _Base(__a)
 300:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         {
 301:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 302:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 303:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 304:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	}
 305:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 306:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 307:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 308:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 309:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 310:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  responsibility.
 311:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 312:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       ~vector()
 4418              		.loc 51 312 0
 4419              		.cfi_startproc
 4420              		@ args = 0, pretend = 0, frame = 8
 4421              		@ frame_needed = 1, uses_anonymous_args = 0
 4422 0000 B0B5     		push	{r4, r5, r7, lr}
 4423              	.LCFI30:
 4424              		.cfi_def_cfa_offset 16
 4425 0002 82B0     		sub	sp, sp, #8
 4426              	.LCFI31:
 4427              		.cfi_def_cfa_offset 24
 4428 0004 00AF     		add	r7, sp, #0
 4429              		.cfi_offset 14, -4
 4430              		.cfi_offset 7, -8
 4431              		.cfi_offset 5, -12
 4432              		.cfi_offset 4, -16
 4433              	.LCFI32:
 4434              		.cfi_def_cfa_register 7
 4435 0006 7860     		str	r0, [r7, #4]
 4436              	.LBB9:
 313:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 4437              		.loc 51 313 0
 4438 0008 7B68     		ldr	r3, [r7, #4]
 4439 000a 1D68     		ldr	r5, [r3, #0]
 4440 000c 7B68     		ldr	r3, [r7, #4]
 4441 000e 5C68     		ldr	r4, [r3, #4]
 4442 0010 7B68     		ldr	r3, [r7, #4]
 4443 0012 1846     		mov	r0, r3
 4444 0014 FFF7FEFF 		bl	_ZNSt12_Vector_baseISsSaISsEE19_M_get_Tp_allocatorEv
 4445 0018 0346     		mov	r3, r0
 4446 001a 2846     		mov	r0, r5
 4447 001c 2146     		mov	r1, r4
 4448 001e 1A46     		mov	r2, r3
 4449 0020 FFF7FEFF 		bl	_ZSt8_DestroyIPSsSsEvT_S1_RSaIT0_E
 314:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 4450              		.loc 51 314 0
 4451 0024 7B68     		ldr	r3, [r7, #4]
 313:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 4452              		.loc 51 313 0
 4453 0026 1846     		mov	r0, r3
 4454 0028 FFF7FEFF 		bl	_ZNSt12_Vector_baseISsSaISsEED2Ev
 4455              	.LBE9:
 4456 002c 7B68     		ldr	r3, [r7, #4]
 4457              		.loc 51 314 0
 4458 002e 1846     		mov	r0, r3
 4459 0030 07F10807 		add	r7, r7, #8
 4460 0034 BD46     		mov	sp, r7
 4461 0036 B0BD     		pop	{r4, r5, r7, pc}
 4462              		.cfi_endproc
 4463              	.LFE1043:
 4465              		.weak	_ZNSt6vectorISsSaISsEED1Ev
 4466              		.thumb_set _ZNSt6vectorISsSaISsEED1Ev,_ZNSt6vectorISsSaISsEED2Ev
 4467              		.section	.text._ZNKSt6vectorISsSaISsEE4sizeEv,"axG",%progbits,_ZNKSt6vectorISsSaISsEE4sizeEv,comda
 4468              		.align	2
 4469              		.weak	_ZNKSt6vectorISsSaISsEE4sizeEv
 4470              		.thumb
 4471              		.thumb_func
 4473              	_ZNKSt6vectorISsSaISsEE4sizeEv:
 4474              	.LFB1045:
 315:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 316:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 317:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 318:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 319:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 320:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  All the elements of @a x are copied, but any extra memory in
 321:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.  Unlike the
 322:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 323:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 324:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector&
 325:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator=(const vector& __x);
 326:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 327:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 328:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 329:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 330:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 331:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 332:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The contents of @a x are moved into this %vector (without copying).
 333:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @a x is a valid, but unspecified %vector.
 334:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 335:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector&
 336:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator=(vector&& __x)
 337:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 338:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	// NB: DR 1204.
 339:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	// NB: DR 675.
 340:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->clear();
 341:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->swap(__x);
 342:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	return *this;
 343:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 344:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 345:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 346:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 347:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 348:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 349:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 350:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  initializer list @a l.
 351:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 352:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 353:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 354:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 355:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 356:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector&
 357:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 358:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 359:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 360:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	return *this;
 361:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 362:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 363:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 364:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 365:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 366:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  n  Number of elements to be assigned.
 367:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  val  Value to be assigned.
 368:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 369:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function fills a %vector with @a n copies of the given
 370:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 371:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 372:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 373:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 374:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 375:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 376:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 377:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 378:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 379:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 380:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  first  An input iterator.
 381:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  last   An input iterator.
 382:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 383:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 384:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  range [first,last).
 385:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 386:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 387:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 388:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 389:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 390:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       template<typename _InputIterator>
 391:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         void
 392:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 393:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         {
 394:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 395:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 396:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 397:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	}
 398:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 399:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 400:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 401:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 402:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 403:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 404:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 405:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  initializer list @a l.
 406:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 407:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 408:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 409:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 410:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 411:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 412:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 413:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 414:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 415:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 416:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 417:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::get_allocator;
 418:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 419:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // iterators
 420:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 421:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 422:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 423:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 424:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 425:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       iterator
 426:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       begin()
 427:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 428:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 429:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 430:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 431:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 432:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 433:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 434:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator
 435:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       begin() const
 436:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 437:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 438:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 439:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 440:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 441:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 442:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 443:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       iterator
 444:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       end()
 445:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 446:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 447:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 448:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 449:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 450:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  ordinary element order.
 451:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 452:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator
 453:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       end() const
 454:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 455:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 456:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 457:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 458:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 459:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 460:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 461:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reverse_iterator
 462:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       rbegin()
 463:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 464:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 465:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 466:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 467:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 468:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  reverse element order.
 469:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 470:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reverse_iterator
 471:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       rbegin() const
 472:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 473:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 474:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 475:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 476:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 477:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  in reverse element order.
 478:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 479:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reverse_iterator
 480:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       rend()
 481:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 482:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 483:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 484:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 485:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 486:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  is done in reverse element order.
 487:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 488:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reverse_iterator
 489:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       rend() const
 490:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 491:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 492:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 493:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 494:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 495:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 496:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 497:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 498:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator
 499:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       cbegin() const
 500:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 501:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 502:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 503:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 504:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 505:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  ordinary element order.
 506:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 507:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator
 508:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       cend() const
 509:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 510:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 511:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 512:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 513:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 514:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  reverse element order.
 515:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 516:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reverse_iterator
 517:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       crbegin() const
 518:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 519:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 520:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 521:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 522:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 523:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  is done in reverse element order.
 524:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 525:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reverse_iterator
 526:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       crend() const
 527:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 528:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 529:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 530:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // [23.2.4.2] capacity
 531:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 532:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       size_type
 533:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       size() const
 4475              		.loc 51 533 0
 4476              		.cfi_startproc
 4477              		@ args = 0, pretend = 0, frame = 8
 4478              		@ frame_needed = 1, uses_anonymous_args = 0
 4479              		@ link register save eliminated.
 4480 0000 80B4     		push	{r7}
 4481              	.LCFI33:
 4482              		.cfi_def_cfa_offset 4
 4483 0002 83B0     		sub	sp, sp, #12
 4484              	.LCFI34:
 4485              		.cfi_def_cfa_offset 16
 4486 0004 00AF     		add	r7, sp, #0
 4487              		.cfi_offset 7, -4
 4488              	.LCFI35:
 4489              		.cfi_def_cfa_register 7
 4490 0006 7860     		str	r0, [r7, #4]
 534:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 4491              		.loc 51 534 0
 4492 0008 7B68     		ldr	r3, [r7, #4]
 4493 000a 5B68     		ldr	r3, [r3, #4]
 4494 000c 1A46     		mov	r2, r3
 4495 000e 7B68     		ldr	r3, [r7, #4]
 4496 0010 1B68     		ldr	r3, [r3, #0]
 4497 0012 D31A     		subs	r3, r2, r3
 4498 0014 4FEAA303 		asr	r3, r3, #2
 4499 0018 1846     		mov	r0, r3
 4500 001a 07F10C07 		add	r7, r7, #12
 4501 001e BD46     		mov	sp, r7
 4502 0020 80BC     		pop	{r7}
 4503 0022 7047     		bx	lr
 4504              		.cfi_endproc
 4505              	.LFE1045:
 4507              		.section	.text._ZSt3minIiERKT_S2_S2_,"axG",%progbits,_ZSt3minIiERKT_S2_S2_,comdat
 4508              		.align	2
 4509              		.weak	_ZSt3minIiERKT_S2_S2_
 4510              		.thumb
 4511              		.thumb_func
 4513              	_ZSt3minIiERKT_S2_S2_:
 4514              	.LFB1046:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** /** @file stl_algobase.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/c++config.h>
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <cstddef>
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/functexcept.h>
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <ext/type_traits.h>
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/concept_check.h>
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <debug/debug.h>
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE(std)
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<bool _BoolType>
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     struct __iter_swap
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         static void
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         {
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****             _ValueType1;
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	}
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     };
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<>
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     struct __iter_swap<true>
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         static void 
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         {
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           swap(*__a, *__b);
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         }
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     };
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  An iterator.
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another iterator.
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   Nothing.
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  iterators themselves.
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline void
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ValueType1;
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ValueType2;
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ValueType2>)
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ValueType1>)
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ReferenceType1;
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ReferenceType2;
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  first1  A forward iterator.
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  last1   A forward iterator.
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  first2  A forward iterator.
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  The ranges must not overlap.
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     _ForwardIterator2
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __first2;
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  preprocessor macro.
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _Tp>
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline const _Tp&
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 4515              		.loc 31 186 0
 4516              		.cfi_startproc
 4517              		@ args = 0, pretend = 0, frame = 8
 4518              		@ frame_needed = 1, uses_anonymous_args = 0
 4519              		@ link register save eliminated.
 4520 0000 80B4     		push	{r7}
 4521              	.LCFI36:
 4522              		.cfi_def_cfa_offset 4
 4523 0002 83B0     		sub	sp, sp, #12
 4524              	.LCFI37:
 4525              		.cfi_def_cfa_offset 16
 4526 0004 00AF     		add	r7, sp, #0
 4527              		.cfi_offset 7, -4
 4528              	.LCFI38:
 4529              		.cfi_def_cfa_register 7
 4530 0006 7860     		str	r0, [r7, #4]
 4531 0008 3960     		str	r1, [r7, #0]
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       if (__b < __a)
 4532              		.loc 31 191 0
 4533 000a 3B68     		ldr	r3, [r7, #0]
 4534 000c 1A68     		ldr	r2, [r3, #0]
 4535 000e 7B68     		ldr	r3, [r7, #4]
 4536 0010 1B68     		ldr	r3, [r3, #0]
 4537 0012 9A42     		cmp	r2, r3
 4538 0014 01DA     		bge	.L43
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	return __b;
 4539              		.loc 31 192 0
 4540 0016 3B68     		ldr	r3, [r7, #0]
 4541 0018 00E0     		b	.L44
 4542              	.L43:
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __a;
 4543              		.loc 31 193 0
 4544 001a 7B68     		ldr	r3, [r7, #4]
 4545              	.L44:
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 4546              		.loc 31 194 0
 4547 001c 1846     		mov	r0, r3
 4548 001e 07F10C07 		add	r7, r7, #12
 4549 0022 BD46     		mov	sp, r7
 4550 0024 80BC     		pop	{r7}
 4551 0026 7047     		bx	lr
 4552              		.cfi_endproc
 4553              	.LFE1046:
 4555              		.section	.text._ZSt3maxIiERKT_S2_S2_,"axG",%progbits,_ZSt3maxIiERKT_S2_S2_,comdat
 4556              		.align	2
 4557              		.weak	_ZSt3maxIiERKT_S2_S2_
 4558              		.thumb
 4559              		.thumb_func
 4561              	_ZSt3maxIiERKT_S2_S2_:
 4562              	.LFB1047:
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  preprocessor macro.
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _Tp>
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline const _Tp&
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 4563              		.loc 31 209 0
 4564              		.cfi_startproc
 4565              		@ args = 0, pretend = 0, frame = 8
 4566              		@ frame_needed = 1, uses_anonymous_args = 0
 4567              		@ link register save eliminated.
 4568 0000 80B4     		push	{r7}
 4569              	.LCFI39:
 4570              		.cfi_def_cfa_offset 4
 4571 0002 83B0     		sub	sp, sp, #12
 4572              	.LCFI40:
 4573              		.cfi_def_cfa_offset 16
 4574 0004 00AF     		add	r7, sp, #0
 4575              		.cfi_offset 7, -4
 4576              	.LCFI41:
 4577              		.cfi_def_cfa_register 7
 4578 0006 7860     		str	r0, [r7, #4]
 4579 0008 3960     		str	r1, [r7, #0]
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       if (__a < __b)
 4580              		.loc 31 214 0
 4581 000a 7B68     		ldr	r3, [r7, #4]
 4582 000c 1A68     		ldr	r2, [r3, #0]
 4583 000e 3B68     		ldr	r3, [r7, #0]
 4584 0010 1B68     		ldr	r3, [r3, #0]
 4585 0012 9A42     		cmp	r2, r3
 4586 0014 01DA     		bge	.L46
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	return __b;
 4587              		.loc 31 215 0
 4588 0016 3B68     		ldr	r3, [r7, #0]
 4589 0018 00E0     		b	.L47
 4590              	.L46:
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __a;
 4591              		.loc 31 216 0
 4592 001a 7B68     		ldr	r3, [r7, #4]
 4593              	.L47:
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 4594              		.loc 31 217 0
 4595 001c 1846     		mov	r0, r3
 4596 001e 07F10C07 		add	r7, r7, #12
 4597 0022 BD46     		mov	sp, r7
 4598 0024 80BC     		pop	{r7}
 4599 0026 7047     		bx	lr
 4600              		.cfi_endproc
 4601              	.LFE1047:
 4603              		.section	.text._ZSt3minIjERKT_S2_S2_,"axG",%progbits,_ZSt3minIjERKT_S2_S2_,comdat
 4604              		.align	2
 4605              		.weak	_ZSt3minIjERKT_S2_S2_
 4606              		.thumb
 4607              		.thumb_func
 4609              	_ZSt3minIjERKT_S2_S2_:
 4610              	.LFB1049:
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 4611              		.loc 31 186 0
 4612              		.cfi_startproc
 4613              		@ args = 0, pretend = 0, frame = 8
 4614              		@ frame_needed = 1, uses_anonymous_args = 0
 4615              		@ link register save eliminated.
 4616 0000 80B4     		push	{r7}
 4617              	.LCFI42:
 4618              		.cfi_def_cfa_offset 4
 4619 0002 83B0     		sub	sp, sp, #12
 4620              	.LCFI43:
 4621              		.cfi_def_cfa_offset 16
 4622 0004 00AF     		add	r7, sp, #0
 4623              		.cfi_offset 7, -4
 4624              	.LCFI44:
 4625              		.cfi_def_cfa_register 7
 4626 0006 7860     		str	r0, [r7, #4]
 4627 0008 3960     		str	r1, [r7, #0]
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       if (__b < __a)
 4628              		.loc 31 191 0
 4629 000a 3B68     		ldr	r3, [r7, #0]
 4630 000c 1A68     		ldr	r2, [r3, #0]
 4631 000e 7B68     		ldr	r3, [r7, #4]
 4632 0010 1B68     		ldr	r3, [r3, #0]
 4633 0012 9A42     		cmp	r2, r3
 4634 0014 01D2     		bcs	.L49
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	return __b;
 4635              		.loc 31 192 0
 4636 0016 3B68     		ldr	r3, [r7, #0]
 4637 0018 00E0     		b	.L50
 4638              	.L49:
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __a;
 4639              		.loc 31 193 0
 4640 001a 7B68     		ldr	r3, [r7, #4]
 4641              	.L50:
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 4642              		.loc 31 194 0
 4643 001c 1846     		mov	r0, r3
 4644 001e 07F10C07 		add	r7, r7, #12
 4645 0022 BD46     		mov	sp, r7
 4646 0024 80BC     		pop	{r7}
 4647 0026 7047     		bx	lr
 4648              		.cfi_endproc
 4649              	.LFE1049:
 4651              		.section	.text._ZNSt6vectorISsSaISsEEixEj,"axG",%progbits,_ZNSt6vectorISsSaISsEEixEj,comdat
 4652              		.align	2
 4653              		.weak	_ZNSt6vectorISsSaISsEEixEj
 4654              		.thumb
 4655              		.thumb_func
 4657              	_ZNSt6vectorISsSaISsEEixEj:
 4658              	.LFB1050:
 535:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 536:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 537:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       size_type
 538:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       max_size() const
 539:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return _M_get_Tp_allocator().max_size(); }
 540:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 541:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 542:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 543:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 544:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  Data with which new elements should be populated.
 545:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 546:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 547:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 548:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 549:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 550:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  given data.
 551:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 552:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 553:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 554:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 555:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	if (__new_size < size())
 556:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 557:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	else
 558:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 559:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 560:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 561:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 562:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 563:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 564:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       shrink_to_fit()
 565:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { std::__shrink_to_fit<vector>::_S_do_it(*this); }
 566:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 567:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 568:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 569:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 570:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 571:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 572:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       size_type
 573:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       capacity() const
 574:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 575:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 576:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 577:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 578:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 579:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  equal end().)
 580:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 581:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       bool
 582:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       empty() const
 583:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return begin() == end(); }
 584:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 585:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 586:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 587:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *          elements.
 588:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  n  Number of elements required.
 589:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 590:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 591:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 592:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 593:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 594:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  thrown.
 595:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 596:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 597:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 598:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 599:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 600:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  and copying of %vector data.
 601:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 602:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 603:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reserve(size_type __n);
 604:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 605:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // element access
 606:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 607:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 608:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 609:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  accessed.
 610:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 611:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 612:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 613:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 614:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 615:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  see at().)
 616:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 617:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reference
 618:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator[](size_type __n)
 4659              		.loc 51 618 0
 4660              		.cfi_startproc
 4661              		@ args = 0, pretend = 0, frame = 8
 4662              		@ frame_needed = 1, uses_anonymous_args = 0
 4663              		@ link register save eliminated.
 4664 0000 80B4     		push	{r7}
 4665              	.LCFI45:
 4666              		.cfi_def_cfa_offset 4
 4667 0002 83B0     		sub	sp, sp, #12
 4668              	.LCFI46:
 4669              		.cfi_def_cfa_offset 16
 4670 0004 00AF     		add	r7, sp, #0
 4671              		.cfi_offset 7, -4
 4672              	.LCFI47:
 4673              		.cfi_def_cfa_register 7
 4674 0006 7860     		str	r0, [r7, #4]
 4675 0008 3960     		str	r1, [r7, #0]
 619:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 4676              		.loc 51 619 0
 4677 000a 7B68     		ldr	r3, [r7, #4]
 4678 000c 1A68     		ldr	r2, [r3, #0]
 4679 000e 3B68     		ldr	r3, [r7, #0]
 4680 0010 4FEA8303 		lsl	r3, r3, #2
 4681 0014 D318     		adds	r3, r2, r3
 4682 0016 1846     		mov	r0, r3
 4683 0018 07F10C07 		add	r7, r7, #12
 4684 001c BD46     		mov	sp, r7
 4685 001e 80BC     		pop	{r7}
 4686 0020 7047     		bx	lr
 4687              		.cfi_endproc
 4688              	.LFE1050:
 4690 0022 00BF     		.section	.text._ZNSt12_Vector_baseISsSaISsEE12_Vector_implD2Ev,"axG",%progbits,_ZNSt12_Vector_base
 4691              		.align	2
 4692              		.weak	_ZNSt12_Vector_baseISsSaISsEE12_Vector_implD2Ev
 4693              		.thumb
 4694              		.thumb_func
 4696              	_ZNSt12_Vector_baseISsSaISsEE12_Vector_implD2Ev:
 4697              	.LFB1061:
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 4698              		.loc 51 75 0
 4699              		.cfi_startproc
 4700              		@ args = 0, pretend = 0, frame = 8
 4701              		@ frame_needed = 1, uses_anonymous_args = 0
 4702 0000 80B5     		push	{r7, lr}
 4703              	.LCFI48:
 4704              		.cfi_def_cfa_offset 8
 4705 0002 82B0     		sub	sp, sp, #8
 4706              	.LCFI49:
 4707              		.cfi_def_cfa_offset 16
 4708 0004 00AF     		add	r7, sp, #0
 4709              		.cfi_offset 14, -4
 4710              		.cfi_offset 7, -8
 4711              	.LCFI50:
 4712              		.cfi_def_cfa_register 7
 4713 0006 7860     		str	r0, [r7, #4]
 4714              	.LBB10:
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 4715              		.loc 51 75 0
 4716 0008 7B68     		ldr	r3, [r7, #4]
 4717 000a 1846     		mov	r0, r3
 4718 000c FFF7FEFF 		bl	_ZNSaISsED2Ev
 4719              	.LBE10:
 4720 0010 7B68     		ldr	r3, [r7, #4]
 4721 0012 1846     		mov	r0, r3
 4722 0014 07F10807 		add	r7, r7, #8
 4723 0018 BD46     		mov	sp, r7
 4724 001a 80BD     		pop	{r7, pc}
 4725              		.cfi_endproc
 4726              	.LFE1061:
 4728              		.weak	_ZNSt12_Vector_baseISsSaISsEE12_Vector_implD1Ev
 4729              		.thumb_set _ZNSt12_Vector_baseISsSaISsEE12_Vector_implD1Ev,_ZNSt12_Vector_baseISsSaISsEE12_Vector_
 4730              		.section	.text._ZNSt12_Vector_baseISsSaISsEEC2Ev,"axG",%progbits,_ZNSt12_Vector_baseISsSaISsEEC5Ev
 4731              		.align	2
 4732              		.weak	_ZNSt12_Vector_baseISsSaISsEEC2Ev
 4733              		.thumb
 4734              		.thumb_func
 4736              	_ZNSt12_Vector_baseISsSaISsEEC2Ev:
 4737              	.LFB1063:
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base()
 4738              		.loc 51 104 0
 4739              		.cfi_startproc
 4740              		@ args = 0, pretend = 0, frame = 8
 4741              		@ frame_needed = 1, uses_anonymous_args = 0
 4742 0000 80B5     		push	{r7, lr}
 4743              	.LCFI51:
 4744              		.cfi_def_cfa_offset 8
 4745 0002 82B0     		sub	sp, sp, #8
 4746              	.LCFI52:
 4747              		.cfi_def_cfa_offset 16
 4748 0004 00AF     		add	r7, sp, #0
 4749              		.cfi_offset 14, -4
 4750              		.cfi_offset 7, -8
 4751              	.LCFI53:
 4752              		.cfi_def_cfa_register 7
 4753 0006 7860     		str	r0, [r7, #4]
 4754              	.LBB11:
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl() { }
 4755              		.loc 51 105 0
 4756 0008 7B68     		ldr	r3, [r7, #4]
 4757 000a 1846     		mov	r0, r3
 4758 000c FFF7FEFF 		bl	_ZNSt12_Vector_baseISsSaISsEE12_Vector_implC1Ev
 4759              	.LBE11:
 4760 0010 7B68     		ldr	r3, [r7, #4]
 4761 0012 1846     		mov	r0, r3
 4762 0014 07F10807 		add	r7, r7, #8
 4763 0018 BD46     		mov	sp, r7
 4764 001a 80BD     		pop	{r7, pc}
 4765              		.cfi_endproc
 4766              	.LFE1063:
 4768              		.weak	_ZNSt12_Vector_baseISsSaISsEEC1Ev
 4769              		.thumb_set _ZNSt12_Vector_baseISsSaISsEEC1Ev,_ZNSt12_Vector_baseISsSaISsEEC2Ev
 4770              		.section	.text._ZNSt12_Vector_baseISsSaISsEED2Ev,"axG",%progbits,_ZNSt12_Vector_baseISsSaISsEED5Ev
 4771              		.align	2
 4772              		.weak	_ZNSt12_Vector_baseISsSaISsEED2Ev
 4773              		.thumb
 4774              		.thumb_func
 4776              	_ZNSt12_Vector_baseISsSaISsEED2Ev:
 4777              	.LFB1066:
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       ~_Vector_base()
 4778              		.loc 51 131 0
 4779              		.cfi_startproc
 4780              		@ args = 0, pretend = 0, frame = 8
 4781              		@ frame_needed = 1, uses_anonymous_args = 0
 4782 0000 80B5     		push	{r7, lr}
 4783              	.LCFI54:
 4784              		.cfi_def_cfa_offset 8
 4785 0002 82B0     		sub	sp, sp, #8
 4786              	.LCFI55:
 4787              		.cfi_def_cfa_offset 16
 4788 0004 00AF     		add	r7, sp, #0
 4789              		.cfi_offset 14, -4
 4790              		.cfi_offset 7, -8
 4791              	.LCFI56:
 4792              		.cfi_def_cfa_register 7
 4793 0006 7860     		str	r0, [r7, #4]
 4794              	.LBB12:
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 4795              		.loc 51 132 0
 4796 0008 7B68     		ldr	r3, [r7, #4]
 4797 000a 1A68     		ldr	r2, [r3, #0]
 4798 000c 7B68     		ldr	r3, [r7, #4]
 4799 000e 9B68     		ldr	r3, [r3, #8]
 4800 0010 1946     		mov	r1, r3
 4801 0012 7B68     		ldr	r3, [r7, #4]
 4802 0014 1B68     		ldr	r3, [r3, #0]
 4803 0016 CB1A     		subs	r3, r1, r3
 4804 0018 4FEAA303 		asr	r3, r3, #2
 4805 001c 7868     		ldr	r0, [r7, #4]
 4806 001e 1146     		mov	r1, r2
 4807 0020 1A46     		mov	r2, r3
 4808 0022 FFF7FEFF 		bl	_ZNSt12_Vector_baseISsSaISsEE13_M_deallocateEPSsj
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 4809              		.loc 51 133 0
 4810 0026 7B68     		ldr	r3, [r7, #4]
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 4811              		.loc 51 132 0
 4812 0028 1846     		mov	r0, r3
 4813 002a FFF7FEFF 		bl	_ZNSt12_Vector_baseISsSaISsEE12_Vector_implD1Ev
 4814              	.LBE12:
 4815 002e 7B68     		ldr	r3, [r7, #4]
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 4816              		.loc 51 133 0
 4817 0030 1846     		mov	r0, r3
 4818 0032 07F10807 		add	r7, r7, #8
 4819 0036 BD46     		mov	sp, r7
 4820 0038 80BD     		pop	{r7, pc}
 4821              		.cfi_endproc
 4822              	.LFE1066:
 4824              		.weak	_ZNSt12_Vector_baseISsSaISsEED1Ev
 4825              		.thumb_set _ZNSt12_Vector_baseISsSaISsEED1Ev,_ZNSt12_Vector_baseISsSaISsEED2Ev
 4826 003a 00BF     		.section	.text._ZNSt12_Vector_baseISsSaISsEE19_M_get_Tp_allocatorEv,"axG",%progbits,_ZNSt12_Vector
 4827              		.align	2
 4828              		.weak	_ZNSt12_Vector_baseISsSaISsEE19_M_get_Tp_allocatorEv
 4829              		.thumb
 4830              		.thumb_func
 4832              	_ZNSt12_Vector_baseISsSaISsEE19_M_get_Tp_allocatorEv:
 4833              	.LFB1068:
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_get_Tp_allocator()
 4834              		.loc 51 93 0
 4835              		.cfi_startproc
 4836              		@ args = 0, pretend = 0, frame = 8
 4837              		@ frame_needed = 1, uses_anonymous_args = 0
 4838              		@ link register save eliminated.
 4839 0000 80B4     		push	{r7}
 4840              	.LCFI57:
 4841              		.cfi_def_cfa_offset 4
 4842 0002 83B0     		sub	sp, sp, #12
 4843              	.LCFI58:
 4844              		.cfi_def_cfa_offset 16
 4845 0004 00AF     		add	r7, sp, #0
 4846              		.cfi_offset 7, -4
 4847              	.LCFI59:
 4848              		.cfi_def_cfa_register 7
 4849 0006 7860     		str	r0, [r7, #4]
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 4850              		.loc 51 94 0
 4851 0008 7B68     		ldr	r3, [r7, #4]
 4852 000a 1846     		mov	r0, r3
 4853 000c 07F10C07 		add	r7, r7, #12
 4854 0010 BD46     		mov	sp, r7
 4855 0012 80BC     		pop	{r7}
 4856 0014 7047     		bx	lr
 4857              		.cfi_endproc
 4858              	.LFE1068:
 4860 0016 00BF     		.section	.text._ZSt8_DestroyIPSsSsEvT_S1_RSaIT0_E,"axG",%progbits,_ZSt8_DestroyIPSsSsEvT_S1_RSaIT0
 4861              		.align	2
 4862              		.weak	_ZSt8_DestroyIPSsSsEvT_S1_RSaIT0_E
 4863              		.thumb
 4864              		.thumb_func
 4866              	_ZSt8_DestroyIPSsSsEvT_S1_RSaIT0_E:
 4867              	.LFB1069:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * representations about the suitability of this software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** /** @file stl_construct.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** #include <new>
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** #include <bits/move.h>
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE(std)
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   /**
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * object's constructor with an initializer.
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    */
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     inline void
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     // Allow perfect forwarding
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     _Construct(_T1* __p, _T2&& __value)
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** #else
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** #endif
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     {
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(_GLIBCXX_FORWARD(_T2, __value));
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     }
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   /**
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    */
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   template<typename _Tp>
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     inline void
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   template<bool>
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     struct _Destroy_aux
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     {
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       template<typename _ForwardIterator>
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****         static void
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	{
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	    std::_Destroy(&*__first);
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	}
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     };
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   template<>
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     struct _Destroy_aux<true>
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     {
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       template<typename _ForwardIterator>
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****         static void
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     };
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   /**
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    */
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   template<typename _ForwardIterator>
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     inline void
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     {
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****                        _Value_type;
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	__destroy(__first, __last);
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     }
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   /**
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****    */
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   template <typename _Tp> class allocator;
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     void
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	     _Allocator& __alloc)
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     {
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	__alloc.destroy(&*__first);
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     }
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     inline void
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 4868              		.loc 49 145 0
 4869              		.cfi_startproc
 4870              		@ args = 0, pretend = 0, frame = 16
 4871              		@ frame_needed = 1, uses_anonymous_args = 0
 4872 0000 80B5     		push	{r7, lr}
 4873              	.LCFI60:
 4874              		.cfi_def_cfa_offset 8
 4875 0002 84B0     		sub	sp, sp, #16
 4876              	.LCFI61:
 4877              		.cfi_def_cfa_offset 24
 4878 0004 00AF     		add	r7, sp, #0
 4879              		.cfi_offset 14, -4
 4880              		.cfi_offset 7, -8
 4881              	.LCFI62:
 4882              		.cfi_def_cfa_register 7
 4883 0006 F860     		str	r0, [r7, #12]
 4884 0008 B960     		str	r1, [r7, #8]
 4885 000a 7A60     		str	r2, [r7, #4]
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	     allocator<_Tp>&)
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     {
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       _Destroy(__first, __last);
 4886              		.loc 49 148 0
 4887 000c F868     		ldr	r0, [r7, #12]
 4888 000e B968     		ldr	r1, [r7, #8]
 4889 0010 FFF7FEFF 		bl	_ZSt8_DestroyIPSsEvT_S1_
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     }
 4890              		.loc 49 149 0
 4891 0014 07F11007 		add	r7, r7, #16
 4892 0018 BD46     		mov	sp, r7
 4893 001a 80BD     		pop	{r7, pc}
 4894              		.cfi_endproc
 4895              	.LFE1069:
 4897              		.section	.text._ZNSt12_Vector_baseISsSaISsEE12_Vector_implC2Ev,"axG",%progbits,_ZNSt12_Vector_base
 4898              		.align	2
 4899              		.weak	_ZNSt12_Vector_baseISsSaISsEE12_Vector_implC2Ev
 4900              		.thumb
 4901              		.thumb_func
 4903              	_ZNSt12_Vector_baseISsSaISsEE12_Vector_implC2Ev:
 4904              	.LFB1080:
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_Vector_impl()
 4905              		.loc 51 80 0
 4906              		.cfi_startproc
 4907              		@ args = 0, pretend = 0, frame = 8
 4908              		@ frame_needed = 1, uses_anonymous_args = 0
 4909 0000 80B5     		push	{r7, lr}
 4910              	.LCFI63:
 4911              		.cfi_def_cfa_offset 8
 4912 0002 82B0     		sub	sp, sp, #8
 4913              	.LCFI64:
 4914              		.cfi_def_cfa_offset 16
 4915 0004 00AF     		add	r7, sp, #0
 4916              		.cfi_offset 14, -4
 4917              		.cfi_offset 7, -8
 4918              	.LCFI65:
 4919              		.cfi_def_cfa_register 7
 4920 0006 7860     		str	r0, [r7, #4]
 4921              	.LBB13:
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 4922              		.loc 51 81 0
 4923 0008 7B68     		ldr	r3, [r7, #4]
 4924 000a 1846     		mov	r0, r3
 4925 000c FFF7FEFF 		bl	_ZNSaISsEC2Ev
 4926 0010 7B68     		ldr	r3, [r7, #4]
 4927 0012 4FF00002 		mov	r2, #0
 4928 0016 1A60     		str	r2, [r3, #0]
 4929 0018 7B68     		ldr	r3, [r7, #4]
 4930 001a 4FF00002 		mov	r2, #0
 4931 001e 5A60     		str	r2, [r3, #4]
 4932 0020 7B68     		ldr	r3, [r7, #4]
 4933 0022 4FF00002 		mov	r2, #0
 4934 0026 9A60     		str	r2, [r3, #8]
 4935              	.LBE13:
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	{ }
 4936              		.loc 51 82 0
 4937 0028 7B68     		ldr	r3, [r7, #4]
 4938 002a 1846     		mov	r0, r3
 4939 002c 07F10807 		add	r7, r7, #8
 4940 0030 BD46     		mov	sp, r7
 4941 0032 80BD     		pop	{r7, pc}
 4942              		.cfi_endproc
 4943              	.LFE1080:
 4945              		.weak	_ZNSt12_Vector_baseISsSaISsEE12_Vector_implC1Ev
 4946              		.thumb_set _ZNSt12_Vector_baseISsSaISsEE12_Vector_implC1Ev,_ZNSt12_Vector_baseISsSaISsEE12_Vector_
 4947              		.section	.text._ZNSaISsED2Ev,"axG",%progbits,_ZNSaISsED5Ev,comdat
 4948              		.align	2
 4949              		.weak	_ZNSaISsED2Ev
 4950              		.thumb
 4951              		.thumb_func
 4953              	_ZNSaISsED2Ev:
 4954              	.LFB1083:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * Copyright (c) 1996-1997
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  *
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * representations about the suitability of this software for any
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  */
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** /** @file allocator.h
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  *  You should not attempt to use it directly.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  */
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** #ifndef _ALLOCATOR_H
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** #define _ALLOCATOR_H 1
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Define the base class to std::allocator.
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** #include <bits/c++allocator.h>
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE(std)
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   /**
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * @defgroup allocators Allocators
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * @ingroup memory
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    *
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * Classes encapsulating memory operations.
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    */
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   template<typename _Tp>
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     class allocator;
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   /// allocator<void> specialization.
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   template<>
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     class allocator<void>
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     {
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     public:
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef size_t      size_type;
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef void*       pointer;
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef const void* const_pointer;
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef void        value_type;
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       template<typename _Tp1>
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         struct rebind
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     };
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   /**
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * @ingroup allocators
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    *
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    *  Further details:
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    */
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   template<typename _Tp>
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     class allocator: public __glibcxx_base_allocator<_Tp>
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     {
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    public:
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef size_t     size_type;
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef _Tp*       pointer;
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef const _Tp* const_pointer;
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef _Tp&       reference;
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef const _Tp& const_reference;
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef _Tp        value_type;
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       template<typename _Tp1>
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         struct rebind
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       allocator() throw() { }
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       allocator(const allocator& __a) throw()
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       : __glibcxx_base_allocator<_Tp>(__a) { }
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       template<typename _Tp1>
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       ~allocator() throw() { }
 4955              		.loc 44 109 0
 4956              		.cfi_startproc
 4957              		@ args = 0, pretend = 0, frame = 8
 4958              		@ frame_needed = 1, uses_anonymous_args = 0
 4959 0000 80B5     		push	{r7, lr}
 4960              	.LCFI66:
 4961              		.cfi_def_cfa_offset 8
 4962 0002 82B0     		sub	sp, sp, #8
 4963              	.LCFI67:
 4964              		.cfi_def_cfa_offset 16
 4965 0004 00AF     		add	r7, sp, #0
 4966              		.cfi_offset 14, -4
 4967              		.cfi_offset 7, -8
 4968              	.LCFI68:
 4969              		.cfi_def_cfa_register 7
 4970 0006 7860     		str	r0, [r7, #4]
 4971              	.LBB14:
 4972              		.loc 44 109 0
 4973 0008 7B68     		ldr	r3, [r7, #4]
 4974 000a 1846     		mov	r0, r3
 4975 000c FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorISsED2Ev
 4976              	.LBE14:
 4977 0010 7B68     		ldr	r3, [r7, #4]
 4978 0012 1846     		mov	r0, r3
 4979 0014 07F10807 		add	r7, r7, #8
 4980 0018 BD46     		mov	sp, r7
 4981 001a 80BD     		pop	{r7, pc}
 4982              		.cfi_endproc
 4983              	.LFE1083:
 4985              		.weak	_ZNSaISsED1Ev
 4986              		.thumb_set _ZNSaISsED1Ev,_ZNSaISsED2Ev
 4987              		.section	.text._ZNSt12_Vector_baseISsSaISsEE13_M_deallocateEPSsj,"axG",%progbits,_ZNSt12_Vector_ba
 4988              		.align	2
 4989              		.weak	_ZNSt12_Vector_baseISsSaISsEE13_M_deallocateEPSsj
 4990              		.thumb
 4991              		.thumb_func
 4993              	_ZNSt12_Vector_baseISsSaISsEE13_M_deallocateEPSsj:
 4994              	.LFB1085:
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 4995              		.loc 51 143 0
 4996              		.cfi_startproc
 4997              		@ args = 0, pretend = 0, frame = 16
 4998              		@ frame_needed = 1, uses_anonymous_args = 0
 4999 0000 80B5     		push	{r7, lr}
 5000              	.LCFI69:
 5001              		.cfi_def_cfa_offset 8
 5002 0002 84B0     		sub	sp, sp, #16
 5003              	.LCFI70:
 5004              		.cfi_def_cfa_offset 24
 5005 0004 00AF     		add	r7, sp, #0
 5006              		.cfi_offset 14, -4
 5007              		.cfi_offset 7, -8
 5008              	.LCFI71:
 5009              		.cfi_def_cfa_register 7
 5010 0006 F860     		str	r0, [r7, #12]
 5011 0008 B960     		str	r1, [r7, #8]
 5012 000a 7A60     		str	r2, [r7, #4]
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	if (__p)
 5013              		.loc 51 145 0
 5014 000c BB68     		ldr	r3, [r7, #8]
 5015 000e 002B     		cmp	r3, #0
 5016 0010 05D0     		beq	.L64
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 5017              		.loc 51 146 0
 5018 0012 FB68     		ldr	r3, [r7, #12]
 5019 0014 1846     		mov	r0, r3
 5020 0016 B968     		ldr	r1, [r7, #8]
 5021 0018 7A68     		ldr	r2, [r7, #4]
 5022 001a FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorISsE10deallocateEPSsj
 5023              	.L64:
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 5024              		.loc 51 147 0
 5025 001e 07F11007 		add	r7, r7, #16
 5026 0022 BD46     		mov	sp, r7
 5027 0024 80BD     		pop	{r7, pc}
 5028              		.cfi_endproc
 5029              	.LFE1085:
 5031 0026 00BF     		.section	.text._ZSt8_DestroyIPSsEvT_S1_,"axG",%progbits,_ZSt8_DestroyIPSsEvT_S1_,comdat
 5032              		.align	2
 5033              		.weak	_ZSt8_DestroyIPSsEvT_S1_
 5034              		.thumb
 5035              		.thumb_func
 5037              	_ZSt8_DestroyIPSsEvT_S1_:
 5038              	.LFB1086:
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 5039              		.loc 49 118 0
 5040              		.cfi_startproc
 5041              		@ args = 0, pretend = 0, frame = 8
 5042              		@ frame_needed = 1, uses_anonymous_args = 0
 5043 0000 80B5     		push	{r7, lr}
 5044              	.LCFI72:
 5045              		.cfi_def_cfa_offset 8
 5046 0002 82B0     		sub	sp, sp, #8
 5047              	.LCFI73:
 5048              		.cfi_def_cfa_offset 16
 5049 0004 00AF     		add	r7, sp, #0
 5050              		.cfi_offset 14, -4
 5051              		.cfi_offset 7, -8
 5052              	.LCFI74:
 5053              		.cfi_def_cfa_register 7
 5054 0006 7860     		str	r0, [r7, #4]
 5055 0008 3960     		str	r1, [r7, #0]
 5056              	.LBB15:
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 5057              		.loc 49 122 0
 5058 000a 7868     		ldr	r0, [r7, #4]
 5059 000c 3968     		ldr	r1, [r7, #0]
 5060 000e FFF7FEFF 		bl	_ZNSt12_Destroy_auxILb0EE9__destroyIPSsEEvT_S3_
 5061              	.LBE15:
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     }
 5062              		.loc 49 124 0
 5063 0012 07F10807 		add	r7, r7, #8
 5064 0016 BD46     		mov	sp, r7
 5065 0018 80BD     		pop	{r7, pc}
 5066              		.cfi_endproc
 5067              	.LFE1086:
 5069 001a 00BF     		.section	.text._ZNSaISsEC2Ev,"axG",%progbits,_ZNSaISsEC5Ev,comdat
 5070              		.align	2
 5071              		.weak	_ZNSaISsEC2Ev
 5072              		.thumb
 5073              		.thumb_func
 5075              	_ZNSaISsEC2Ev:
 5076              	.LFB1091:
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       allocator() throw() { }
 5077              		.loc 44 101 0
 5078              		.cfi_startproc
 5079              		@ args = 0, pretend = 0, frame = 8
 5080              		@ frame_needed = 1, uses_anonymous_args = 0
 5081 0000 80B5     		push	{r7, lr}
 5082              	.LCFI75:
 5083              		.cfi_def_cfa_offset 8
 5084 0002 82B0     		sub	sp, sp, #8
 5085              	.LCFI76:
 5086              		.cfi_def_cfa_offset 16
 5087 0004 00AF     		add	r7, sp, #0
 5088              		.cfi_offset 14, -4
 5089              		.cfi_offset 7, -8
 5090              	.LCFI77:
 5091              		.cfi_def_cfa_register 7
 5092 0006 7860     		str	r0, [r7, #4]
 5093              	.LBB16:
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       allocator() throw() { }
 5094              		.loc 44 101 0
 5095 0008 7B68     		ldr	r3, [r7, #4]
 5096 000a 1846     		mov	r0, r3
 5097 000c FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorISsEC2Ev
 5098              	.LBE16:
 5099 0010 7B68     		ldr	r3, [r7, #4]
 5100 0012 1846     		mov	r0, r3
 5101 0014 07F10807 		add	r7, r7, #8
 5102 0018 BD46     		mov	sp, r7
 5103 001a 80BD     		pop	{r7, pc}
 5104              		.cfi_endproc
 5105              	.LFE1091:
 5107              		.weak	_ZNSaISsEC1Ev
 5108              		.thumb_set _ZNSaISsEC1Ev,_ZNSaISsEC2Ev
 5109              		.section	.text._ZN9__gnu_cxx13new_allocatorISsED2Ev,"axG",%progbits,_ZN9__gnu_cxx13new_allocatorIS
 5110              		.align	2
 5111              		.weak	_ZN9__gnu_cxx13new_allocatorISsED2Ev
 5112              		.thumb
 5113              		.thumb_func
 5115              	_ZN9__gnu_cxx13new_allocatorISsED2Ev:
 5116              	.LFB1094:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** /** @file ext/new_allocator.h
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****  */
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #include <new>
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #include <bits/move.h>
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****   using std::size_t;
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****   using std::ptrdiff_t;
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****   /**
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *  @ingroup allocators
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *    - all allocation calls operator new
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    */
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****   template<typename _Tp>
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****     class new_allocator
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****     {
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****     public:
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef size_t     size_type;
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef _Tp*       pointer;
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef _Tp&       reference;
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef _Tp        value_type;
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       template<typename _Tp1>
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****         struct rebind
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator() throw() { }
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator(const new_allocator&) throw() { }
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       template<typename _Tp1>
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) throw() { }
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       ~new_allocator() throw() { }
 5117              		.loc 46 73 0
 5118              		.cfi_startproc
 5119              		@ args = 0, pretend = 0, frame = 8
 5120              		@ frame_needed = 1, uses_anonymous_args = 0
 5121              		@ link register save eliminated.
 5122 0000 80B4     		push	{r7}
 5123              	.LCFI78:
 5124              		.cfi_def_cfa_offset 4
 5125 0002 83B0     		sub	sp, sp, #12
 5126              	.LCFI79:
 5127              		.cfi_def_cfa_offset 16
 5128 0004 00AF     		add	r7, sp, #0
 5129              		.cfi_offset 7, -4
 5130              	.LCFI80:
 5131              		.cfi_def_cfa_register 7
 5132 0006 7860     		str	r0, [r7, #4]
 5133              		.loc 46 73 0
 5134 0008 7B68     		ldr	r3, [r7, #4]
 5135 000a 1846     		mov	r0, r3
 5136 000c 07F10C07 		add	r7, r7, #12
 5137 0010 BD46     		mov	sp, r7
 5138 0012 80BC     		pop	{r7}
 5139 0014 7047     		bx	lr
 5140              		.cfi_endproc
 5141              	.LFE1094:
 5143              		.weak	_ZN9__gnu_cxx13new_allocatorISsED1Ev
 5144              		.thumb_set _ZN9__gnu_cxx13new_allocatorISsED1Ev,_ZN9__gnu_cxx13new_allocatorISsED2Ev
 5145 0016 00BF     		.section	.text._ZN9__gnu_cxx13new_allocatorISsE10deallocateEPSsj,"axG",%progbits,_ZN9__gnu_cxx13ne
 5146              		.align	2
 5147              		.weak	_ZN9__gnu_cxx13new_allocatorISsE10deallocateEPSsj
 5148              		.thumb
 5149              		.thumb_func
 5151              	_ZN9__gnu_cxx13new_allocatorISsE10deallocateEPSsj:
 5152              	.LFB1096:
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       pointer
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       address(reference __x) const { return &__x; }
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       const_pointer
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       address(const_reference __x) const { return &__x; }
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       pointer
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { 
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	if (__n > this->max_size())
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       }
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       void
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 5153              		.loc 46 94 0
 5154              		.cfi_startproc
 5155              		@ args = 0, pretend = 0, frame = 16
 5156              		@ frame_needed = 1, uses_anonymous_args = 0
 5157 0000 80B5     		push	{r7, lr}
 5158              	.LCFI81:
 5159              		.cfi_def_cfa_offset 8
 5160 0002 84B0     		sub	sp, sp, #16
 5161              	.LCFI82:
 5162              		.cfi_def_cfa_offset 24
 5163 0004 00AF     		add	r7, sp, #0
 5164              		.cfi_offset 14, -4
 5165              		.cfi_offset 7, -8
 5166              	.LCFI83:
 5167              		.cfi_def_cfa_register 7
 5168 0006 F860     		str	r0, [r7, #12]
 5169 0008 B960     		str	r1, [r7, #8]
 5170 000a 7A60     		str	r2, [r7, #4]
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { ::operator delete(__p); }
 5171              		.loc 46 95 0
 5172 000c B868     		ldr	r0, [r7, #8]
 5173 000e FFF7FEFF 		bl	_ZdlPv
 5174 0012 07F11007 		add	r7, r7, #16
 5175 0016 BD46     		mov	sp, r7
 5176 0018 80BD     		pop	{r7, pc}
 5177              		.cfi_endproc
 5178              	.LFE1096:
 5180 001a 00BF     		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSsEEvT_S3_,"axG",%progbits,_ZNSt12_Destroy_aux
 5181              		.align	2
 5182              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSsEEvT_S3_
 5183              		.thumb
 5184              		.thumb_func
 5186              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSsEEvT_S3_:
 5187              	.LFB1097:
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 5188              		.loc 49 96 0
 5189              		.cfi_startproc
 5190              		@ args = 0, pretend = 0, frame = 8
 5191              		@ frame_needed = 1, uses_anonymous_args = 0
 5192 0000 80B5     		push	{r7, lr}
 5193              	.LCFI84:
 5194              		.cfi_def_cfa_offset 8
 5195 0002 82B0     		sub	sp, sp, #8
 5196              	.LCFI85:
 5197              		.cfi_def_cfa_offset 16
 5198 0004 00AF     		add	r7, sp, #0
 5199              		.cfi_offset 14, -4
 5200              		.cfi_offset 7, -8
 5201              	.LCFI86:
 5202              		.cfi_def_cfa_register 7
 5203 0006 7860     		str	r0, [r7, #4]
 5204 0008 3960     		str	r1, [r7, #0]
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 5205              		.loc 49 98 0
 5206 000a 06E0     		b	.L73
 5207              	.L74:
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	    std::_Destroy(&*__first);
 5208              		.loc 49 99 0 discriminator 2
 5209 000c 7868     		ldr	r0, [r7, #4]
 5210 000e FFF7FEFF 		bl	_ZSt8_DestroyISsEvPT_
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 5211              		.loc 49 98 0 discriminator 2
 5212 0012 7B68     		ldr	r3, [r7, #4]
 5213 0014 03F10403 		add	r3, r3, #4
 5214 0018 7B60     		str	r3, [r7, #4]
 5215              	.L73:
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 5216              		.loc 49 98 0 is_stmt 0 discriminator 1
 5217 001a 7A68     		ldr	r2, [r7, #4]
 5218 001c 3B68     		ldr	r3, [r7, #0]
 5219 001e 9A42     		cmp	r2, r3
 5220 0020 0CBF     		ite	eq
 5221 0022 0023     		moveq	r3, #0
 5222 0024 0123     		movne	r3, #1
 5223 0026 DBB2     		uxtb	r3, r3
 5224 0028 002B     		cmp	r3, #0
 5225 002a EFD1     		bne	.L74
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h **** 	}
 5226              		.loc 49 100 0 is_stmt 1
 5227 002c 07F10807 		add	r7, r7, #8
 5228 0030 BD46     		mov	sp, r7
 5229 0032 80BD     		pop	{r7, pc}
 5230              		.cfi_endproc
 5231              	.LFE1097:
 5233              		.section	.text._ZN9__gnu_cxx13new_allocatorISsEC2Ev,"axG",%progbits,_ZN9__gnu_cxx13new_allocatorIS
 5234              		.align	2
 5235              		.weak	_ZN9__gnu_cxx13new_allocatorISsEC2Ev
 5236              		.thumb
 5237              		.thumb_func
 5239              	_ZN9__gnu_cxx13new_allocatorISsEC2Ev:
 5240              	.LFB1099:
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator() throw() { }
 5241              		.loc 46 66 0
 5242              		.cfi_startproc
 5243              		@ args = 0, pretend = 0, frame = 8
 5244              		@ frame_needed = 1, uses_anonymous_args = 0
 5245              		@ link register save eliminated.
 5246 0000 80B4     		push	{r7}
 5247              	.LCFI87:
 5248              		.cfi_def_cfa_offset 4
 5249 0002 83B0     		sub	sp, sp, #12
 5250              	.LCFI88:
 5251              		.cfi_def_cfa_offset 16
 5252 0004 00AF     		add	r7, sp, #0
 5253              		.cfi_offset 7, -4
 5254              	.LCFI89:
 5255              		.cfi_def_cfa_register 7
 5256 0006 7860     		str	r0, [r7, #4]
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator() throw() { }
 5257              		.loc 46 66 0
 5258 0008 7B68     		ldr	r3, [r7, #4]
 5259 000a 1846     		mov	r0, r3
 5260 000c 07F10C07 		add	r7, r7, #12
 5261 0010 BD46     		mov	sp, r7
 5262 0012 80BC     		pop	{r7}
 5263 0014 7047     		bx	lr
 5264              		.cfi_endproc
 5265              	.LFE1099:
 5267              		.weak	_ZN9__gnu_cxx13new_allocatorISsEC1Ev
 5268              		.thumb_set _ZN9__gnu_cxx13new_allocatorISsEC1Ev,_ZN9__gnu_cxx13new_allocatorISsEC2Ev
 5269 0016 00BF     		.section	.text._ZSt8_DestroyISsEvPT_,"axG",%progbits,_ZSt8_DestroyISsEvPT_,comdat
 5270              		.align	2
 5271              		.weak	_ZSt8_DestroyISsEvPT_
 5272              		.thumb
 5273              		.thumb_func
 5275              	_ZSt8_DestroyISsEvPT_:
 5276              	.LFB1101:
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
 5277              		.loc 49 88 0
 5278              		.cfi_startproc
 5279              		@ args = 0, pretend = 0, frame = 8
 5280              		@ frame_needed = 1, uses_anonymous_args = 0
 5281 0000 80B5     		push	{r7, lr}
 5282              	.LCFI90:
 5283              		.cfi_def_cfa_offset 8
 5284 0002 82B0     		sub	sp, sp, #8
 5285              	.LCFI91:
 5286              		.cfi_def_cfa_offset 16
 5287 0004 00AF     		add	r7, sp, #0
 5288              		.cfi_offset 14, -4
 5289              		.cfi_offset 7, -8
 5290              	.LCFI92:
 5291              		.cfi_def_cfa_register 7
 5292 0006 7860     		str	r0, [r7, #4]
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 5293              		.loc 49 89 0
 5294 0008 7868     		ldr	r0, [r7, #4]
 5295 000a FFF7FEFF 		bl	_ZNSsD1Ev
 5296 000e 07F10807 		add	r7, r7, #8
 5297 0012 BD46     		mov	sp, r7
 5298 0014 80BD     		pop	{r7, pc}
 5299              		.cfi_endproc
 5300              	.LFE1101:
 5302              		.global	_ZTVN5Air3T8MenuViewE
 5303 0016 00BF     		.section	.rodata._ZTVN5Air3T8MenuViewE,"a",%progbits
 5304              		.align	3
 5307              	_ZTVN5Air3T8MenuViewE:
 5308 0000 00000000 		.word	0
 5309 0004 00000000 		.word	0
 5310 0008 00000000 		.word	_ZN5Air3T8MenuViewD1Ev
 5311 000c 00000000 		.word	_ZN5Air3T8MenuViewD0Ev
 5312 0010 00000000 		.word	_ZN5Air3T8MenuView16onPositionChangeEN9IJoystick8PositionE
 5313 0014 00000000 		.word	__cxa_pure_virtual
 5314              		.text
 5315              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 menuview.cpp
     /tmp/ccwSvPTE.s:3479   .text._ZN5Air3T4View8observerEv:00000000 $t
     /tmp/ccwSvPTE.s:3484   .text._ZN5Air3T4View8observerEv:00000000 _ZN5Air3T4View8observerEv
     /tmp/ccwSvPTE.s:3514   .text._ZL20__gthread_key_deletei:00000000 $t
     /tmp/ccwSvPTE.s:3518   .text._ZL20__gthread_key_deletei:00000000 _ZL20__gthread_key_deletei
     /tmp/ccwSvPTE.s:3548   .text._ZN18IMonochromeDisplay5PointC2Eii:00000000 $t
     /tmp/ccwSvPTE.s:3553   .text._ZN18IMonochromeDisplay5PointC2Eii:00000000 _ZN18IMonochromeDisplay5PointC2Eii
     /tmp/ccwSvPTE.s:3553   .text._ZN18IMonochromeDisplay5PointC2Eii:00000000 _ZN18IMonochromeDisplay5PointC1Eii
     /tmp/ccwSvPTE.s:3594   .text._ZN18IMonochromeDisplay4SizeC2Eii:00000000 $t
     /tmp/ccwSvPTE.s:3599   .text._ZN18IMonochromeDisplay4SizeC2Eii:00000000 _ZN18IMonochromeDisplay4SizeC2Eii
     /tmp/ccwSvPTE.s:3599   .text._ZN18IMonochromeDisplay4SizeC2Eii:00000000 _ZN18IMonochromeDisplay4SizeC1Eii
     /tmp/ccwSvPTE.s:3640   .text._ZN5Air3T8MenuViewC2ER24MonochromeDisplayPainterRKSs:00000000 $t
     /tmp/ccwSvPTE.s:3645   .text._ZN5Air3T8MenuViewC2ER24MonochromeDisplayPainterRKSs:00000000 _ZN5Air3T8MenuViewC2ER24MonochromeDisplayPainterRKSs
     /tmp/ccwSvPTE.s:4376   .text._ZNSt6vectorISsSaISsEEC2Ev:00000000 _ZNSt6vectorISsSaISsEEC1Ev
     /tmp/ccwSvPTE.s:3707   .text._ZN5Air3T8MenuViewC2ER24MonochromeDisplayPainterRKSs:00000064 $d
     /tmp/ccwSvPTE.s:5307   .rodata._ZTVN5Air3T8MenuViewE:00000000 _ZTVN5Air3T8MenuViewE
     /tmp/ccwSvPTE.s:3645   .text._ZN5Air3T8MenuViewC2ER24MonochromeDisplayPainterRKSs:00000000 _ZN5Air3T8MenuViewC1ER24MonochromeDisplayPainterRKSs
     /tmp/ccwSvPTE.s:3714   .text._ZN5Air3T8MenuViewD2Ev:00000000 $t
     /tmp/ccwSvPTE.s:3719   .text._ZN5Air3T8MenuViewD2Ev:00000000 _ZN5Air3T8MenuViewD2Ev
     /tmp/ccwSvPTE.s:4416   .text._ZNSt6vectorISsSaISsEED2Ev:00000000 _ZNSt6vectorISsSaISsEED1Ev
     /tmp/ccwSvPTE.s:3777   .text._ZN5Air3T8MenuViewD2Ev:00000050 $d
     /tmp/ccwSvPTE.s:3719   .text._ZN5Air3T8MenuViewD2Ev:00000000 _ZN5Air3T8MenuViewD1Ev
     /tmp/ccwSvPTE.s:3784   .text._ZN5Air3T8MenuViewD0Ev:00000000 $t
     /tmp/ccwSvPTE.s:3789   .text._ZN5Air3T8MenuViewD0Ev:00000000 _ZN5Air3T8MenuViewD0Ev
     /tmp/ccwSvPTE.s:3821   .text._ZN5Air3T8MenuView7repaintEv:00000000 $t
     /tmp/ccwSvPTE.s:3826   .text._ZN5Air3T8MenuView7repaintEv:00000000 _ZN5Air3T8MenuView7repaintEv
     /tmp/ccwSvPTE.s:4473   .text._ZNKSt6vectorISsSaISsEE4sizeEv:00000000 _ZNKSt6vectorISsSaISsEE4sizeEv
     /tmp/ccwSvPTE.s:4513   .text._ZSt3minIiERKT_S2_S2_:00000000 _ZSt3minIiERKT_S2_S2_
     /tmp/ccwSvPTE.s:4561   .text._ZSt3maxIiERKT_S2_S2_:00000000 _ZSt3maxIiERKT_S2_S2_
     /tmp/ccwSvPTE.s:4609   .text._ZSt3minIjERKT_S2_S2_:00000000 _ZSt3minIjERKT_S2_S2_
     /tmp/ccwSvPTE.s:4657   .text._ZNSt6vectorISsSaISsEEixEj:00000000 _ZNSt6vectorISsSaISsEEixEj
     /tmp/ccwSvPTE.s:4214   .text._ZN5Air3T8MenuView16onPositionChangeEN9IJoystick8PositionE:00000000 $t
     /tmp/ccwSvPTE.s:4219   .text._ZN5Air3T8MenuView16onPositionChangeEN9IJoystick8PositionE:00000000 _ZN5Air3T8MenuView16onPositionChangeEN9IJoystick8PositionE
     /tmp/ccwSvPTE.s:4371   .text._ZNSt6vectorISsSaISsEEC2Ev:00000000 $t
     /tmp/ccwSvPTE.s:4376   .text._ZNSt6vectorISsSaISsEEC2Ev:00000000 _ZNSt6vectorISsSaISsEEC2Ev
     /tmp/ccwSvPTE.s:4736   .text._ZNSt12_Vector_baseISsSaISsEEC2Ev:00000000 _ZNSt12_Vector_baseISsSaISsEEC2Ev
     /tmp/ccwSvPTE.s:4411   .text._ZNSt6vectorISsSaISsEED2Ev:00000000 $t
     /tmp/ccwSvPTE.s:4416   .text._ZNSt6vectorISsSaISsEED2Ev:00000000 _ZNSt6vectorISsSaISsEED2Ev
     /tmp/ccwSvPTE.s:4832   .text._ZNSt12_Vector_baseISsSaISsEE19_M_get_Tp_allocatorEv:00000000 _ZNSt12_Vector_baseISsSaISsEE19_M_get_Tp_allocatorEv
     /tmp/ccwSvPTE.s:4866   .text._ZSt8_DestroyIPSsSsEvT_S1_RSaIT0_E:00000000 _ZSt8_DestroyIPSsSsEvT_S1_RSaIT0_E
     /tmp/ccwSvPTE.s:4776   .text._ZNSt12_Vector_baseISsSaISsEED2Ev:00000000 _ZNSt12_Vector_baseISsSaISsEED2Ev
     /tmp/ccwSvPTE.s:4468   .text._ZNKSt6vectorISsSaISsEE4sizeEv:00000000 $t
     /tmp/ccwSvPTE.s:4508   .text._ZSt3minIiERKT_S2_S2_:00000000 $t
     /tmp/ccwSvPTE.s:4556   .text._ZSt3maxIiERKT_S2_S2_:00000000 $t
     /tmp/ccwSvPTE.s:4604   .text._ZSt3minIjERKT_S2_S2_:00000000 $t
     /tmp/ccwSvPTE.s:4652   .text._ZNSt6vectorISsSaISsEEixEj:00000000 $t
     /tmp/ccwSvPTE.s:4691   .text._ZNSt12_Vector_baseISsSaISsEE12_Vector_implD2Ev:00000000 $t
     /tmp/ccwSvPTE.s:4696   .text._ZNSt12_Vector_baseISsSaISsEE12_Vector_implD2Ev:00000000 _ZNSt12_Vector_baseISsSaISsEE12_Vector_implD2Ev
     /tmp/ccwSvPTE.s:4953   .text._ZNSaISsED2Ev:00000000 _ZNSaISsED2Ev
     /tmp/ccwSvPTE.s:4696   .text._ZNSt12_Vector_baseISsSaISsEE12_Vector_implD2Ev:00000000 _ZNSt12_Vector_baseISsSaISsEE12_Vector_implD1Ev
     /tmp/ccwSvPTE.s:4731   .text._ZNSt12_Vector_baseISsSaISsEEC2Ev:00000000 $t
     /tmp/ccwSvPTE.s:4903   .text._ZNSt12_Vector_baseISsSaISsEE12_Vector_implC2Ev:00000000 _ZNSt12_Vector_baseISsSaISsEE12_Vector_implC1Ev
     /tmp/ccwSvPTE.s:4736   .text._ZNSt12_Vector_baseISsSaISsEEC2Ev:00000000 _ZNSt12_Vector_baseISsSaISsEEC1Ev
     /tmp/ccwSvPTE.s:4771   .text._ZNSt12_Vector_baseISsSaISsEED2Ev:00000000 $t
     /tmp/ccwSvPTE.s:4993   .text._ZNSt12_Vector_baseISsSaISsEE13_M_deallocateEPSsj:00000000 _ZNSt12_Vector_baseISsSaISsEE13_M_deallocateEPSsj
     /tmp/ccwSvPTE.s:4776   .text._ZNSt12_Vector_baseISsSaISsEED2Ev:00000000 _ZNSt12_Vector_baseISsSaISsEED1Ev
     /tmp/ccwSvPTE.s:4827   .text._ZNSt12_Vector_baseISsSaISsEE19_M_get_Tp_allocatorEv:00000000 $t
     /tmp/ccwSvPTE.s:4861   .text._ZSt8_DestroyIPSsSsEvT_S1_RSaIT0_E:00000000 $t
     /tmp/ccwSvPTE.s:5037   .text._ZSt8_DestroyIPSsEvT_S1_:00000000 _ZSt8_DestroyIPSsEvT_S1_
     /tmp/ccwSvPTE.s:4898   .text._ZNSt12_Vector_baseISsSaISsEE12_Vector_implC2Ev:00000000 $t
     /tmp/ccwSvPTE.s:4903   .text._ZNSt12_Vector_baseISsSaISsEE12_Vector_implC2Ev:00000000 _ZNSt12_Vector_baseISsSaISsEE12_Vector_implC2Ev
     /tmp/ccwSvPTE.s:5075   .text._ZNSaISsEC2Ev:00000000 _ZNSaISsEC2Ev
     /tmp/ccwSvPTE.s:4948   .text._ZNSaISsED2Ev:00000000 $t
     /tmp/ccwSvPTE.s:5115   .text._ZN9__gnu_cxx13new_allocatorISsED2Ev:00000000 _ZN9__gnu_cxx13new_allocatorISsED2Ev
     /tmp/ccwSvPTE.s:4953   .text._ZNSaISsED2Ev:00000000 _ZNSaISsED1Ev
     /tmp/ccwSvPTE.s:4988   .text._ZNSt12_Vector_baseISsSaISsEE13_M_deallocateEPSsj:00000000 $t
     /tmp/ccwSvPTE.s:5151   .text._ZN9__gnu_cxx13new_allocatorISsE10deallocateEPSsj:00000000 _ZN9__gnu_cxx13new_allocatorISsE10deallocateEPSsj
     /tmp/ccwSvPTE.s:5032   .text._ZSt8_DestroyIPSsEvT_S1_:00000000 $t
     /tmp/ccwSvPTE.s:5186   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSsEEvT_S3_:00000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSsEEvT_S3_
     /tmp/ccwSvPTE.s:5070   .text._ZNSaISsEC2Ev:00000000 $t
     /tmp/ccwSvPTE.s:5239   .text._ZN9__gnu_cxx13new_allocatorISsEC2Ev:00000000 _ZN9__gnu_cxx13new_allocatorISsEC2Ev
     /tmp/ccwSvPTE.s:5075   .text._ZNSaISsEC2Ev:00000000 _ZNSaISsEC1Ev
     /tmp/ccwSvPTE.s:5110   .text._ZN9__gnu_cxx13new_allocatorISsED2Ev:00000000 $t
     /tmp/ccwSvPTE.s:5115   .text._ZN9__gnu_cxx13new_allocatorISsED2Ev:00000000 _ZN9__gnu_cxx13new_allocatorISsED1Ev
     /tmp/ccwSvPTE.s:5146   .text._ZN9__gnu_cxx13new_allocatorISsE10deallocateEPSsj:00000000 $t
     /tmp/ccwSvPTE.s:5181   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSsEEvT_S3_:00000000 $t
     /tmp/ccwSvPTE.s:5275   .text._ZSt8_DestroyISsEvPT_:00000000 _ZSt8_DestroyISsEvPT_
     /tmp/ccwSvPTE.s:5234   .text._ZN9__gnu_cxx13new_allocatorISsEC2Ev:00000000 $t
     /tmp/ccwSvPTE.s:5239   .text._ZN9__gnu_cxx13new_allocatorISsEC2Ev:00000000 _ZN9__gnu_cxx13new_allocatorISsEC1Ev
     /tmp/ccwSvPTE.s:5270   .text._ZSt8_DestroyISsEvPT_:00000000 $t
     /tmp/ccwSvPTE.s:5304   .rodata._ZTVN5Air3T8MenuViewE:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 _ZN18IMonochromeDisplay5PointC5Eii
                           .group:00000000 _ZN18IMonochromeDisplay4SizeC5Eii
                           .group:00000000 _ZNSt6vectorISsSaISsEEC5Ev
                           .group:00000000 _ZNSt6vectorISsSaISsEED5Ev
                           .group:00000000 _ZNSt12_Vector_baseISsSaISsEE12_Vector_implD5Ev
                           .group:00000000 _ZNSt12_Vector_baseISsSaISsEEC5Ev
                           .group:00000000 _ZNSt12_Vector_baseISsSaISsEED5Ev
                           .group:00000000 _ZNSt12_Vector_baseISsSaISsEE12_Vector_implC5Ev
                           .group:00000000 _ZNSaISsED5Ev
                           .group:00000000 _ZNSaISsEC5Ev
                           .group:00000000 _ZN9__gnu_cxx13new_allocatorISsED5Ev
                           .group:00000000 _ZN9__gnu_cxx13new_allocatorISsEC5Ev

UNDEFINED SYMBOLS
_ZN5Air3T4ViewC2Ev
_ZNSsC1ERKSs
_ZN24MonochromeDisplayPainter13setAutoUpdateEb
_ZNSsD1Ev
_ZN5Air3T4ViewD2Ev
_ZdlPv
_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE
_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_
_ZNKSs4sizeEv
_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE
_ZN24MonochromeDisplayPainter6updateEv
__cxa_pure_virtual
