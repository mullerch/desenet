   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"frame.cpp"
  23              	.Ltext0:
  24              		.file 1 "../phy/frame.cpp"
 3951              		.align	2
 3952              		.weak	_ZnwjPv
 3953              		.thumb
 3954              		.thumb_func
 3956              	_ZnwjPv:
 3957              	.LFB194:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // The -*- C++ -*- dynamic memory management header.
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // 2003, 2004, 2005, 2006, 2007, 2009, 2010
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // Free Software Foundation
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // This file is part of GCC.
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** //
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // GCC is free software; you can redistribute it and/or modify
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // it under the terms of the GNU General Public License as published by
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // the Free Software Foundation; either version 3, or (at your option)
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // any later version.
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // 
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // GCC is distributed in the hope that it will be useful,
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // GNU General Public License for more details.
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // 
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // Under Section 7 of GPL version 3, you are granted additional
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // permissions described in the GCC Runtime Library Exception, version
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // 3.1, as published by the Free Software Foundation.
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // You should have received a copy of the GNU General Public License and
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // a copy of the GCC Runtime Library Exception along with this program;
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // <http://www.gnu.org/licenses/>.
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** /** @file new
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  This is a Standard C++ Library header.
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  The header @c new defines several functions to manage dynamic memory and
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  handling memory allocation errors; see
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  */
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #ifndef _NEW
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #define _NEW
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #pragma GCC system_header
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #include <cstddef>
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #include <exception>
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #pragma GCC visibility push(default)
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** extern "C++" {
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** namespace std 
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** {
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   /**
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  @brief  Exception possibly thrown by @c new.
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  @ingroup exceptions
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  errors from the throwing forms of @c new.  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   class bad_alloc : public exception 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   {
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   public:
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     bad_alloc() throw() { }
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     // This declaration is not useless:
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     virtual ~bad_alloc() throw();
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     // See comment in eh_exception.cc.
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     virtual const char* what() const throw();
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   };
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   struct nothrow_t { };
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   extern const nothrow_t nothrow;
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   /** If you write your own error handler to be called by @c new, it must
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  be of this type.  */
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   typedef void (*new_handler)();
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   /// Takes a replacement handler as the argument, returns the
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   /// previous handler.
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   new_handler set_new_handler(new_handler) throw();
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** } // namespace std
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** //@{
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** /** These are replaceable signatures:
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  - normal array new and delete (same)
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *    @c NULL on error)
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  - @c nothrow array new and delete (same)
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  Placement new and delete signatures (take a memory address argument,
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  does nothing) may not be replaced by a user's program.
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** */
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void* operator new(std::size_t) throw (std::bad_alloc);
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void* operator new[](std::size_t) throw (std::bad_alloc);
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void operator delete(void*) throw();
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void operator delete[](void*) throw();
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void* operator new(std::size_t, const std::nothrow_t&) throw();
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void* operator new[](std::size_t, const std::nothrow_t&) throw();
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void operator delete(void*, const std::nothrow_t&) throw();
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void operator delete[](void*, const std::nothrow_t&) throw();
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // Default placement versions of operator new.
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** inline void* operator new(std::size_t, void* __p) throw() { return __p; }
 3958              		.loc 54 103 0
 3959              		.cfi_startproc
 3960              		@ args = 0, pretend = 0, frame = 8
 3961              		@ frame_needed = 1, uses_anonymous_args = 0
 3962              		@ link register save eliminated.
 3963 0000 80B4     		push	{r7}
 3964              	.LCFI0:
 3965              		.cfi_def_cfa_offset 4
 3966 0002 83B0     		sub	sp, sp, #12
 3967              	.LCFI1:
 3968              		.cfi_def_cfa_offset 16
 3969 0004 00AF     		add	r7, sp, #0
 3970              		.cfi_offset 7, -4
 3971              	.LCFI2:
 3972              		.cfi_def_cfa_register 7
 3973 0006 7860     		str	r0, [r7, #4]
 3974 0008 3960     		str	r1, [r7, #0]
 3975              		.loc 54 103 0
 3976 000a 3B68     		ldr	r3, [r7, #0]
 3977 000c 1846     		mov	r0, r3
 3978 000e 07F10C07 		add	r7, r7, #12
 3979 0012 BD46     		mov	sp, r7
 3980 0014 80BC     		pop	{r7}
 3981 0016 7047     		bx	lr
 3982              		.cfi_endproc
 3983              	.LFE194:
 3985              		.section	.text._ZnajPv,"axG",%progbits,_ZnajPv,comdat
 3986              		.align	2
 3987              		.weak	_ZnajPv
 3988              		.thumb
 3989              		.thumb_func
 3991              	_ZnajPv:
 3992              	.LFB195:
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** inline void* operator new[](std::size_t, void* __p) throw() { return __p; }
 3993              		.loc 54 104 0
 3994              		.cfi_startproc
 3995              		@ args = 0, pretend = 0, frame = 8
 3996              		@ frame_needed = 1, uses_anonymous_args = 0
 3997              		@ link register save eliminated.
 3998 0000 80B4     		push	{r7}
 3999              	.LCFI3:
 4000              		.cfi_def_cfa_offset 4
 4001 0002 83B0     		sub	sp, sp, #12
 4002              	.LCFI4:
 4003              		.cfi_def_cfa_offset 16
 4004 0004 00AF     		add	r7, sp, #0
 4005              		.cfi_offset 7, -4
 4006              	.LCFI5:
 4007              		.cfi_def_cfa_register 7
 4008 0006 7860     		str	r0, [r7, #4]
 4009 0008 3960     		str	r1, [r7, #0]
 4010              		.loc 54 104 0
 4011 000a 3B68     		ldr	r3, [r7, #0]
 4012 000c 1846     		mov	r0, r3
 4013 000e 07F10C07 		add	r7, r7, #12
 4014 0012 BD46     		mov	sp, r7
 4015 0014 80BC     		pop	{r7}
 4016 0016 7047     		bx	lr
 4017              		.cfi_endproc
 4018              	.LFE195:
 4020              		.section	.text._ZL20__gthread_key_deletei,"ax",%progbits
 4021              		.align	2
 4022              		.thumb
 4023              		.thumb_func
 4025              	_ZL20__gthread_key_deletei:
 4026              	.LFB540:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Threads compatibility routines for libgcc2 and libobjc.  */
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Compile this one with gcc.  */
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Copyright (C) 1997, 1999, 2000, 2004, 2008, 2009
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****    Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** This file is part of GCC.
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** GCC is free software; you can redistribute it and/or modify it under
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** the terms of the GNU General Public License as published by the Free
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** Software Foundation; either version 3, or (at your option) any later
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** version.
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** GCC is distributed in the hope that it will be useful, but WITHOUT ANY
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** WARRANTY; without even the implied warranty of MERCHANTABILITY or
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** for more details.
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** Under Section 7 of GPL version 3, you are granted additional
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** permissions described in the GCC Runtime Library Exception, version
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 3.1, as published by the Free Software Foundation.
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** You should have received a copy of the GNU General Public License and
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** a copy of the GCC Runtime Library Exception along with this program;
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** <http://www.gnu.org/licenses/>.  */
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #ifndef _GLIBCXX_GCC_GTHR_SINGLE_H
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define _GLIBCXX_GCC_GTHR_SINGLE_H
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Just provide compatibility for mutex handling.  */
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_key_t;
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_once_t;
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_mutex_t;
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_recursive_mutex_t;
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_ONCE_INIT 0
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_MUTEX_INIT 0
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_RECURSIVE_MUTEX_INIT 0
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define _GLIBCXX_UNUSED __attribute__((unused))
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #ifdef _LIBOBJC
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Thread local storage for a single thread */
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static void *thread_local_storage = NULL;
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend initialization functions */
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Initialize the threads subsystem.  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_init_thread_system (void)
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Close the threads subsystem.  */
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_close_thread_system (void)
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend thread functions */
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Create a new thread of execution.  */
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline objc_thread_t
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_detach (void (* func)(void *), void * arg _GLIBCXX_UNUSED)
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return NULL;
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Set the current thread's priority.  */
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_set_priority (int priority _GLIBCXX_UNUSED)
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Return the current thread's priority.  */
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_get_priority (void)
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return OBJC_THREAD_INTERACTIVE_PRIORITY;
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Yield our process time to another thread.  */
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline void
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_yield (void)
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return;
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Terminate the current thread.  */
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_exit (void)
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* Should we really exit the program */
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* exit (&__objc_thread_exit_status); */
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Returns an integer value which uniquely describes a thread.  */
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline objc_thread_t
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_id (void)
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support, use 1.  */
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return (objc_thread_t) 1;
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Sets the thread's local storage pointer.  */
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_set_data (void *value)
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   thread_local_storage = value;
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Returns the thread's local storage pointer.  */
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline void *
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_get_data (void)
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return thread_local_storage;
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend mutex functions */
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Allocate a mutex.  */
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_allocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Deallocate a mutex.  */
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_deallocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Grab a lock on a mutex.  */
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_lock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* There can only be one thread, so we always get the lock */
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Try to grab a lock on a mutex.  */
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_trylock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* There can only be one thread, so we always get the lock */
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Unlock the mutex */
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_unlock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend condition mutex functions */
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Allocate a condition.  */
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_allocate (objc_condition_t condition _GLIBCXX_UNUSED)
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Deallocate a condition.  */
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_deallocate (objc_condition_t condition _GLIBCXX_UNUSED)
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wait on the condition */
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_wait (objc_condition_t condition _GLIBCXX_UNUSED,
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 			       objc_mutex_t mutex _GLIBCXX_UNUSED)
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wake up all threads waiting on this condition.  */
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_broadcast (objc_condition_t condition _GLIBCXX_UNUSED)
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wake up one thread waiting on this condition.  */
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_signal (objc_condition_t condition _GLIBCXX_UNUSED)
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #else /* _LIBOBJC */
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_active_p (void)
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_once (__gthread_once_t *__once _GLIBCXX_UNUSED, void (*__func) (void) _GLIBCXX_UNUSED)
 218:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 219:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 220:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 221:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 222:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int _GLIBCXX_UNUSED
 223:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_key_create (__gthread_key_t *__key _GLIBCXX_UNUSED, void (*__func) (void *) _GLIBCXX_UNUS
 224:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 225:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 226:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 227:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 228:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static int _GLIBCXX_UNUSED
 229:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_key_delete (__gthread_key_t __key _GLIBCXX_UNUSED)
 230:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 4027              		.loc 81 230 0
 4028              		.cfi_startproc
 4029              		@ args = 0, pretend = 0, frame = 8
 4030              		@ frame_needed = 1, uses_anonymous_args = 0
 4031              		@ link register save eliminated.
 4032 0000 80B4     		push	{r7}
 4033              	.LCFI6:
 4034              		.cfi_def_cfa_offset 4
 4035 0002 83B0     		sub	sp, sp, #12
 4036              	.LCFI7:
 4037              		.cfi_def_cfa_offset 16
 4038 0004 00AF     		add	r7, sp, #0
 4039              		.cfi_offset 7, -4
 4040              	.LCFI8:
 4041              		.cfi_def_cfa_register 7
 4042 0006 7860     		str	r0, [r7, #4]
 231:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 4043              		.loc 81 231 0
 4044 0008 4FF00003 		mov	r3, #0
 232:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 4045              		.loc 81 232 0
 4046 000c 1846     		mov	r0, r3
 4047 000e 07F10C07 		add	r7, r7, #12
 4048 0012 BD46     		mov	sp, r7
 4049 0014 80BC     		pop	{r7}
 4050 0016 7047     		bx	lr
 4051              		.cfi_endproc
 4052              	.LFE540:
 4054              		.global	_ZN5Frame7Private9dummyByteE
 4055              		.section	.bss._ZN5Frame7Private9dummyByteE,"aw",%nobits
 4058              	_ZN5Frame7Private9dummyByteE:
 4059 0000 00       		.space	1
 4060              		.global	_ZN5Frame7Private9framePoolE
 4061              		.section	.bss._ZN5Frame7Private9framePoolE,"aw",%nobits
 4062              		.align	2
 4065              	_ZN5Frame7Private9framePoolE:
 4066 0000 00000000 		.space	4
 4067              		.section	.rodata
 4068              		.align	2
 4069              	.LC0:
 4070 0000 2E2E2F70 		.ascii	"../phy/frame.cpp\000"
 4070      68792F66 
 4070      72616D65 
 4070      2E637070 
 4070      00
 4071 0011 000000   		.align	2
 4072              	.LC1:
 4073 0014 50726976 		.ascii	"Private::framePool\000"
 4073      6174653A 
 4073      3A667261 
 4073      6D65506F 
 4073      6F6C00
 4074 0027 00       		.align	2
 4075              	.LC2:
 4076 0028 5F70496D 		.ascii	"_pImpl\000"
 4076      706C00
 4077              		.section	.text._ZN5FrameC2Ev,"ax",%progbits
 4078              		.align	2
 4079              		.global	_ZN5FrameC2Ev
 4080              		.thumb
 4081              		.thumb_func
 4083              	_ZN5FrameC2Ev:
 4084              	.LFB995:
   1:../phy/frame.cpp **** #include "Frame"
   2:../phy/frame.cpp **** #include <utils/ObjectPool>
   3:../phy/frame.cpp **** #include <new>
   4:../phy/frame.cpp **** #include <assert.h>
   5:../phy/frame.cpp **** 
   6:../phy/frame.cpp **** static const size_t MaximalFramePayloadSize = 32;	// The maximal frame payload for the PHY.
   7:../phy/frame.cpp **** 
   8:../phy/frame.cpp **** // Hidden data.
   9:../phy/frame.cpp **** class Frame::Private
  10:../phy/frame.cpp **** {
  11:../phy/frame.cpp **** public:
  12:../phy/frame.cpp **** 	FrameAddress address;							// The address of the frame.
  13:../phy/frame.cpp **** 	uint8_t payload[MaximalFramePayloadSize];		// The payload.
  14:../phy/frame.cpp **** 	size_t size;									// The actual size of the frame.
  15:../phy/frame.cpp **** 
  16:../phy/frame.cpp **** 	static uint8_t dummyByte;						// Dummy byte used to access on emergency.
  17:../phy/frame.cpp **** 
  18:../phy/frame.cpp **** 	static ObjectPool<Private> * framePool;			// The frame pool.
  19:../phy/frame.cpp **** };
  20:../phy/frame.cpp **** uint8_t Frame::Private::dummyByte;
  21:../phy/frame.cpp **** ObjectPool<Frame::Private> * Frame::Private::framePool;
  22:../phy/frame.cpp **** 
  23:../phy/frame.cpp **** 
  24:../phy/frame.cpp **** Frame::Frame() : _pImpl( NULL )
 4085              		.loc 1 24 0
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 8
 4088              		@ frame_needed = 1, uses_anonymous_args = 0
 4089 0000 80B5     		push	{r7, lr}
 4090              	.LCFI9:
 4091              		.cfi_def_cfa_offset 8
 4092 0002 82B0     		sub	sp, sp, #8
 4093              	.LCFI10:
 4094              		.cfi_def_cfa_offset 16
 4095 0004 00AF     		add	r7, sp, #0
 4096              		.cfi_offset 14, -4
 4097              		.cfi_offset 7, -8
 4098              	.LCFI11:
 4099              		.cfi_def_cfa_register 7
 4100 0006 7860     		str	r0, [r7, #4]
 4101              	.LBB2:
 4102              		.loc 1 24 0
 4103 0008 7B68     		ldr	r3, [r7, #4]
 4104 000a 294A     		ldr	r2, .L8
 4105 000c 1A60     		str	r2, [r3, #0]
 4106 000e 7B68     		ldr	r3, [r7, #4]
 4107 0010 4FF00002 		mov	r2, #0
 4108 0014 5A60     		str	r2, [r3, #4]
  25:../phy/frame.cpp **** {
  26:../phy/frame.cpp **** 	// Fail if the frame pool has not been initialized.
  27:../phy/frame.cpp **** 	assert( Private::framePool );
 4109              		.loc 1 27 0
 4110 0016 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4111 001a C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4112 001e 1B68     		ldr	r3, [r3, #0]
 4113 0020 002B     		cmp	r3, #0
 4114 0022 0FD1     		bne	.L5
 4115              		.loc 1 27 0 is_stmt 0 discriminator 1
 4116 0024 40F20000 		movw	r0, #:lower16:.LC0
 4117 0028 C0F20000 		movt	r0, #:upper16:.LC0
 4118 002c 4FF01B01 		mov	r1, #27
 4119 0030 40F20002 		movw	r2, #:lower16:_ZZN5FrameC1EvE19__PRETTY_FUNCTION__
 4120 0034 C0F20002 		movt	r2, #:upper16:_ZZN5FrameC1EvE19__PRETTY_FUNCTION__
 4121 0038 40F20003 		movw	r3, #:lower16:.LC1
 4122 003c C0F20003 		movt	r3, #:upper16:.LC1
 4123 0040 FFF7FEFF 		bl	__assert_func
 4124              	.L5:
  28:../phy/frame.cpp **** 	if ( Private::framePool )
 4125              		.loc 1 28 0 is_stmt 1
 4126 0044 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4127 0048 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4128 004c 1B68     		ldr	r3, [r3, #0]
 4129 004e 002B     		cmp	r3, #0
 4130 0050 27D0     		beq	.L6
  29:../phy/frame.cpp **** 	{
  30:../phy/frame.cpp **** 		// Allocate a new frame.
  31:../phy/frame.cpp **** 		_pImpl = Private::framePool->allocate();
 4131              		.loc 1 31 0
 4132 0052 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4133 0056 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4134 005a 1B68     		ldr	r3, [r3, #0]
 4135 005c 1846     		mov	r0, r3
 4136 005e FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv
 4137 0062 0246     		mov	r2, r0
 4138 0064 7B68     		ldr	r3, [r7, #4]
 4139 0066 5A60     		str	r2, [r3, #4]
  32:../phy/frame.cpp **** 
  33:../phy/frame.cpp **** 		// Fail if we could not create a new frame.
  34:../phy/frame.cpp **** 		assert( _pImpl );
 4140              		.loc 1 34 0
 4141 0068 7B68     		ldr	r3, [r7, #4]
 4142 006a 5B68     		ldr	r3, [r3, #4]
 4143 006c 002B     		cmp	r3, #0
 4144 006e 0FD1     		bne	.L7
 4145              		.loc 1 34 0 is_stmt 0 discriminator 1
 4146 0070 40F20000 		movw	r0, #:lower16:.LC0
 4147 0074 C0F20000 		movt	r0, #:upper16:.LC0
 4148 0078 4FF02201 		mov	r1, #34
 4149 007c 40F20002 		movw	r2, #:lower16:_ZZN5FrameC1EvE19__PRETTY_FUNCTION__
 4150 0080 C0F20002 		movt	r2, #:upper16:_ZZN5FrameC1EvE19__PRETTY_FUNCTION__
 4151 0084 40F20003 		movw	r3, #:lower16:.LC2
 4152 0088 C0F20003 		movt	r3, #:upper16:.LC2
 4153 008c FFF7FEFF 		bl	__assert_func
 4154              	.L7:
  35:../phy/frame.cpp **** 		if ( _pImpl ) _pImpl->size = 0;
 4155              		.loc 1 35 0 is_stmt 1
 4156 0090 7B68     		ldr	r3, [r7, #4]
 4157 0092 5B68     		ldr	r3, [r3, #4]
 4158 0094 002B     		cmp	r3, #0
 4159 0096 04D0     		beq	.L6
 4160              		.loc 1 35 0 is_stmt 0 discriminator 1
 4161 0098 7B68     		ldr	r3, [r7, #4]
 4162 009a 5B68     		ldr	r3, [r3, #4]
 4163 009c 4FF00002 		mov	r2, #0
 4164 00a0 9A62     		str	r2, [r3, #40]
 4165              	.L6:
 4166              	.LBE2:
  36:../phy/frame.cpp **** 	}
  37:../phy/frame.cpp **** }
 4167              		.loc 1 37 0 is_stmt 1
 4168 00a2 7B68     		ldr	r3, [r7, #4]
 4169 00a4 1846     		mov	r0, r3
 4170 00a6 07F10807 		add	r7, r7, #8
 4171 00aa BD46     		mov	sp, r7
 4172 00ac 80BD     		pop	{r7, pc}
 4173              	.L9:
 4174 00ae 00BF     		.align	2
 4175              	.L8:
 4176 00b0 08000000 		.word	_ZTV5Frame+8
 4177              		.cfi_endproc
 4178              	.LFE995:
 4180              		.global	_ZN5FrameC1Ev
 4181              		.thumb_set _ZN5FrameC1Ev,_ZN5FrameC2Ev
 4182              		.section	.text._ZN7AddressILj4EEaSERKS0_,"axG",%progbits,_ZN7AddressILj4EEaSERKS0_,comdat
 4183              		.align	2
 4184              		.weak	_ZN7AddressILj4EEaSERKS0_
 4185              		.thumb
 4186              		.thumb_func
 4188              	_ZN7AddressILj4EEaSERKS0_:
 4189              	.LFB998:
   1:/home/desem/workspace/desenet/utils/address.hpp **** #pragma once
   2:/home/desem/workspace/desenet/utils/address.hpp **** #include <cstring>
   3:/home/desem/workspace/desenet/utils/address.hpp **** #include <stdint.h>
   4:/home/desem/workspace/desenet/utils/address.hpp **** #include <algorithm>
   5:/home/desem/workspace/desenet/utils/address.hpp **** #include <string>
   6:/home/desem/workspace/desenet/utils/address.hpp **** #include <assert.h>
   7:/home/desem/workspace/desenet/utils/address.hpp **** #include <cstdio>
   8:/home/desem/workspace/desenet/utils/address.hpp **** #include <trace/Trace>
   9:/home/desem/workspace/desenet/utils/address.hpp **** 
  10:/home/desem/workspace/desenet/utils/address.hpp **** /**
  11:/home/desem/workspace/desenet/utils/address.hpp ****  * @defgroup utils Utils
  12:/home/desem/workspace/desenet/utils/address.hpp ****  * @brief Utility classes.
  13:/home/desem/workspace/desenet/utils/address.hpp ****  * @{
  14:/home/desem/workspace/desenet/utils/address.hpp ****  *
  15:/home/desem/workspace/desenet/utils/address.hpp ****  * @section utils_cd Class Diagram
  16:/home/desem/workspace/desenet/utils/address.hpp ****  * The Utils package contains classes that do not fit into other packages, so the classes inside th
  17:/home/desem/workspace/desenet/utils/address.hpp ****  * coupled that hard.
  18:/home/desem/workspace/desenet/utils/address.hpp ****  * @image html Utils.png
  19:/home/desem/workspace/desenet/utils/address.hpp ****  * The template class Address is a storage for any kind of address or id with a fixed size.
  20:/home/desem/workspace/desenet/utils/address.hpp ****  *
  21:/home/desem/workspace/desenet/utils/address.hpp ****  * The ObjectPool template offers a simple way to get objects of ANY kind from a pre-allocated poo
  22:/home/desem/workspace/desenet/utils/address.hpp ****  *
  23:/home/desem/workspace/desenet/utils/address.hpp ****  * The MonochromeDisplayPainter class enables transparent painting into monochrome displays, whatev
  24:/home/desem/workspace/desenet/utils/address.hpp ****  * drawing methods the display offers. This is handy to decoupe high-level code from the low-level 
  25:/home/desem/workspace/desenet/utils/address.hpp ****  * and offers the reuse of existing code.
  26:/home/desem/workspace/desenet/utils/address.hpp ****  */
  27:/home/desem/workspace/desenet/utils/address.hpp **** 
  28:/home/desem/workspace/desenet/utils/address.hpp **** 
  29:/home/desem/workspace/desenet/utils/address.hpp **** /**
  30:/home/desem/workspace/desenet/utils/address.hpp ****  * @brief Template class to use as a base for PHY/MAC/Network addresses or any other multi-byte ide
  31:/home/desem/workspace/desenet/utils/address.hpp ****  */
  32:/home/desem/workspace/desenet/utils/address.hpp **** template<size_t size>
  33:/home/desem/workspace/desenet/utils/address.hpp **** class Address
  34:/home/desem/workspace/desenet/utils/address.hpp **** {
 4190              		.loc 7 34 0
 4191              		.cfi_startproc
 4192              		@ args = 0, pretend = 0, frame = 8
 4193              		@ frame_needed = 1, uses_anonymous_args = 0
 4194              		@ link register save eliminated.
 4195 0000 80B4     		push	{r7}
 4196              	.LCFI12:
 4197              		.cfi_def_cfa_offset 4
 4198 0002 83B0     		sub	sp, sp, #12
 4199              	.LCFI13:
 4200              		.cfi_def_cfa_offset 16
 4201 0004 00AF     		add	r7, sp, #0
 4202              		.cfi_offset 7, -4
 4203              	.LCFI14:
 4204              		.cfi_def_cfa_register 7
 4205 0006 7860     		str	r0, [r7, #4]
 4206 0008 3960     		str	r1, [r7, #0]
 4207              		.loc 7 34 0
 4208 000a 7B68     		ldr	r3, [r7, #4]
 4209 000c 3A68     		ldr	r2, [r7, #0]
 4210 000e 5268     		ldr	r2, [r2, #4]
 4211 0010 5A60     		str	r2, [r3, #4]
 4212 0012 7B68     		ldr	r3, [r7, #4]
 4213 0014 1846     		mov	r0, r3
 4214 0016 07F10C07 		add	r7, r7, #12
 4215 001a BD46     		mov	sp, r7
 4216 001c 80BC     		pop	{r7}
 4217 001e 7047     		bx	lr
 4218              		.cfi_endproc
 4219              	.LFE998:
 4221              		.section	.text._ZN5FrameC2ERK7AddressILj4EEj,"ax",%progbits
 4222              		.align	2
 4223              		.global	_ZN5FrameC2ERK7AddressILj4EEj
 4224              		.thumb
 4225              		.thumb_func
 4227              	_ZN5FrameC2ERK7AddressILj4EEj:
 4228              	.LFB999:
  38:../phy/frame.cpp **** 
  39:../phy/frame.cpp **** Frame::Frame( const Frame::FrameAddress & address , size_t size ) : _pImpl( NULL )
 4229              		.loc 1 39 0
 4230              		.cfi_startproc
 4231              		@ args = 0, pretend = 0, frame = 16
 4232              		@ frame_needed = 1, uses_anonymous_args = 0
 4233 0000 90B5     		push	{r4, r7, lr}
 4234              	.LCFI15:
 4235              		.cfi_def_cfa_offset 12
 4236 0002 85B0     		sub	sp, sp, #20
 4237              	.LCFI16:
 4238              		.cfi_def_cfa_offset 32
 4239 0004 00AF     		add	r7, sp, #0
 4240              		.cfi_offset 14, -4
 4241              		.cfi_offset 7, -8
 4242              		.cfi_offset 4, -12
 4243              	.LCFI17:
 4244              		.cfi_def_cfa_register 7
 4245 0006 F860     		str	r0, [r7, #12]
 4246 0008 B960     		str	r1, [r7, #8]
 4247 000a 7A60     		str	r2, [r7, #4]
 4248              	.LBB3:
 4249              		.loc 1 39 0
 4250 000c FB68     		ldr	r3, [r7, #12]
 4251 000e 304A     		ldr	r2, .L15
 4252 0010 1A60     		str	r2, [r3, #0]
 4253 0012 FB68     		ldr	r3, [r7, #12]
 4254 0014 4FF00002 		mov	r2, #0
 4255 0018 5A60     		str	r2, [r3, #4]
  40:../phy/frame.cpp **** {
  41:../phy/frame.cpp **** 	// Fail if the frame pool has not been initialized.
  42:../phy/frame.cpp **** 	assert( Private::framePool );
 4256              		.loc 1 42 0
 4257 001a 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4258 001e C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4259 0022 1B68     		ldr	r3, [r3, #0]
 4260 0024 002B     		cmp	r3, #0
 4261 0026 0FD1     		bne	.L12
 4262              		.loc 1 42 0 is_stmt 0 discriminator 1
 4263 0028 40F20000 		movw	r0, #:lower16:.LC0
 4264 002c C0F20000 		movt	r0, #:upper16:.LC0
 4265 0030 4FF02A01 		mov	r1, #42
 4266 0034 40F20002 		movw	r2, #:lower16:_ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__
 4267 0038 C0F20002 		movt	r2, #:upper16:_ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__
 4268 003c 40F20003 		movw	r3, #:lower16:.LC1
 4269 0040 C0F20003 		movt	r3, #:upper16:.LC1
 4270 0044 FFF7FEFF 		bl	__assert_func
 4271              	.L12:
  43:../phy/frame.cpp **** 	if ( Private::framePool )
 4272              		.loc 1 43 0 is_stmt 1
 4273 0048 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4274 004c C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4275 0050 1B68     		ldr	r3, [r3, #0]
 4276 0052 002B     		cmp	r3, #0
 4277 0054 36D0     		beq	.L13
  44:../phy/frame.cpp **** 	{
  45:../phy/frame.cpp **** 		// Allocate a new frame.
  46:../phy/frame.cpp **** 		_pImpl = Private::framePool->allocate();
 4278              		.loc 1 46 0
 4279 0056 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4280 005a C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4281 005e 1B68     		ldr	r3, [r3, #0]
 4282 0060 1846     		mov	r0, r3
 4283 0062 FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv
 4284 0066 0246     		mov	r2, r0
 4285 0068 FB68     		ldr	r3, [r7, #12]
 4286 006a 5A60     		str	r2, [r3, #4]
  47:../phy/frame.cpp **** 
  48:../phy/frame.cpp **** 		// Fail if we could not create a new frame.
  49:../phy/frame.cpp **** 		assert( _pImpl );
 4287              		.loc 1 49 0
 4288 006c FB68     		ldr	r3, [r7, #12]
 4289 006e 5B68     		ldr	r3, [r3, #4]
 4290 0070 002B     		cmp	r3, #0
 4291 0072 0FD1     		bne	.L14
 4292              		.loc 1 49 0 is_stmt 0 discriminator 1
 4293 0074 40F20000 		movw	r0, #:lower16:.LC0
 4294 0078 C0F20000 		movt	r0, #:upper16:.LC0
 4295 007c 4FF03101 		mov	r1, #49
 4296 0080 40F20002 		movw	r2, #:lower16:_ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__
 4297 0084 C0F20002 		movt	r2, #:upper16:_ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__
 4298 0088 40F20003 		movw	r3, #:lower16:.LC2
 4299 008c C0F20003 		movt	r3, #:upper16:.LC2
 4300 0090 FFF7FEFF 		bl	__assert_func
 4301              	.L14:
  50:../phy/frame.cpp **** 		if ( _pImpl )
 4302              		.loc 1 50 0 is_stmt 1
 4303 0094 FB68     		ldr	r3, [r7, #12]
 4304 0096 5B68     		ldr	r3, [r3, #4]
 4305 0098 002B     		cmp	r3, #0
 4306 009a 13D0     		beq	.L13
  51:../phy/frame.cpp **** 		{
  52:../phy/frame.cpp **** 			// Setup address and size.
  53:../phy/frame.cpp **** 			_pImpl->address = address;
 4307              		.loc 1 53 0
 4308 009c FB68     		ldr	r3, [r7, #12]
 4309 009e 5B68     		ldr	r3, [r3, #4]
 4310 00a0 1846     		mov	r0, r3
 4311 00a2 B968     		ldr	r1, [r7, #8]
 4312 00a4 FFF7FEFF 		bl	_ZN7AddressILj4EEaSERKS0_
  54:../phy/frame.cpp **** 			_pImpl->size = std::min( size , MaximalFramePayloadSize );
 4313              		.loc 1 54 0
 4314 00a8 FB68     		ldr	r3, [r7, #12]
 4315 00aa 5C68     		ldr	r4, [r3, #4]
 4316 00ac 07F10403 		add	r3, r7, #4
 4317 00b0 1846     		mov	r0, r3
 4318 00b2 40F20001 		movw	r1, #:lower16:_ZL23MaximalFramePayloadSize
 4319 00b6 C0F20001 		movt	r1, #:upper16:_ZL23MaximalFramePayloadSize
 4320 00ba FFF7FEFF 		bl	_ZSt3minIjERKT_S2_S2_
 4321 00be 0346     		mov	r3, r0
 4322 00c0 1B68     		ldr	r3, [r3, #0]
 4323 00c2 A362     		str	r3, [r4, #40]
 4324              	.L13:
 4325              	.LBE3:
  55:../phy/frame.cpp **** 		}
  56:../phy/frame.cpp **** 	}
  57:../phy/frame.cpp **** }
 4326              		.loc 1 57 0
 4327 00c4 FB68     		ldr	r3, [r7, #12]
 4328 00c6 1846     		mov	r0, r3
 4329 00c8 07F11407 		add	r7, r7, #20
 4330 00cc BD46     		mov	sp, r7
 4331 00ce 90BD     		pop	{r4, r7, pc}
 4332              	.L16:
 4333              		.align	2
 4334              	.L15:
 4335 00d0 08000000 		.word	_ZTV5Frame+8
 4336              		.cfi_endproc
 4337              	.LFE999:
 4339              		.global	_ZN5FrameC1ERK7AddressILj4EEj
 4340              		.thumb_set _ZN5FrameC1ERK7AddressILj4EEj,_ZN5FrameC2ERK7AddressILj4EEj
 4341              		.section	.text._ZN5FrameC2ERK7AddressILj4EEPKvj,"ax",%progbits
 4342              		.align	2
 4343              		.global	_ZN5FrameC2ERK7AddressILj4EEPKvj
 4344              		.thumb
 4345              		.thumb_func
 4347              	_ZN5FrameC2ERK7AddressILj4EEPKvj:
 4348              	.LFB1002:
  58:../phy/frame.cpp **** 
  59:../phy/frame.cpp **** Frame::Frame( const Frame::FrameAddress & address , const void * const payload , size_t size  ) : _
 4349              		.loc 1 59 0
 4350              		.cfi_startproc
 4351              		@ args = 0, pretend = 0, frame = 16
 4352              		@ frame_needed = 1, uses_anonymous_args = 0
 4353 0000 90B5     		push	{r4, r7, lr}
 4354              	.LCFI18:
 4355              		.cfi_def_cfa_offset 12
 4356 0002 85B0     		sub	sp, sp, #20
 4357              	.LCFI19:
 4358              		.cfi_def_cfa_offset 32
 4359 0004 00AF     		add	r7, sp, #0
 4360              		.cfi_offset 14, -4
 4361              		.cfi_offset 7, -8
 4362              		.cfi_offset 4, -12
 4363              	.LCFI20:
 4364              		.cfi_def_cfa_register 7
 4365 0006 F860     		str	r0, [r7, #12]
 4366 0008 B960     		str	r1, [r7, #8]
 4367 000a 7A60     		str	r2, [r7, #4]
 4368 000c 3B60     		str	r3, [r7, #0]
 4369              	.LBB4:
 4370              		.loc 1 59 0
 4371 000e FB68     		ldr	r3, [r7, #12]
 4372 0010 384A     		ldr	r2, .L21
 4373 0012 1A60     		str	r2, [r3, #0]
 4374 0014 FB68     		ldr	r3, [r7, #12]
 4375 0016 4FF00002 		mov	r2, #0
 4376 001a 5A60     		str	r2, [r3, #4]
  60:../phy/frame.cpp **** {
  61:../phy/frame.cpp **** 	// Fail if the frame pool has not been initialized.
  62:../phy/frame.cpp **** 	assert( Private::framePool );
 4377              		.loc 1 62 0
 4378 001c 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4379 0020 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4380 0024 1B68     		ldr	r3, [r3, #0]
 4381 0026 002B     		cmp	r3, #0
 4382 0028 0FD1     		bne	.L18
 4383              		.loc 1 62 0 is_stmt 0 discriminator 1
 4384 002a 40F20000 		movw	r0, #:lower16:.LC0
 4385 002e C0F20000 		movt	r0, #:upper16:.LC0
 4386 0032 4FF03E01 		mov	r1, #62
 4387 0036 40F20002 		movw	r2, #:lower16:_ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__
 4388 003a C0F20002 		movt	r2, #:upper16:_ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__
 4389 003e 40F20003 		movw	r3, #:lower16:.LC1
 4390 0042 C0F20003 		movt	r3, #:upper16:.LC1
 4391 0046 FFF7FEFF 		bl	__assert_func
 4392              	.L18:
  63:../phy/frame.cpp **** 	if ( Private::framePool )
 4393              		.loc 1 63 0 is_stmt 1
 4394 004a 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4395 004e C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4396 0052 1B68     		ldr	r3, [r3, #0]
 4397 0054 002B     		cmp	r3, #0
 4398 0056 47D0     		beq	.L19
  64:../phy/frame.cpp **** 	{
  65:../phy/frame.cpp **** 		// Allocate a new frame.
  66:../phy/frame.cpp **** 		_pImpl = Private::framePool->allocate();
 4399              		.loc 1 66 0
 4400 0058 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4401 005c C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4402 0060 1B68     		ldr	r3, [r3, #0]
 4403 0062 1846     		mov	r0, r3
 4404 0064 FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv
 4405 0068 0246     		mov	r2, r0
 4406 006a FB68     		ldr	r3, [r7, #12]
 4407 006c 5A60     		str	r2, [r3, #4]
  67:../phy/frame.cpp **** 
  68:../phy/frame.cpp **** 		// Fail if we could not create a new frame.
  69:../phy/frame.cpp **** 		assert( _pImpl );
 4408              		.loc 1 69 0
 4409 006e FB68     		ldr	r3, [r7, #12]
 4410 0070 5B68     		ldr	r3, [r3, #4]
 4411 0072 002B     		cmp	r3, #0
 4412 0074 0FD1     		bne	.L20
 4413              		.loc 1 69 0 is_stmt 0 discriminator 1
 4414 0076 40F20000 		movw	r0, #:lower16:.LC0
 4415 007a C0F20000 		movt	r0, #:upper16:.LC0
 4416 007e 4FF04501 		mov	r1, #69
 4417 0082 40F20002 		movw	r2, #:lower16:_ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__
 4418 0086 C0F20002 		movt	r2, #:upper16:_ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__
 4419 008a 40F20003 		movw	r3, #:lower16:.LC2
 4420 008e C0F20003 		movt	r3, #:upper16:.LC2
 4421 0092 FFF7FEFF 		bl	__assert_func
 4422              	.L20:
  70:../phy/frame.cpp **** 		if ( _pImpl )
 4423              		.loc 1 70 0 is_stmt 1
 4424 0096 FB68     		ldr	r3, [r7, #12]
 4425 0098 5B68     		ldr	r3, [r3, #4]
 4426 009a 002B     		cmp	r3, #0
 4427 009c 24D0     		beq	.L19
  71:../phy/frame.cpp **** 		{
  72:../phy/frame.cpp **** 			// Setup address and size and copy payload from the memory region.
  73:../phy/frame.cpp **** 			_pImpl->address = address;
 4428              		.loc 1 73 0
 4429 009e FB68     		ldr	r3, [r7, #12]
 4430 00a0 5B68     		ldr	r3, [r3, #4]
 4431 00a2 1846     		mov	r0, r3
 4432 00a4 B968     		ldr	r1, [r7, #8]
 4433 00a6 FFF7FEFF 		bl	_ZN7AddressILj4EEaSERKS0_
  74:../phy/frame.cpp **** 			_pImpl->size = std::min( size , MaximalFramePayloadSize );
 4434              		.loc 1 74 0
 4435 00aa FB68     		ldr	r3, [r7, #12]
 4436 00ac 5C68     		ldr	r4, [r3, #4]
 4437 00ae 3B46     		mov	r3, r7
 4438 00b0 1846     		mov	r0, r3
 4439 00b2 40F20001 		movw	r1, #:lower16:_ZL23MaximalFramePayloadSize
 4440 00b6 C0F20001 		movt	r1, #:upper16:_ZL23MaximalFramePayloadSize
 4441 00ba FFF7FEFF 		bl	_ZSt3minIjERKT_S2_S2_
 4442 00be 0346     		mov	r3, r0
 4443 00c0 1B68     		ldr	r3, [r3, #0]
 4444 00c2 A362     		str	r3, [r4, #40]
  75:../phy/frame.cpp **** 
  76:../phy/frame.cpp **** 			if ( payload && size ) memcpy( _pImpl->payload , payload , _pImpl->size );
 4445              		.loc 1 76 0
 4446 00c4 7B68     		ldr	r3, [r7, #4]
 4447 00c6 002B     		cmp	r3, #0
 4448 00c8 0ED0     		beq	.L19
 4449              		.loc 1 76 0 is_stmt 0 discriminator 1
 4450 00ca 3B68     		ldr	r3, [r7, #0]
 4451 00cc 002B     		cmp	r3, #0
 4452 00ce 0BD0     		beq	.L19
 4453              		.loc 1 76 0 discriminator 2
 4454 00d0 FB68     		ldr	r3, [r7, #12]
 4455 00d2 5B68     		ldr	r3, [r3, #4]
 4456 00d4 03F10802 		add	r2, r3, #8
 4457 00d8 FB68     		ldr	r3, [r7, #12]
 4458 00da 5B68     		ldr	r3, [r3, #4]
 4459 00dc 9B6A     		ldr	r3, [r3, #40]
 4460 00de 1046     		mov	r0, r2
 4461 00e0 7968     		ldr	r1, [r7, #4]
 4462 00e2 1A46     		mov	r2, r3
 4463 00e4 FFF7FEFF 		bl	memcpy
 4464              	.L19:
 4465              	.LBE4:
  77:../phy/frame.cpp **** 		}
  78:../phy/frame.cpp **** 	}
  79:../phy/frame.cpp **** }
 4466              		.loc 1 79 0 is_stmt 1
 4467 00e8 FB68     		ldr	r3, [r7, #12]
 4468 00ea 1846     		mov	r0, r3
 4469 00ec 07F11407 		add	r7, r7, #20
 4470 00f0 BD46     		mov	sp, r7
 4471 00f2 90BD     		pop	{r4, r7, pc}
 4472              	.L22:
 4473              		.align	2
 4474              	.L21:
 4475 00f4 08000000 		.word	_ZTV5Frame+8
 4476              		.cfi_endproc
 4477              	.LFE1002:
 4479              		.global	_ZN5FrameC1ERK7AddressILj4EEPKvj
 4480              		.thumb_set _ZN5FrameC1ERK7AddressILj4EEPKvj,_ZN5FrameC2ERK7AddressILj4EEPKvj
 4481              		.section	.text._ZN5FrameC2ERK7AddressILj4EERKSt6vectorIhSaIhEE,"ax",%progbits
 4482              		.align	2
 4483              		.global	_ZN5FrameC2ERK7AddressILj4EERKSt6vectorIhSaIhEE
 4484              		.thumb
 4485              		.thumb_func
 4487              	_ZN5FrameC2ERK7AddressILj4EERKSt6vectorIhSaIhEE:
 4488              	.LFB1005:
  80:../phy/frame.cpp **** 
  81:../phy/frame.cpp **** Frame::Frame( const Frame::FrameAddress & address , const std::vector<uint8_t> & payload ) : _pImpl
 4489              		.loc 1 81 0
 4490              		.cfi_startproc
 4491              		@ args = 0, pretend = 0, frame = 24
 4492              		@ frame_needed = 1, uses_anonymous_args = 0
 4493 0000 90B5     		push	{r4, r7, lr}
 4494              	.LCFI21:
 4495              		.cfi_def_cfa_offset 12
 4496 0002 87B0     		sub	sp, sp, #28
 4497              	.LCFI22:
 4498              		.cfi_def_cfa_offset 40
 4499 0004 00AF     		add	r7, sp, #0
 4500              		.cfi_offset 14, -4
 4501              		.cfi_offset 7, -8
 4502              		.cfi_offset 4, -12
 4503              	.LCFI23:
 4504              		.cfi_def_cfa_register 7
 4505 0006 F860     		str	r0, [r7, #12]
 4506 0008 B960     		str	r1, [r7, #8]
 4507 000a 7A60     		str	r2, [r7, #4]
 4508              	.LBB5:
 4509              		.loc 1 81 0
 4510 000c FB68     		ldr	r3, [r7, #12]
 4511 000e 404A     		ldr	r2, .L27
 4512 0010 1A60     		str	r2, [r3, #0]
 4513 0012 FB68     		ldr	r3, [r7, #12]
 4514 0014 4FF00002 		mov	r2, #0
 4515 0018 5A60     		str	r2, [r3, #4]
  82:../phy/frame.cpp **** {
  83:../phy/frame.cpp **** 	// Fail if the frame pool has not been initialized.
  84:../phy/frame.cpp **** 	assert( Private::framePool );
 4516              		.loc 1 84 0
 4517 001a 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4518 001e C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4519 0022 1B68     		ldr	r3, [r3, #0]
 4520 0024 002B     		cmp	r3, #0
 4521 0026 0FD1     		bne	.L24
 4522              		.loc 1 84 0 is_stmt 0 discriminator 1
 4523 0028 40F20000 		movw	r0, #:lower16:.LC0
 4524 002c C0F20000 		movt	r0, #:upper16:.LC0
 4525 0030 4FF05401 		mov	r1, #84
 4526 0034 40F20002 		movw	r2, #:lower16:_ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__
 4527 0038 C0F20002 		movt	r2, #:upper16:_ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__
 4528 003c 40F20003 		movw	r3, #:lower16:.LC1
 4529 0040 C0F20003 		movt	r3, #:upper16:.LC1
 4530 0044 FFF7FEFF 		bl	__assert_func
 4531              	.L24:
  85:../phy/frame.cpp **** 	if ( Private::framePool )
 4532              		.loc 1 85 0 is_stmt 1
 4533 0048 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4534 004c C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4535 0050 1B68     		ldr	r3, [r3, #0]
 4536 0052 002B     		cmp	r3, #0
 4537 0054 56D0     		beq	.L25
  86:../phy/frame.cpp **** 	{
  87:../phy/frame.cpp **** 		// Allocate a new frame.
  88:../phy/frame.cpp **** 		_pImpl = Private::framePool->allocate();
 4538              		.loc 1 88 0
 4539 0056 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4540 005a C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4541 005e 1B68     		ldr	r3, [r3, #0]
 4542 0060 1846     		mov	r0, r3
 4543 0062 FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv
 4544 0066 0246     		mov	r2, r0
 4545 0068 FB68     		ldr	r3, [r7, #12]
 4546 006a 5A60     		str	r2, [r3, #4]
  89:../phy/frame.cpp **** 
  90:../phy/frame.cpp **** 		// Fail if we could not create a new frame.
  91:../phy/frame.cpp **** 		assert( _pImpl );
 4547              		.loc 1 91 0
 4548 006c FB68     		ldr	r3, [r7, #12]
 4549 006e 5B68     		ldr	r3, [r3, #4]
 4550 0070 002B     		cmp	r3, #0
 4551 0072 0FD1     		bne	.L26
 4552              		.loc 1 91 0 is_stmt 0 discriminator 1
 4553 0074 40F20000 		movw	r0, #:lower16:.LC0
 4554 0078 C0F20000 		movt	r0, #:upper16:.LC0
 4555 007c 4FF05B01 		mov	r1, #91
 4556 0080 40F20002 		movw	r2, #:lower16:_ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__
 4557 0084 C0F20002 		movt	r2, #:upper16:_ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__
 4558 0088 40F20003 		movw	r3, #:lower16:.LC2
 4559 008c C0F20003 		movt	r3, #:upper16:.LC2
 4560 0090 FFF7FEFF 		bl	__assert_func
 4561              	.L26:
  92:../phy/frame.cpp **** 		if ( _pImpl )
 4562              		.loc 1 92 0 is_stmt 1
 4563 0094 FB68     		ldr	r3, [r7, #12]
 4564 0096 5B68     		ldr	r3, [r3, #4]
 4565 0098 002B     		cmp	r3, #0
 4566 009a 33D0     		beq	.L25
  93:../phy/frame.cpp **** 		{
  94:../phy/frame.cpp **** 			// Setup address and size and copy payload from the vector.
  95:../phy/frame.cpp **** 			_pImpl->address = address;
 4567              		.loc 1 95 0
 4568 009c FB68     		ldr	r3, [r7, #12]
 4569 009e 5B68     		ldr	r3, [r3, #4]
 4570 00a0 1846     		mov	r0, r3
 4571 00a2 B968     		ldr	r1, [r7, #8]
 4572 00a4 FFF7FEFF 		bl	_ZN7AddressILj4EEaSERKS0_
  96:../phy/frame.cpp **** 			_pImpl->size = std::min( payload.size() , MaximalFramePayloadSize );
 4573              		.loc 1 96 0
 4574 00a8 FB68     		ldr	r3, [r7, #12]
 4575 00aa 5C68     		ldr	r4, [r3, #4]
 4576 00ac 7868     		ldr	r0, [r7, #4]
 4577 00ae FFF7FEFF 		bl	_ZNKSt6vectorIhSaIhEE4sizeEv
 4578 00b2 0346     		mov	r3, r0
 4579 00b4 7B61     		str	r3, [r7, #20]
 4580 00b6 07F11403 		add	r3, r7, #20
 4581 00ba 1846     		mov	r0, r3
 4582 00bc 40F20001 		movw	r1, #:lower16:_ZL23MaximalFramePayloadSize
 4583 00c0 C0F20001 		movt	r1, #:upper16:_ZL23MaximalFramePayloadSize
 4584 00c4 FFF7FEFF 		bl	_ZSt3minIjERKT_S2_S2_
 4585 00c8 0346     		mov	r3, r0
 4586 00ca 1B68     		ldr	r3, [r3, #0]
 4587 00cc A362     		str	r3, [r4, #40]
  97:../phy/frame.cpp **** 			if ( payload.size() ) memcpy( _pImpl->payload , payload.data() , _pImpl->size );
 4588              		.loc 1 97 0
 4589 00ce 7868     		ldr	r0, [r7, #4]
 4590 00d0 FFF7FEFF 		bl	_ZNKSt6vectorIhSaIhEE4sizeEv
 4591 00d4 0346     		mov	r3, r0
 4592 00d6 002B     		cmp	r3, #0
 4593 00d8 0CBF     		ite	eq
 4594 00da 0023     		moveq	r3, #0
 4595 00dc 0123     		movne	r3, #1
 4596 00de DBB2     		uxtb	r3, r3
 4597 00e0 002B     		cmp	r3, #0
 4598 00e2 0FD0     		beq	.L25
 4599              		.loc 1 97 0 is_stmt 0 discriminator 1
 4600 00e4 FB68     		ldr	r3, [r7, #12]
 4601 00e6 5B68     		ldr	r3, [r3, #4]
 4602 00e8 03F10804 		add	r4, r3, #8
 4603 00ec 7868     		ldr	r0, [r7, #4]
 4604 00ee FFF7FEFF 		bl	_ZNKSt6vectorIhSaIhEE4dataEv
 4605 00f2 0246     		mov	r2, r0
 4606 00f4 FB68     		ldr	r3, [r7, #12]
 4607 00f6 5B68     		ldr	r3, [r3, #4]
 4608 00f8 9B6A     		ldr	r3, [r3, #40]
 4609 00fa 2046     		mov	r0, r4
 4610 00fc 1146     		mov	r1, r2
 4611 00fe 1A46     		mov	r2, r3
 4612 0100 FFF7FEFF 		bl	memcpy
 4613              	.L25:
 4614              	.LBE5:
  98:../phy/frame.cpp **** 		}
  99:../phy/frame.cpp **** 	}
 100:../phy/frame.cpp **** }
 4615              		.loc 1 100 0 is_stmt 1
 4616 0104 FB68     		ldr	r3, [r7, #12]
 4617 0106 1846     		mov	r0, r3
 4618 0108 07F11C07 		add	r7, r7, #28
 4619 010c BD46     		mov	sp, r7
 4620 010e 90BD     		pop	{r4, r7, pc}
 4621              	.L28:
 4622              		.align	2
 4623              	.L27:
 4624 0110 08000000 		.word	_ZTV5Frame+8
 4625              		.cfi_endproc
 4626              	.LFE1005:
 4628              		.global	_ZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEE
 4629              		.thumb_set _ZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEE,_ZN5FrameC2ERK7AddressILj4EERKSt6vector
 4630              		.section	.text._ZN5FrameD2Ev,"ax",%progbits
 4631              		.align	2
 4632              		.global	_ZN5FrameD2Ev
 4633              		.thumb
 4634              		.thumb_func
 4636              	_ZN5FrameD2Ev:
 4637              	.LFB1008:
 101:../phy/frame.cpp **** 
 102:../phy/frame.cpp **** Frame::~Frame()
 4638              		.loc 1 102 0
 4639              		.cfi_startproc
 4640              		@ args = 0, pretend = 0, frame = 8
 4641              		@ frame_needed = 1, uses_anonymous_args = 0
 4642 0000 80B5     		push	{r7, lr}
 4643              	.LCFI24:
 4644              		.cfi_def_cfa_offset 8
 4645 0002 82B0     		sub	sp, sp, #8
 4646              	.LCFI25:
 4647              		.cfi_def_cfa_offset 16
 4648 0004 00AF     		add	r7, sp, #0
 4649              		.cfi_offset 14, -4
 4650              		.cfi_offset 7, -8
 4651              	.LCFI26:
 4652              		.cfi_def_cfa_register 7
 4653 0006 7860     		str	r0, [r7, #4]
 4654              	.LBB6:
 4655              		.loc 1 102 0
 4656 0008 7B68     		ldr	r3, [r7, #4]
 4657 000a 124A     		ldr	r2, .L32
 4658 000c 1A60     		str	r2, [r3, #0]
 103:../phy/frame.cpp **** {
 104:../phy/frame.cpp **** 	// Release the frame.
 105:../phy/frame.cpp **** 	if ( Private::framePool )
 4659              		.loc 1 105 0
 4660 000e 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4661 0012 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4662 0016 1B68     		ldr	r3, [r3, #0]
 4663 0018 002B     		cmp	r3, #0
 4664 001a 0AD0     		beq	.L30
 106:../phy/frame.cpp **** 		Private::framePool->release( _pImpl );
 4665              		.loc 1 106 0
 4666 001c 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4667 0020 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4668 0024 1A68     		ldr	r2, [r3, #0]
 4669 0026 7B68     		ldr	r3, [r7, #4]
 4670 0028 5B68     		ldr	r3, [r3, #4]
 4671 002a 1046     		mov	r0, r2
 4672 002c 1946     		mov	r1, r3
 4673 002e FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_
 4674              	.L30:
 4675              	.LBE6:
 107:../phy/frame.cpp **** }
 4676              		.loc 1 107 0
 4677 0032 4FF00003 		mov	r3, #0
 4678 0036 03F00103 		and	r3, r3, #1
 4679 003a DBB2     		uxtb	r3, r3
 4680 003c 002B     		cmp	r3, #0
 4681 003e 02D0     		beq	.L31
 4682              		.loc 1 107 0 is_stmt 0 discriminator 1
 4683 0040 7868     		ldr	r0, [r7, #4]
 4684 0042 FFF7FEFF 		bl	_ZdlPv
 4685              	.L31:
 4686              		.loc 1 107 0 discriminator 2
 4687 0046 7B68     		ldr	r3, [r7, #4]
 4688 0048 1846     		mov	r0, r3
 4689 004a 07F10807 		add	r7, r7, #8
 4690 004e BD46     		mov	sp, r7
 4691 0050 80BD     		pop	{r7, pc}
 4692              	.L33:
 4693 0052 00BF     		.align	2
 4694              	.L32:
 4695 0054 08000000 		.word	_ZTV5Frame+8
 4696              		.cfi_endproc
 4697              	.LFE1008:
 4699              		.global	_ZN5FrameD1Ev
 4700              		.thumb_set _ZN5FrameD1Ev,_ZN5FrameD2Ev
 4701              		.section	.text._ZN5FrameD0Ev,"ax",%progbits
 4702              		.align	2
 4703              		.global	_ZN5FrameD0Ev
 4704              		.thumb
 4705              		.thumb_func
 4707              	_ZN5FrameD0Ev:
 4708              	.LFB1010:
 102:../phy/frame.cpp **** Frame::~Frame()
 4709              		.loc 1 102 0 is_stmt 1
 4710              		.cfi_startproc
 4711              		@ args = 0, pretend = 0, frame = 8
 4712              		@ frame_needed = 1, uses_anonymous_args = 0
 4713 0000 80B5     		push	{r7, lr}
 4714              	.LCFI27:
 4715              		.cfi_def_cfa_offset 8
 4716 0002 82B0     		sub	sp, sp, #8
 4717              	.LCFI28:
 4718              		.cfi_def_cfa_offset 16
 4719 0004 00AF     		add	r7, sp, #0
 4720              		.cfi_offset 14, -4
 4721              		.cfi_offset 7, -8
 4722              	.LCFI29:
 4723              		.cfi_def_cfa_register 7
 4724 0006 7860     		str	r0, [r7, #4]
 4725              		.loc 1 107 0
 4726 0008 7868     		ldr	r0, [r7, #4]
 4727 000a FFF7FEFF 		bl	_ZN5FrameD1Ev
 4728 000e 7868     		ldr	r0, [r7, #4]
 4729 0010 FFF7FEFF 		bl	_ZdlPv
 4730 0014 7B68     		ldr	r3, [r7, #4]
 4731 0016 1846     		mov	r0, r3
 4732 0018 07F10807 		add	r7, r7, #8
 4733 001c BD46     		mov	sp, r7
 4734 001e 80BD     		pop	{r7, pc}
 4735              		.cfi_endproc
 4736              	.LFE1010:
 4738              		.section	.text._ZN5FrameC2ERKS_,"ax",%progbits
 4739              		.align	2
 4740              		.global	_ZN5FrameC2ERKS_
 4741              		.thumb
 4742              		.thumb_func
 4744              	_ZN5FrameC2ERKS_:
 4745              	.LFB1012:
 108:../phy/frame.cpp **** 
 109:../phy/frame.cpp **** Frame::Frame( const Frame & other ) : _pImpl( NULL )
 4746              		.loc 1 109 0
 4747              		.cfi_startproc
 4748              		@ args = 0, pretend = 0, frame = 8
 4749              		@ frame_needed = 1, uses_anonymous_args = 0
 4750 0000 80B5     		push	{r7, lr}
 4751              	.LCFI30:
 4752              		.cfi_def_cfa_offset 8
 4753 0002 82B0     		sub	sp, sp, #8
 4754              	.LCFI31:
 4755              		.cfi_def_cfa_offset 16
 4756 0004 00AF     		add	r7, sp, #0
 4757              		.cfi_offset 14, -4
 4758              		.cfi_offset 7, -8
 4759              	.LCFI32:
 4760              		.cfi_def_cfa_register 7
 4761 0006 7860     		str	r0, [r7, #4]
 4762 0008 3960     		str	r1, [r7, #0]
 4763              	.LBB7:
 4764              		.loc 1 109 0
 4765 000a 7B68     		ldr	r3, [r7, #4]
 4766 000c 164A     		ldr	r2, .L39
 4767 000e 1A60     		str	r2, [r3, #0]
 4768 0010 7B68     		ldr	r3, [r7, #4]
 4769 0012 4FF00002 		mov	r2, #0
 4770 0016 5A60     		str	r2, [r3, #4]
 110:../phy/frame.cpp **** {
 111:../phy/frame.cpp **** 	// Release current frame.
 112:../phy/frame.cpp **** 	if ( _pImpl )
 4771              		.loc 1 112 0
 4772 0018 7B68     		ldr	r3, [r7, #4]
 4773 001a 5B68     		ldr	r3, [r3, #4]
 4774 001c 002B     		cmp	r3, #0
 4775 001e 0AD0     		beq	.L37
 113:../phy/frame.cpp **** 		Private::framePool->release( _pImpl );
 4776              		.loc 1 113 0
 4777 0020 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4778 0024 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4779 0028 1A68     		ldr	r2, [r3, #0]
 4780 002a 7B68     		ldr	r3, [r7, #4]
 4781 002c 5B68     		ldr	r3, [r3, #4]
 4782 002e 1046     		mov	r0, r2
 4783 0030 1946     		mov	r1, r3
 4784 0032 FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_
 4785              	.L37:
 114:../phy/frame.cpp **** 
 115:../phy/frame.cpp **** 	// Copy the pointer to the other frame.
 116:../phy/frame.cpp **** 	_pImpl = other._pImpl;
 4786              		.loc 1 116 0
 4787 0036 3B68     		ldr	r3, [r7, #0]
 4788 0038 5A68     		ldr	r2, [r3, #4]
 4789 003a 7B68     		ldr	r3, [r7, #4]
 4790 003c 5A60     		str	r2, [r3, #4]
 117:../phy/frame.cpp **** 
 118:../phy/frame.cpp **** 	// Retain (increment reference count) for the given frame.
 119:../phy/frame.cpp **** 	if ( _pImpl )
 4791              		.loc 1 119 0
 4792 003e 7B68     		ldr	r3, [r7, #4]
 4793 0040 5B68     		ldr	r3, [r3, #4]
 4794 0042 002B     		cmp	r3, #0
 4795 0044 0AD0     		beq	.L38
 120:../phy/frame.cpp **** 		Private::framePool->retain( _pImpl );
 4796              		.loc 1 120 0
 4797 0046 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4798 004a C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4799 004e 1A68     		ldr	r2, [r3, #0]
 4800 0050 7B68     		ldr	r3, [r7, #4]
 4801 0052 5B68     		ldr	r3, [r3, #4]
 4802 0054 1046     		mov	r0, r2
 4803 0056 1946     		mov	r1, r3
 4804 0058 FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_
 4805              	.L38:
 4806              	.LBE7:
 121:../phy/frame.cpp **** }
 4807              		.loc 1 121 0
 4808 005c 7B68     		ldr	r3, [r7, #4]
 4809 005e 1846     		mov	r0, r3
 4810 0060 07F10807 		add	r7, r7, #8
 4811 0064 BD46     		mov	sp, r7
 4812 0066 80BD     		pop	{r7, pc}
 4813              	.L40:
 4814              		.align	2
 4815              	.L39:
 4816 0068 08000000 		.word	_ZTV5Frame+8
 4817              		.cfi_endproc
 4818              	.LFE1012:
 4820              		.global	_ZN5FrameC1ERKS_
 4821              		.thumb_set _ZN5FrameC1ERKS_,_ZN5FrameC2ERKS_
 4822              		.section	.text._ZN5FrameaSERKS_,"ax",%progbits
 4823              		.align	2
 4824              		.global	_ZN5FrameaSERKS_
 4825              		.thumb
 4826              		.thumb_func
 4828              	_ZN5FrameaSERKS_:
 4829              	.LFB1014:
 122:../phy/frame.cpp **** 
 123:../phy/frame.cpp **** const Frame & Frame::operator=( const Frame & other )
 124:../phy/frame.cpp **** {
 4830              		.loc 1 124 0
 4831              		.cfi_startproc
 4832              		@ args = 0, pretend = 0, frame = 8
 4833              		@ frame_needed = 1, uses_anonymous_args = 0
 4834 0000 80B5     		push	{r7, lr}
 4835              	.LCFI33:
 4836              		.cfi_def_cfa_offset 8
 4837 0002 82B0     		sub	sp, sp, #8
 4838              	.LCFI34:
 4839              		.cfi_def_cfa_offset 16
 4840 0004 00AF     		add	r7, sp, #0
 4841              		.cfi_offset 14, -4
 4842              		.cfi_offset 7, -8
 4843              	.LCFI35:
 4844              		.cfi_def_cfa_register 7
 4845 0006 7860     		str	r0, [r7, #4]
 4846 0008 3960     		str	r1, [r7, #0]
 125:../phy/frame.cpp **** 	// I will not copy myself into myself!
 126:../phy/frame.cpp **** 	if ( this != &other )
 4847              		.loc 1 126 0
 4848 000a 7A68     		ldr	r2, [r7, #4]
 4849 000c 3B68     		ldr	r3, [r7, #0]
 4850 000e 9A42     		cmp	r2, r3
 4851 0010 21D0     		beq	.L42
 127:../phy/frame.cpp **** 	{
 128:../phy/frame.cpp **** 		// Release current frame.
 129:../phy/frame.cpp **** 		if ( _pImpl )
 4852              		.loc 1 129 0
 4853 0012 7B68     		ldr	r3, [r7, #4]
 4854 0014 5B68     		ldr	r3, [r3, #4]
 4855 0016 002B     		cmp	r3, #0
 4856 0018 0AD0     		beq	.L43
 130:../phy/frame.cpp **** 			Private::framePool->release( _pImpl );
 4857              		.loc 1 130 0
 4858 001a 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4859 001e C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4860 0022 1A68     		ldr	r2, [r3, #0]
 4861 0024 7B68     		ldr	r3, [r7, #4]
 4862 0026 5B68     		ldr	r3, [r3, #4]
 4863 0028 1046     		mov	r0, r2
 4864 002a 1946     		mov	r1, r3
 4865 002c FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_
 4866              	.L43:
 131:../phy/frame.cpp **** 
 132:../phy/frame.cpp **** 		// Copy the pointer to the other frame.
 133:../phy/frame.cpp **** 		_pImpl = other._pImpl;
 4867              		.loc 1 133 0
 4868 0030 3B68     		ldr	r3, [r7, #0]
 4869 0032 5A68     		ldr	r2, [r3, #4]
 4870 0034 7B68     		ldr	r3, [r7, #4]
 4871 0036 5A60     		str	r2, [r3, #4]
 134:../phy/frame.cpp **** 
 135:../phy/frame.cpp **** 		// Retain (increment reference count) for the given frame.
 136:../phy/frame.cpp **** 		if ( _pImpl )
 4872              		.loc 1 136 0
 4873 0038 7B68     		ldr	r3, [r7, #4]
 4874 003a 5B68     		ldr	r3, [r3, #4]
 4875 003c 002B     		cmp	r3, #0
 4876 003e 0AD0     		beq	.L42
 137:../phy/frame.cpp **** 			Private::framePool->retain( _pImpl );
 4877              		.loc 1 137 0
 4878 0040 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 4879 0044 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 4880 0048 1A68     		ldr	r2, [r3, #0]
 4881 004a 7B68     		ldr	r3, [r7, #4]
 4882 004c 5B68     		ldr	r3, [r3, #4]
 4883 004e 1046     		mov	r0, r2
 4884 0050 1946     		mov	r1, r3
 4885 0052 FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_
 4886              	.L42:
 138:../phy/frame.cpp **** 	}
 139:../phy/frame.cpp **** 
 140:../phy/frame.cpp **** 	return *this;
 4887              		.loc 1 140 0
 4888 0056 7B68     		ldr	r3, [r7, #4]
 141:../phy/frame.cpp **** }
 4889              		.loc 1 141 0
 4890 0058 1846     		mov	r0, r3
 4891 005a 07F10807 		add	r7, r7, #8
 4892 005e BD46     		mov	sp, r7
 4893 0060 80BD     		pop	{r7, pc}
 4894              		.cfi_endproc
 4895              	.LFE1014:
 4897 0062 00BF     		.section	.rodata
 4898 002f 00       		.align	2
 4899              	.LC3:
 4900 0030 5F70496D 		.ascii	"_pImpl && copy._pImpl\000"
 4900      706C2026 
 4900      2620636F 
 4900      70792E5F 
 4900      70496D70 
 4901              		.section	.text._ZN5Frame8deepCopyEv,"ax",%progbits
 4902              		.align	2
 4903              		.global	_ZN5Frame8deepCopyEv
 4904              		.thumb
 4905              		.thumb_func
 4907              	_ZN5Frame8deepCopyEv:
 4908              	.LFB1015:
 142:../phy/frame.cpp **** 
 143:../phy/frame.cpp **** Frame Frame::deepCopy()
 144:../phy/frame.cpp **** {
 4909              		.loc 1 144 0
 4910              		.cfi_startproc
 4911              		@ args = 0, pretend = 0, frame = 16
 4912              		@ frame_needed = 1, uses_anonymous_args = 0
 4913 0000 90B5     		push	{r4, r7, lr}
 4914              	.LCFI36:
 4915              		.cfi_def_cfa_offset 12
 4916 0002 85B0     		sub	sp, sp, #20
 4917              	.LCFI37:
 4918              		.cfi_def_cfa_offset 32
 4919 0004 00AF     		add	r7, sp, #0
 4920              		.cfi_offset 14, -4
 4921              		.cfi_offset 7, -8
 4922              		.cfi_offset 4, -12
 4923              	.LCFI38:
 4924              		.cfi_def_cfa_register 7
 4925 0006 0446     		mov	r4, r0
 4926 0008 7960     		str	r1, [r7, #4]
 4927              	.LBB8:
 145:../phy/frame.cpp **** 	// Create a new frame that will be the deep copy of me.
 146:../phy/frame.cpp **** 	Frame copy;
 4928              		.loc 1 146 0
 4929 000a 2346     		mov	r3, r4
 4930 000c 1846     		mov	r0, r3
 4931 000e FFF7FEFF 		bl	_ZN5FrameC1Ev
 147:../phy/frame.cpp **** 
 148:../phy/frame.cpp **** 	// Was there enough space left to create the deep copy?
 149:../phy/frame.cpp **** 	assert( _pImpl && copy._pImpl );
 4932              		.loc 1 149 0
 4933 0012 7B68     		ldr	r3, [r7, #4]
 4934 0014 5B68     		ldr	r3, [r3, #4]
 4935 0016 002B     		cmp	r3, #0
 4936 0018 03D0     		beq	.L45
 4937              		.loc 1 149 0 is_stmt 0 discriminator 2
 4938 001a 2346     		mov	r3, r4
 4939 001c 5B68     		ldr	r3, [r3, #4]
 4940 001e 002B     		cmp	r3, #0
 4941 0020 0FD1     		bne	.L46
 4942              	.L45:
 4943              		.loc 1 149 0 discriminator 1
 4944 0022 40F20000 		movw	r0, #:lower16:.LC0
 4945 0026 C0F20000 		movt	r0, #:upper16:.LC0
 4946 002a 4FF09501 		mov	r1, #149
 4947 002e 40F20002 		movw	r2, #:lower16:_ZZN5Frame8deepCopyEvE19__PRETTY_FUNCTION__
 4948 0032 C0F20002 		movt	r2, #:upper16:_ZZN5Frame8deepCopyEvE19__PRETTY_FUNCTION__
 4949 0036 40F20003 		movw	r3, #:lower16:.LC3
 4950 003a C0F20003 		movt	r3, #:upper16:.LC3
 4951 003e FFF7FEFF 		bl	__assert_func
 4952              	.L46:
 150:../phy/frame.cpp **** 	if ( _pImpl && copy._pImpl )
 4953              		.loc 1 150 0 is_stmt 1
 4954 0042 7B68     		ldr	r3, [r7, #4]
 4955 0044 5B68     		ldr	r3, [r3, #4]
 4956 0046 002B     		cmp	r3, #0
 4957 0048 21D0     		beq	.L48
 4958              		.loc 1 150 0 is_stmt 0 discriminator 1
 4959 004a 2346     		mov	r3, r4
 4960 004c 5B68     		ldr	r3, [r3, #4]
 4961 004e 002B     		cmp	r3, #0
 4962 0050 1FD0     		beq	.L49
 151:../phy/frame.cpp **** 	{
 152:../phy/frame.cpp **** 		// Copy all attributes.
 153:../phy/frame.cpp **** 		copy._pImpl->address = _pImpl->address;
 4963              		.loc 1 153 0 is_stmt 1
 4964 0052 2346     		mov	r3, r4
 4965 0054 5B68     		ldr	r3, [r3, #4]
 4966 0056 1A46     		mov	r2, r3
 4967 0058 7B68     		ldr	r3, [r7, #4]
 4968 005a 5B68     		ldr	r3, [r3, #4]
 4969 005c 1046     		mov	r0, r2
 4970 005e 1946     		mov	r1, r3
 4971 0060 FFF7FEFF 		bl	_ZN7AddressILj4EEaSERKS0_
 154:../phy/frame.cpp **** 		memcpy( copy._pImpl->payload , _pImpl->payload , MaximalFramePayloadSize );
 4972              		.loc 1 154 0
 4973 0064 2346     		mov	r3, r4
 4974 0066 5B68     		ldr	r3, [r3, #4]
 4975 0068 03F10802 		add	r2, r3, #8
 4976 006c 7B68     		ldr	r3, [r7, #4]
 4977 006e 5B68     		ldr	r3, [r3, #4]
 4978 0070 03F10803 		add	r3, r3, #8
 4979 0074 1046     		mov	r0, r2
 4980 0076 1946     		mov	r1, r3
 4981 0078 4FF02002 		mov	r2, #32
 4982 007c FFF7FEFF 		bl	memcpy
 155:../phy/frame.cpp **** 		copy._pImpl->size = _pImpl->size;
 4983              		.loc 1 155 0
 4984 0080 2346     		mov	r3, r4
 4985 0082 5B68     		ldr	r3, [r3, #4]
 4986 0084 7A68     		ldr	r2, [r7, #4]
 4987 0086 5268     		ldr	r2, [r2, #4]
 4988 0088 926A     		ldr	r2, [r2, #40]
 4989 008a 9A62     		str	r2, [r3, #40]
 4990 008c 02E0     		b	.L44
 4991              	.L48:
 4992 008e 00BF     		nop
 4993 0090 00E0     		b	.L44
 4994              	.L49:
 4995 0092 00BF     		nop
 4996              	.L44:
 4997              	.LBE8:
 156:../phy/frame.cpp **** 	}
 157:../phy/frame.cpp **** 
 158:../phy/frame.cpp **** 	// Finally return the deep copy.
 159:../phy/frame.cpp **** 	return copy;
 160:../phy/frame.cpp **** }
 4998              		.loc 1 160 0
 4999 0094 2046     		mov	r0, r4
 5000 0096 2046     		mov	r0, r4
 5001 0098 07F11407 		add	r7, r7, #20
 5002 009c BD46     		mov	sp, r7
 5003 009e 90BD     		pop	{r4, r7, pc}
 5004              		.cfi_endproc
 5005              	.LFE1015:
 5007              		.section	.text._ZN7AddressILj4EEC2ERKS0_,"axG",%progbits,_ZN7AddressILj4EEC5ERKS0_,comdat
 5008              		.align	2
 5009              		.weak	_ZN7AddressILj4EEC2ERKS0_
 5010              		.thumb
 5011              		.thumb_func
 5013              	_ZN7AddressILj4EEC2ERKS0_:
 5014              	.LFB1018:
 5015              		.loc 7 34 0
 5016              		.cfi_startproc
 5017              		@ args = 0, pretend = 0, frame = 8
 5018              		@ frame_needed = 1, uses_anonymous_args = 0
 5019              		@ link register save eliminated.
 5020 0000 80B4     		push	{r7}
 5021              	.LCFI39:
 5022              		.cfi_def_cfa_offset 4
 5023 0002 83B0     		sub	sp, sp, #12
 5024              	.LCFI40:
 5025              		.cfi_def_cfa_offset 16
 5026 0004 00AF     		add	r7, sp, #0
 5027              		.cfi_offset 7, -4
 5028              	.LCFI41:
 5029              		.cfi_def_cfa_register 7
 5030 0006 7860     		str	r0, [r7, #4]
 5031 0008 3960     		str	r1, [r7, #0]
 5032              	.LBB9:
 5033              		.loc 7 34 0
 5034 000a 7B68     		ldr	r3, [r7, #4]
 5035 000c 064A     		ldr	r2, .L52
 5036 000e 1A60     		str	r2, [r3, #0]
 5037 0010 7B68     		ldr	r3, [r7, #4]
 5038 0012 3A68     		ldr	r2, [r7, #0]
 5039 0014 5268     		ldr	r2, [r2, #4]
 5040 0016 5A60     		str	r2, [r3, #4]
 5041              	.LBE9:
 5042 0018 7B68     		ldr	r3, [r7, #4]
 5043 001a 1846     		mov	r0, r3
 5044 001c 07F10C07 		add	r7, r7, #12
 5045 0020 BD46     		mov	sp, r7
 5046 0022 80BC     		pop	{r7}
 5047 0024 7047     		bx	lr
 5048              	.L53:
 5049 0026 00BF     		.align	2
 5050              	.L52:
 5051 0028 08000000 		.word	_ZTV7AddressILj4EE+8
 5052              		.cfi_endproc
 5053              	.LFE1018:
 5055              		.weak	_ZN7AddressILj4EEC1ERKS0_
 5056              		.thumb_set _ZN7AddressILj4EEC1ERKS0_,_ZN7AddressILj4EEC2ERKS0_
 5057              		.section	.text._ZNK5Frame7addressEv,"ax",%progbits
 5058              		.align	2
 5059              		.global	_ZNK5Frame7addressEv
 5060              		.thumb
 5061              		.thumb_func
 5063              	_ZNK5Frame7addressEv:
 5064              	.LFB1016:
 161:../phy/frame.cpp **** 
 162:../phy/frame.cpp **** Frame::FrameAddress Frame::address() const
 163:../phy/frame.cpp **** {
 5065              		.loc 1 163 0
 5066              		.cfi_startproc
 5067              		@ args = 0, pretend = 0, frame = 8
 5068              		@ frame_needed = 1, uses_anonymous_args = 0
 5069 0000 90B5     		push	{r4, r7, lr}
 5070              	.LCFI42:
 5071              		.cfi_def_cfa_offset 12
 5072 0002 83B0     		sub	sp, sp, #12
 5073              	.LCFI43:
 5074              		.cfi_def_cfa_offset 24
 5075 0004 00AF     		add	r7, sp, #0
 5076              		.cfi_offset 14, -4
 5077              		.cfi_offset 7, -8
 5078              		.cfi_offset 4, -12
 5079              	.LCFI44:
 5080              		.cfi_def_cfa_register 7
 5081 0006 0446     		mov	r4, r0
 5082 0008 7960     		str	r1, [r7, #4]
 5083              	.LBB10:
 164:../phy/frame.cpp **** 	assert( _pImpl );
 5084              		.loc 1 164 0
 5085 000a 7B68     		ldr	r3, [r7, #4]
 5086 000c 5B68     		ldr	r3, [r3, #4]
 5087 000e 002B     		cmp	r3, #0
 5088 0010 0FD1     		bne	.L55
 5089              		.loc 1 164 0 is_stmt 0 discriminator 1
 5090 0012 40F20000 		movw	r0, #:lower16:.LC0
 5091 0016 C0F20000 		movt	r0, #:upper16:.LC0
 5092 001a 4FF0A401 		mov	r1, #164
 5093 001e 40F20002 		movw	r2, #:lower16:_ZZNK5Frame7addressEvE19__PRETTY_FUNCTION__
 5094 0022 C0F20002 		movt	r2, #:upper16:_ZZNK5Frame7addressEvE19__PRETTY_FUNCTION__
 5095 0026 40F20003 		movw	r3, #:lower16:.LC2
 5096 002a C0F20003 		movt	r3, #:upper16:.LC2
 5097 002e FFF7FEFF 		bl	__assert_func
 5098              	.L55:
 165:../phy/frame.cpp **** 	if ( _pImpl )
 5099              		.loc 1 165 0 is_stmt 1
 5100 0032 7B68     		ldr	r3, [r7, #4]
 5101 0034 5B68     		ldr	r3, [r3, #4]
 5102 0036 002B     		cmp	r3, #0
 5103 0038 07D0     		beq	.L56
 166:../phy/frame.cpp **** 		return _pImpl->address;
 5104              		.loc 1 166 0
 5105 003a 2246     		mov	r2, r4
 5106 003c 7B68     		ldr	r3, [r7, #4]
 5107 003e 5B68     		ldr	r3, [r3, #4]
 5108 0040 1046     		mov	r0, r2
 5109 0042 1946     		mov	r1, r3
 5110 0044 FFF7FEFF 		bl	_ZN7AddressILj4EEC1ERKS0_
 5111 0048 03E0     		b	.L54
 5112              	.L56:
 167:../phy/frame.cpp **** 	else
 168:../phy/frame.cpp **** 		return FrameAddress();
 5113              		.loc 1 168 0
 5114 004a 2346     		mov	r3, r4
 5115 004c 1846     		mov	r0, r3
 5116 004e FFF7FEFF 		bl	_ZN7AddressILj4EEC1Ev
 5117              	.L54:
 5118              	.LBE10:
 169:../phy/frame.cpp **** }
 5119              		.loc 1 169 0
 5120 0052 2046     		mov	r0, r4
 5121 0054 2046     		mov	r0, r4
 5122 0056 07F10C07 		add	r7, r7, #12
 5123 005a BD46     		mov	sp, r7
 5124 005c 90BD     		pop	{r4, r7, pc}
 5125              		.cfi_endproc
 5126              	.LFE1016:
 5128 005e 00BF     		.section	.text._ZN5Frame10setAddressERK7AddressILj4EE,"ax",%progbits
 5129              		.align	2
 5130              		.global	_ZN5Frame10setAddressERK7AddressILj4EE
 5131              		.thumb
 5132              		.thumb_func
 5134              	_ZN5Frame10setAddressERK7AddressILj4EE:
 5135              	.LFB1020:
 170:../phy/frame.cpp **** 
 171:../phy/frame.cpp **** void Frame::setAddress( const Frame::FrameAddress & address )
 172:../phy/frame.cpp **** {
 5136              		.loc 1 172 0
 5137              		.cfi_startproc
 5138              		@ args = 0, pretend = 0, frame = 8
 5139              		@ frame_needed = 1, uses_anonymous_args = 0
 5140 0000 80B5     		push	{r7, lr}
 5141              	.LCFI45:
 5142              		.cfi_def_cfa_offset 8
 5143 0002 82B0     		sub	sp, sp, #8
 5144              	.LCFI46:
 5145              		.cfi_def_cfa_offset 16
 5146 0004 00AF     		add	r7, sp, #0
 5147              		.cfi_offset 14, -4
 5148              		.cfi_offset 7, -8
 5149              	.LCFI47:
 5150              		.cfi_def_cfa_register 7
 5151 0006 7860     		str	r0, [r7, #4]
 5152 0008 3960     		str	r1, [r7, #0]
 5153              	.LBB11:
 173:../phy/frame.cpp **** 	assert( _pImpl );
 5154              		.loc 1 173 0
 5155 000a 7B68     		ldr	r3, [r7, #4]
 5156 000c 5B68     		ldr	r3, [r3, #4]
 5157 000e 002B     		cmp	r3, #0
 5158 0010 0FD1     		bne	.L59
 5159              		.loc 1 173 0 is_stmt 0 discriminator 1
 5160 0012 40F20000 		movw	r0, #:lower16:.LC0
 5161 0016 C0F20000 		movt	r0, #:upper16:.LC0
 5162 001a 4FF0AD01 		mov	r1, #173
 5163 001e 40F20002 		movw	r2, #:lower16:_ZZN5Frame10setAddressERK7AddressILj4EEE19__PRETTY_FUNCTION__
 5164 0022 C0F20002 		movt	r2, #:upper16:_ZZN5Frame10setAddressERK7AddressILj4EEE19__PRETTY_FUNCTION__
 5165 0026 40F20003 		movw	r3, #:lower16:.LC2
 5166 002a C0F20003 		movt	r3, #:upper16:.LC2
 5167 002e FFF7FEFF 		bl	__assert_func
 5168              	.L59:
 174:../phy/frame.cpp **** 	if ( _pImpl )
 5169              		.loc 1 174 0 is_stmt 1
 5170 0032 7B68     		ldr	r3, [r7, #4]
 5171 0034 5B68     		ldr	r3, [r3, #4]
 5172 0036 002B     		cmp	r3, #0
 5173 0038 05D0     		beq	.L58
 175:../phy/frame.cpp **** 		_pImpl->address = address;
 5174              		.loc 1 175 0
 5175 003a 7B68     		ldr	r3, [r7, #4]
 5176 003c 5B68     		ldr	r3, [r3, #4]
 5177 003e 1846     		mov	r0, r3
 5178 0040 3968     		ldr	r1, [r7, #0]
 5179 0042 FFF7FEFF 		bl	_ZN7AddressILj4EEaSERKS0_
 5180              	.L58:
 5181              	.LBE11:
 176:../phy/frame.cpp **** }
 5182              		.loc 1 176 0
 5183 0046 07F10807 		add	r7, r7, #8
 5184 004a BD46     		mov	sp, r7
 5185 004c 80BD     		pop	{r7, pc}
 5186              		.cfi_endproc
 5187              	.LFE1020:
 5189 004e 00BF     		.section	.text._ZNK5Frame11payloadSizeEv,"ax",%progbits
 5190              		.align	2
 5191              		.global	_ZNK5Frame11payloadSizeEv
 5192              		.thumb
 5193              		.thumb_func
 5195              	_ZNK5Frame11payloadSizeEv:
 5196              	.LFB1021:
 177:../phy/frame.cpp **** 
 178:../phy/frame.cpp **** size_t Frame::payloadSize() const
 179:../phy/frame.cpp **** {
 5197              		.loc 1 179 0
 5198              		.cfi_startproc
 5199              		@ args = 0, pretend = 0, frame = 8
 5200              		@ frame_needed = 1, uses_anonymous_args = 0
 5201 0000 80B5     		push	{r7, lr}
 5202              	.LCFI48:
 5203              		.cfi_def_cfa_offset 8
 5204 0002 82B0     		sub	sp, sp, #8
 5205              	.LCFI49:
 5206              		.cfi_def_cfa_offset 16
 5207 0004 00AF     		add	r7, sp, #0
 5208              		.cfi_offset 14, -4
 5209              		.cfi_offset 7, -8
 5210              	.LCFI50:
 5211              		.cfi_def_cfa_register 7
 5212 0006 7860     		str	r0, [r7, #4]
 5213              	.LBB12:
 180:../phy/frame.cpp **** 	assert( _pImpl );
 5214              		.loc 1 180 0
 5215 0008 7B68     		ldr	r3, [r7, #4]
 5216 000a 5B68     		ldr	r3, [r3, #4]
 5217 000c 002B     		cmp	r3, #0
 5218 000e 0FD1     		bne	.L62
 5219              		.loc 1 180 0 is_stmt 0 discriminator 1
 5220 0010 40F20000 		movw	r0, #:lower16:.LC0
 5221 0014 C0F20000 		movt	r0, #:upper16:.LC0
 5222 0018 4FF0B401 		mov	r1, #180
 5223 001c 40F20002 		movw	r2, #:lower16:_ZZNK5Frame11payloadSizeEvE19__PRETTY_FUNCTION__
 5224 0020 C0F20002 		movt	r2, #:upper16:_ZZNK5Frame11payloadSizeEvE19__PRETTY_FUNCTION__
 5225 0024 40F20003 		movw	r3, #:lower16:.LC2
 5226 0028 C0F20003 		movt	r3, #:upper16:.LC2
 5227 002c FFF7FEFF 		bl	__assert_func
 5228              	.L62:
 181:../phy/frame.cpp **** 	if ( _pImpl )
 5229              		.loc 1 181 0 is_stmt 1
 5230 0030 7B68     		ldr	r3, [r7, #4]
 5231 0032 5B68     		ldr	r3, [r3, #4]
 5232 0034 002B     		cmp	r3, #0
 5233 0036 03D0     		beq	.L63
 182:../phy/frame.cpp **** 		return _pImpl->size;
 5234              		.loc 1 182 0
 5235 0038 7B68     		ldr	r3, [r7, #4]
 5236 003a 5B68     		ldr	r3, [r3, #4]
 5237 003c 9B6A     		ldr	r3, [r3, #40]
 5238 003e 01E0     		b	.L64
 5239              	.L63:
 183:../phy/frame.cpp **** 	else
 184:../phy/frame.cpp **** 		return static_cast<size_t>( -1 );
 5240              		.loc 1 184 0
 5241 0040 4FF0FF33 		mov	r3, #-1
 5242              	.L64:
 5243              	.LBE12:
 185:../phy/frame.cpp **** }
 5244              		.loc 1 185 0
 5245 0044 1846     		mov	r0, r3
 5246 0046 07F10807 		add	r7, r7, #8
 5247 004a BD46     		mov	sp, r7
 5248 004c 80BD     		pop	{r7, pc}
 5249              		.cfi_endproc
 5250              	.LFE1021:
 5252 004e 00BF     		.section	.text._ZN5Frame23maximalFramePayloadSizeEv,"ax",%progbits
 5253              		.align	2
 5254              		.global	_ZN5Frame23maximalFramePayloadSizeEv
 5255              		.thumb
 5256              		.thumb_func
 5258              	_ZN5Frame23maximalFramePayloadSizeEv:
 5259              	.LFB1022:
 186:../phy/frame.cpp **** 
 187:../phy/frame.cpp **** size_t Frame::maximalFramePayloadSize()
 188:../phy/frame.cpp **** {
 5260              		.loc 1 188 0
 5261              		.cfi_startproc
 5262              		@ args = 0, pretend = 0, frame = 0
 5263              		@ frame_needed = 1, uses_anonymous_args = 0
 5264              		@ link register save eliminated.
 5265 0000 80B4     		push	{r7}
 5266              	.LCFI51:
 5267              		.cfi_def_cfa_offset 4
 5268 0002 00AF     		add	r7, sp, #0
 5269              		.cfi_offset 7, -4
 5270              	.LCFI52:
 5271              		.cfi_def_cfa_register 7
 189:../phy/frame.cpp **** 	return MaximalFramePayloadSize;
 5272              		.loc 1 189 0
 5273 0004 4FF02003 		mov	r3, #32
 190:../phy/frame.cpp **** }
 5274              		.loc 1 190 0
 5275 0008 1846     		mov	r0, r3
 5276 000a BD46     		mov	sp, r7
 5277 000c 80BC     		pop	{r7}
 5278 000e 7047     		bx	lr
 5279              		.cfi_endproc
 5280              	.LFE1022:
 5282              		.section	.text._ZN5Frame14setPayloadSizeEj,"ax",%progbits
 5283              		.align	2
 5284              		.global	_ZN5Frame14setPayloadSizeEj
 5285              		.thumb
 5286              		.thumb_func
 5288              	_ZN5Frame14setPayloadSizeEj:
 5289              	.LFB1023:
 191:../phy/frame.cpp **** 
 192:../phy/frame.cpp **** void Frame::setPayloadSize( size_t size )
 193:../phy/frame.cpp **** {
 5290              		.loc 1 193 0
 5291              		.cfi_startproc
 5292              		@ args = 0, pretend = 0, frame = 8
 5293              		@ frame_needed = 1, uses_anonymous_args = 0
 5294 0000 80B5     		push	{r7, lr}
 5295              	.LCFI53:
 5296              		.cfi_def_cfa_offset 8
 5297 0002 82B0     		sub	sp, sp, #8
 5298              	.LCFI54:
 5299              		.cfi_def_cfa_offset 16
 5300 0004 00AF     		add	r7, sp, #0
 5301              		.cfi_offset 14, -4
 5302              		.cfi_offset 7, -8
 5303              	.LCFI55:
 5304              		.cfi_def_cfa_register 7
 5305 0006 7860     		str	r0, [r7, #4]
 5306 0008 3960     		str	r1, [r7, #0]
 5307              	.LBB13:
 194:../phy/frame.cpp **** 	assert( _pImpl );
 5308              		.loc 1 194 0
 5309 000a 7B68     		ldr	r3, [r7, #4]
 5310 000c 5B68     		ldr	r3, [r3, #4]
 5311 000e 002B     		cmp	r3, #0
 5312 0010 0FD1     		bne	.L67
 5313              		.loc 1 194 0 is_stmt 0 discriminator 1
 5314 0012 40F20000 		movw	r0, #:lower16:.LC0
 5315 0016 C0F20000 		movt	r0, #:upper16:.LC0
 5316 001a 4FF0C201 		mov	r1, #194
 5317 001e 40F20002 		movw	r2, #:lower16:_ZZN5Frame14setPayloadSizeEjE19__PRETTY_FUNCTION__
 5318 0022 C0F20002 		movt	r2, #:upper16:_ZZN5Frame14setPayloadSizeEjE19__PRETTY_FUNCTION__
 5319 0026 40F20003 		movw	r3, #:lower16:.LC2
 5320 002a C0F20003 		movt	r3, #:upper16:.LC2
 5321 002e FFF7FEFF 		bl	__assert_func
 5322              	.L67:
 195:../phy/frame.cpp **** 	if ( _pImpl )
 5323              		.loc 1 195 0 is_stmt 1
 5324 0032 7B68     		ldr	r3, [r7, #4]
 5325 0034 5B68     		ldr	r3, [r3, #4]
 5326 0036 002B     		cmp	r3, #0
 5327 0038 03D0     		beq	.L66
 196:../phy/frame.cpp **** 		_pImpl->size = size;
 5328              		.loc 1 196 0
 5329 003a 7B68     		ldr	r3, [r7, #4]
 5330 003c 5B68     		ldr	r3, [r3, #4]
 5331 003e 3A68     		ldr	r2, [r7, #0]
 5332 0040 9A62     		str	r2, [r3, #40]
 5333              	.L66:
 5334              	.LBE13:
 197:../phy/frame.cpp **** }
 5335              		.loc 1 197 0
 5336 0042 07F10807 		add	r7, r7, #8
 5337 0046 BD46     		mov	sp, r7
 5338 0048 80BD     		pop	{r7, pc}
 5339              		.cfi_endproc
 5340              	.LFE1023:
 5342 004a 00BF     		.section	.rodata
 5343 0046 0000     		.align	2
 5344              	.LC4:
 5345 0048 5F70496D 		.ascii	"_pImpl && index < MaximalFramePayloadSize\000"
 5345      706C2026 
 5345      2620696E 
 5345      64657820 
 5345      3C204D61 
 5346              		.section	.text._ZN5FrameixEj,"ax",%progbits
 5347              		.align	2
 5348              		.global	_ZN5FrameixEj
 5349              		.thumb
 5350              		.thumb_func
 5352              	_ZN5FrameixEj:
 5353              	.LFB1024:
 198:../phy/frame.cpp **** 
 199:../phy/frame.cpp **** uint8_t & Frame::operator[]( size_t index )
 200:../phy/frame.cpp **** {
 5354              		.loc 1 200 0
 5355              		.cfi_startproc
 5356              		@ args = 0, pretend = 0, frame = 16
 5357              		@ frame_needed = 1, uses_anonymous_args = 0
 5358 0000 90B5     		push	{r4, r7, lr}
 5359              	.LCFI56:
 5360              		.cfi_def_cfa_offset 12
 5361 0002 85B0     		sub	sp, sp, #20
 5362              	.LCFI57:
 5363              		.cfi_def_cfa_offset 32
 5364 0004 00AF     		add	r7, sp, #0
 5365              		.cfi_offset 14, -4
 5366              		.cfi_offset 7, -8
 5367              		.cfi_offset 4, -12
 5368              	.LCFI58:
 5369              		.cfi_def_cfa_register 7
 5370 0006 7860     		str	r0, [r7, #4]
 5371 0008 3960     		str	r1, [r7, #0]
 5372              	.LBB14:
 201:../phy/frame.cpp **** 	assert( _pImpl && index < MaximalFramePayloadSize );
 5373              		.loc 1 201 0
 5374 000a 7B68     		ldr	r3, [r7, #4]
 5375 000c 5B68     		ldr	r3, [r3, #4]
 5376 000e 002B     		cmp	r3, #0
 5377 0010 02D0     		beq	.L70
 5378              		.loc 1 201 0 is_stmt 0 discriminator 2
 5379 0012 3B68     		ldr	r3, [r7, #0]
 5380 0014 1F2B     		cmp	r3, #31
 5381 0016 0FD9     		bls	.L71
 5382              	.L70:
 5383              		.loc 1 201 0 discriminator 1
 5384 0018 40F20000 		movw	r0, #:lower16:.LC0
 5385 001c C0F20000 		movt	r0, #:upper16:.LC0
 5386 0020 4FF0C901 		mov	r1, #201
 5387 0024 40F20002 		movw	r2, #:lower16:_ZZN5FrameixEjE19__PRETTY_FUNCTION__
 5388 0028 C0F20002 		movt	r2, #:upper16:_ZZN5FrameixEjE19__PRETTY_FUNCTION__
 5389 002c 40F20003 		movw	r3, #:lower16:.LC4
 5390 0030 C0F20003 		movt	r3, #:upper16:.LC4
 5391 0034 FFF7FEFF 		bl	__assert_func
 5392              	.L71:
 202:../phy/frame.cpp **** 	if ( _pImpl && index < MaximalFramePayloadSize )
 5393              		.loc 1 202 0 is_stmt 1
 5394 0038 7B68     		ldr	r3, [r7, #4]
 5395 003a 5B68     		ldr	r3, [r3, #4]
 5396 003c 002B     		cmp	r3, #0
 5397 003e 1CD0     		beq	.L72
 5398              		.loc 1 202 0 is_stmt 0 discriminator 1
 5399 0040 3B68     		ldr	r3, [r7, #0]
 5400 0042 1F2B     		cmp	r3, #31
 5401 0044 19D8     		bhi	.L72
 203:../phy/frame.cpp **** 	{
 204:../phy/frame.cpp **** 		_pImpl->size = std::max( _pImpl->size , index + 1 );
 5402              		.loc 1 204 0 is_stmt 1
 5403 0046 7B68     		ldr	r3, [r7, #4]
 5404 0048 5C68     		ldr	r4, [r3, #4]
 5405 004a 7B68     		ldr	r3, [r7, #4]
 5406 004c 5B68     		ldr	r3, [r3, #4]
 5407 004e 03F12802 		add	r2, r3, #40
 5408 0052 3B68     		ldr	r3, [r7, #0]
 5409 0054 03F10103 		add	r3, r3, #1
 5410 0058 FB60     		str	r3, [r7, #12]
 5411 005a 07F10C03 		add	r3, r7, #12
 5412 005e 1046     		mov	r0, r2
 5413 0060 1946     		mov	r1, r3
 5414 0062 FFF7FEFF 		bl	_ZSt3maxIjERKT_S2_S2_
 5415 0066 0346     		mov	r3, r0
 5416 0068 1B68     		ldr	r3, [r3, #0]
 5417 006a A362     		str	r3, [r4, #40]
 205:../phy/frame.cpp **** 		return _pImpl->payload[index];
 5418              		.loc 1 205 0
 5419 006c 7B68     		ldr	r3, [r7, #4]
 5420 006e 5A68     		ldr	r2, [r3, #4]
 5421 0070 3B68     		ldr	r3, [r7, #0]
 5422 0072 03F10803 		add	r3, r3, #8
 5423 0076 D318     		adds	r3, r2, r3
 5424 0078 03E0     		b	.L73
 5425              	.L72:
 206:../phy/frame.cpp **** 	}
 207:../phy/frame.cpp **** 	else
 208:../phy/frame.cpp **** 		return Private::dummyByte;
 5426              		.loc 1 208 0
 5427 007a 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9dummyByteE
 5428 007e C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9dummyByteE
 5429              	.L73:
 5430              	.LBE14:
 209:../phy/frame.cpp **** }
 5431              		.loc 1 209 0
 5432 0082 1846     		mov	r0, r3
 5433 0084 07F11407 		add	r7, r7, #20
 5434 0088 BD46     		mov	sp, r7
 5435 008a 90BD     		pop	{r4, r7, pc}
 5436              		.cfi_endproc
 5437              	.LFE1024:
 5439              		.section	.text._ZNK5FrameixEj,"ax",%progbits
 5440              		.align	2
 5441              		.global	_ZNK5FrameixEj
 5442              		.thumb
 5443              		.thumb_func
 5445              	_ZNK5FrameixEj:
 5446              	.LFB1025:
 210:../phy/frame.cpp **** 
 211:../phy/frame.cpp **** const uint8_t & Frame::operator[]( size_t index ) const
 212:../phy/frame.cpp **** {
 5447              		.loc 1 212 0
 5448              		.cfi_startproc
 5449              		@ args = 0, pretend = 0, frame = 8
 5450              		@ frame_needed = 1, uses_anonymous_args = 0
 5451 0000 80B5     		push	{r7, lr}
 5452              	.LCFI59:
 5453              		.cfi_def_cfa_offset 8
 5454 0002 82B0     		sub	sp, sp, #8
 5455              	.LCFI60:
 5456              		.cfi_def_cfa_offset 16
 5457 0004 00AF     		add	r7, sp, #0
 5458              		.cfi_offset 14, -4
 5459              		.cfi_offset 7, -8
 5460              	.LCFI61:
 5461              		.cfi_def_cfa_register 7
 5462 0006 7860     		str	r0, [r7, #4]
 5463 0008 3960     		str	r1, [r7, #0]
 5464              	.LBB15:
 213:../phy/frame.cpp **** 	assert( _pImpl && index < MaximalFramePayloadSize );
 5465              		.loc 1 213 0
 5466 000a 7B68     		ldr	r3, [r7, #4]
 5467 000c 5B68     		ldr	r3, [r3, #4]
 5468 000e 002B     		cmp	r3, #0
 5469 0010 02D0     		beq	.L75
 5470              		.loc 1 213 0 is_stmt 0 discriminator 2
 5471 0012 3B68     		ldr	r3, [r7, #0]
 5472 0014 1F2B     		cmp	r3, #31
 5473 0016 0FD9     		bls	.L76
 5474              	.L75:
 5475              		.loc 1 213 0 discriminator 1
 5476 0018 40F20000 		movw	r0, #:lower16:.LC0
 5477 001c C0F20000 		movt	r0, #:upper16:.LC0
 5478 0020 4FF0D501 		mov	r1, #213
 5479 0024 40F20002 		movw	r2, #:lower16:_ZZNK5FrameixEjE19__PRETTY_FUNCTION__
 5480 0028 C0F20002 		movt	r2, #:upper16:_ZZNK5FrameixEjE19__PRETTY_FUNCTION__
 5481 002c 40F20003 		movw	r3, #:lower16:.LC4
 5482 0030 C0F20003 		movt	r3, #:upper16:.LC4
 5483 0034 FFF7FEFF 		bl	__assert_func
 5484              	.L76:
 214:../phy/frame.cpp **** 	if ( _pImpl && index < MaximalFramePayloadSize )
 5485              		.loc 1 214 0 is_stmt 1
 5486 0038 7B68     		ldr	r3, [r7, #4]
 5487 003a 5B68     		ldr	r3, [r3, #4]
 5488 003c 002B     		cmp	r3, #0
 5489 003e 09D0     		beq	.L77
 5490              		.loc 1 214 0 is_stmt 0 discriminator 1
 5491 0040 3B68     		ldr	r3, [r7, #0]
 5492 0042 1F2B     		cmp	r3, #31
 5493 0044 06D8     		bhi	.L77
 215:../phy/frame.cpp **** 	{
 216:../phy/frame.cpp **** 		return _pImpl->payload[index];
 5494              		.loc 1 216 0 is_stmt 1
 5495 0046 7B68     		ldr	r3, [r7, #4]
 5496 0048 5A68     		ldr	r2, [r3, #4]
 5497 004a 3B68     		ldr	r3, [r7, #0]
 5498 004c 03F10803 		add	r3, r3, #8
 5499 0050 D318     		adds	r3, r2, r3
 5500 0052 03E0     		b	.L78
 5501              	.L77:
 217:../phy/frame.cpp **** 	}
 218:../phy/frame.cpp **** 	else
 219:../phy/frame.cpp **** 		return Private::dummyByte;
 5502              		.loc 1 219 0
 5503 0054 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9dummyByteE
 5504 0058 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9dummyByteE
 5505              	.L78:
 5506              	.LBE15:
 220:../phy/frame.cpp **** }
 5507              		.loc 1 220 0
 5508 005c 1846     		mov	r0, r3
 5509 005e 07F10807 		add	r7, r7, #8
 5510 0062 BD46     		mov	sp, r7
 5511 0064 80BD     		pop	{r7, pc}
 5512              		.cfi_endproc
 5513              	.LFE1025:
 5515 0066 00BF     		.section	.text._ZN5Frame12payloadBytesEv,"ax",%progbits
 5516              		.align	2
 5517              		.global	_ZN5Frame12payloadBytesEv
 5518              		.thumb
 5519              		.thumb_func
 5521              	_ZN5Frame12payloadBytesEv:
 5522              	.LFB1026:
 221:../phy/frame.cpp **** 
 222:../phy/frame.cpp **** uint8_t * Frame::payloadBytes()
 223:../phy/frame.cpp **** {
 5523              		.loc 1 223 0
 5524              		.cfi_startproc
 5525              		@ args = 0, pretend = 0, frame = 8
 5526              		@ frame_needed = 1, uses_anonymous_args = 0
 5527 0000 80B5     		push	{r7, lr}
 5528              	.LCFI62:
 5529              		.cfi_def_cfa_offset 8
 5530 0002 82B0     		sub	sp, sp, #8
 5531              	.LCFI63:
 5532              		.cfi_def_cfa_offset 16
 5533 0004 00AF     		add	r7, sp, #0
 5534              		.cfi_offset 14, -4
 5535              		.cfi_offset 7, -8
 5536              	.LCFI64:
 5537              		.cfi_def_cfa_register 7
 5538 0006 7860     		str	r0, [r7, #4]
 5539              	.LBB16:
 224:../phy/frame.cpp **** 	assert( _pImpl );
 5540              		.loc 1 224 0
 5541 0008 7B68     		ldr	r3, [r7, #4]
 5542 000a 5B68     		ldr	r3, [r3, #4]
 5543 000c 002B     		cmp	r3, #0
 5544 000e 0FD1     		bne	.L80
 5545              		.loc 1 224 0 is_stmt 0 discriminator 1
 5546 0010 40F20000 		movw	r0, #:lower16:.LC0
 5547 0014 C0F20000 		movt	r0, #:upper16:.LC0
 5548 0018 4FF0E001 		mov	r1, #224
 5549 001c 40F20002 		movw	r2, #:lower16:_ZZN5Frame12payloadBytesEvE19__PRETTY_FUNCTION__
 5550 0020 C0F20002 		movt	r2, #:upper16:_ZZN5Frame12payloadBytesEvE19__PRETTY_FUNCTION__
 5551 0024 40F20003 		movw	r3, #:lower16:.LC2
 5552 0028 C0F20003 		movt	r3, #:upper16:.LC2
 5553 002c FFF7FEFF 		bl	__assert_func
 5554              	.L80:
 225:../phy/frame.cpp **** 	if ( _pImpl )
 5555              		.loc 1 225 0 is_stmt 1
 5556 0030 7B68     		ldr	r3, [r7, #4]
 5557 0032 5B68     		ldr	r3, [r3, #4]
 5558 0034 002B     		cmp	r3, #0
 5559 0036 04D0     		beq	.L81
 226:../phy/frame.cpp **** 		return _pImpl->payload;
 5560              		.loc 1 226 0
 5561 0038 7B68     		ldr	r3, [r7, #4]
 5562 003a 5B68     		ldr	r3, [r3, #4]
 5563 003c 03F10803 		add	r3, r3, #8
 5564 0040 01E0     		b	.L82
 5565              	.L81:
 227:../phy/frame.cpp **** 	else
 228:../phy/frame.cpp **** 		return NULL;
 5566              		.loc 1 228 0
 5567 0042 4FF00003 		mov	r3, #0
 5568              	.L82:
 5569              	.LBE16:
 229:../phy/frame.cpp **** }
 5570              		.loc 1 229 0
 5571 0046 1846     		mov	r0, r3
 5572 0048 07F10807 		add	r7, r7, #8
 5573 004c BD46     		mov	sp, r7
 5574 004e 80BD     		pop	{r7, pc}
 5575              		.cfi_endproc
 5576              	.LFE1026:
 5578              		.section	.text._ZNK5Frame12payloadBytesEv,"ax",%progbits
 5579              		.align	2
 5580              		.global	_ZNK5Frame12payloadBytesEv
 5581              		.thumb
 5582              		.thumb_func
 5584              	_ZNK5Frame12payloadBytesEv:
 5585              	.LFB1027:
 230:../phy/frame.cpp **** 
 231:../phy/frame.cpp **** const uint8_t * const Frame::payloadBytes() const
 232:../phy/frame.cpp **** {
 5586              		.loc 1 232 0
 5587              		.cfi_startproc
 5588              		@ args = 0, pretend = 0, frame = 8
 5589              		@ frame_needed = 1, uses_anonymous_args = 0
 5590 0000 80B5     		push	{r7, lr}
 5591              	.LCFI65:
 5592              		.cfi_def_cfa_offset 8
 5593 0002 82B0     		sub	sp, sp, #8
 5594              	.LCFI66:
 5595              		.cfi_def_cfa_offset 16
 5596 0004 00AF     		add	r7, sp, #0
 5597              		.cfi_offset 14, -4
 5598              		.cfi_offset 7, -8
 5599              	.LCFI67:
 5600              		.cfi_def_cfa_register 7
 5601 0006 7860     		str	r0, [r7, #4]
 5602              	.LBB17:
 233:../phy/frame.cpp **** 	assert( _pImpl );
 5603              		.loc 1 233 0
 5604 0008 7B68     		ldr	r3, [r7, #4]
 5605 000a 5B68     		ldr	r3, [r3, #4]
 5606 000c 002B     		cmp	r3, #0
 5607 000e 0FD1     		bne	.L84
 5608              		.loc 1 233 0 is_stmt 0 discriminator 1
 5609 0010 40F20000 		movw	r0, #:lower16:.LC0
 5610 0014 C0F20000 		movt	r0, #:upper16:.LC0
 5611 0018 4FF0E901 		mov	r1, #233
 5612 001c 40F20002 		movw	r2, #:lower16:_ZZNK5Frame12payloadBytesEvE19__PRETTY_FUNCTION__
 5613 0020 C0F20002 		movt	r2, #:upper16:_ZZNK5Frame12payloadBytesEvE19__PRETTY_FUNCTION__
 5614 0024 40F20003 		movw	r3, #:lower16:.LC2
 5615 0028 C0F20003 		movt	r3, #:upper16:.LC2
 5616 002c FFF7FEFF 		bl	__assert_func
 5617              	.L84:
 234:../phy/frame.cpp **** 	if ( _pImpl )
 5618              		.loc 1 234 0 is_stmt 1
 5619 0030 7B68     		ldr	r3, [r7, #4]
 5620 0032 5B68     		ldr	r3, [r3, #4]
 5621 0034 002B     		cmp	r3, #0
 5622 0036 04D0     		beq	.L85
 235:../phy/frame.cpp **** 		return _pImpl->payload;
 5623              		.loc 1 235 0
 5624 0038 7B68     		ldr	r3, [r7, #4]
 5625 003a 5B68     		ldr	r3, [r3, #4]
 5626 003c 03F10803 		add	r3, r3, #8
 5627 0040 01E0     		b	.L86
 5628              	.L85:
 236:../phy/frame.cpp **** 	else
 237:../phy/frame.cpp **** 		return NULL;
 5629              		.loc 1 237 0
 5630 0042 4FF00003 		mov	r3, #0
 5631              	.L86:
 5632              	.LBE17:
 238:../phy/frame.cpp **** }
 5633              		.loc 1 238 0
 5634 0046 1846     		mov	r0, r3
 5635 0048 07F10807 		add	r7, r7, #8
 5636 004c BD46     		mov	sp, r7
 5637 004e 80BD     		pop	{r7, pc}
 5638              		.cfi_endproc
 5639              	.LFE1027:
 5641              		.section	.rodata
 5642 0072 0000     		.align	2
 5643              	.LC5:
 5644 0074 25303278 		.ascii	"%02x \000"
 5644      2000
 5645              		.section	.text._ZNK5Frame8toStringEv,"ax",%progbits
 5646              		.align	2
 5647              		.global	_ZNK5Frame8toStringEv
 5648              		.thumb
 5649              		.thumb_func
 5651              	_ZNK5Frame8toStringEv:
 5652              	.LFB1028:
 239:../phy/frame.cpp **** 
 240:../phy/frame.cpp **** const char * Frame::toString() const
 241:../phy/frame.cpp **** {
 5653              		.loc 1 241 0
 5654              		.cfi_startproc
 5655              		@ args = 0, pretend = 0, frame = 16
 5656              		@ frame_needed = 1, uses_anonymous_args = 0
 5657 0000 80B5     		push	{r7, lr}
 5658              	.LCFI68:
 5659              		.cfi_def_cfa_offset 8
 5660 0002 84B0     		sub	sp, sp, #16
 5661              	.LCFI69:
 5662              		.cfi_def_cfa_offset 24
 5663 0004 00AF     		add	r7, sp, #0
 5664              		.cfi_offset 14, -4
 5665              		.cfi_offset 7, -8
 5666              	.LCFI70:
 5667              		.cfi_def_cfa_register 7
 5668 0006 7860     		str	r0, [r7, #4]
 5669              	.LBB18:
 242:../phy/frame.cpp **** 	static char str[3 * MaximalFramePayloadSize];
 243:../phy/frame.cpp **** 
 244:../phy/frame.cpp **** 	assert( _pImpl );
 5670              		.loc 1 244 0
 5671 0008 7B68     		ldr	r3, [r7, #4]
 5672 000a 5B68     		ldr	r3, [r3, #4]
 5673 000c 002B     		cmp	r3, #0
 5674 000e 0FD1     		bne	.L88
 5675              		.loc 1 244 0 is_stmt 0 discriminator 1
 5676 0010 40F20000 		movw	r0, #:lower16:.LC0
 5677 0014 C0F20000 		movt	r0, #:upper16:.LC0
 5678 0018 4FF0F401 		mov	r1, #244
 5679 001c 40F20002 		movw	r2, #:lower16:_ZZNK5Frame8toStringEvE19__PRETTY_FUNCTION__
 5680 0020 C0F20002 		movt	r2, #:upper16:_ZZNK5Frame8toStringEvE19__PRETTY_FUNCTION__
 5681 0024 40F20003 		movw	r3, #:lower16:.LC2
 5682 0028 C0F20003 		movt	r3, #:upper16:.LC2
 5683 002c FFF7FEFF 		bl	__assert_func
 5684              	.L88:
 5685              	.LBB19:
 245:../phy/frame.cpp **** 	if ( _pImpl )
 5686              		.loc 1 245 0 is_stmt 1
 5687 0030 7B68     		ldr	r3, [r7, #4]
 5688 0032 5B68     		ldr	r3, [r3, #4]
 5689 0034 002B     		cmp	r3, #0
 5690 0036 40D0     		beq	.L89
 5691              	.LBB20:
 5692              	.LBB21:
 246:../phy/frame.cpp **** 	{
 247:../phy/frame.cpp **** 		for (size_t i = 0; i < payloadSize(); i++)
 5693              		.loc 1 247 0
 5694 0038 4FF00003 		mov	r3, #0
 5695 003c FB60     		str	r3, [r7, #12]
 5696 003e 1CE0     		b	.L90
 5697              	.L91:
 248:../phy/frame.cpp **** 		{
 249:../phy/frame.cpp **** 			sprintf(str + (i * 3), "%02x ", _pImpl->payload[i]);
 5698              		.loc 1 249 0 discriminator 2
 5699 0040 FA68     		ldr	r2, [r7, #12]
 5700 0042 1346     		mov	r3, r2
 5701 0044 4FEA4303 		lsl	r3, r3, #1
 5702 0048 9A18     		adds	r2, r3, r2
 5703 004a 40F20003 		movw	r3, #:lower16:_ZZNK5Frame8toStringEvE3str
 5704 004e C0F20003 		movt	r3, #:upper16:_ZZNK5Frame8toStringEvE3str
 5705 0052 D218     		adds	r2, r2, r3
 5706 0054 7B68     		ldr	r3, [r7, #4]
 5707 0056 5968     		ldr	r1, [r3, #4]
 5708 0058 FB68     		ldr	r3, [r7, #12]
 5709 005a CB18     		adds	r3, r1, r3
 5710 005c 03F10803 		add	r3, r3, #8
 5711 0060 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5712 0062 1046     		mov	r0, r2
 5713 0064 40F20001 		movw	r1, #:lower16:.LC5
 5714 0068 C0F20001 		movt	r1, #:upper16:.LC5
 5715 006c 1A46     		mov	r2, r3
 5716 006e FFF7FEFF 		bl	sprintf
 247:../phy/frame.cpp **** 		for (size_t i = 0; i < payloadSize(); i++)
 5717              		.loc 1 247 0 discriminator 2
 5718 0072 FB68     		ldr	r3, [r7, #12]
 5719 0074 03F10103 		add	r3, r3, #1
 5720 0078 FB60     		str	r3, [r7, #12]
 5721              	.L90:
 247:../phy/frame.cpp **** 		for (size_t i = 0; i < payloadSize(); i++)
 5722              		.loc 1 247 0 is_stmt 0 discriminator 1
 5723 007a 7868     		ldr	r0, [r7, #4]
 5724 007c FFF7FEFF 		bl	_ZNK5Frame11payloadSizeEv
 5725 0080 0246     		mov	r2, r0
 5726 0082 FB68     		ldr	r3, [r7, #12]
 5727 0084 9A42     		cmp	r2, r3
 5728 0086 94BF     		ite	ls
 5729 0088 0023     		movls	r3, #0
 5730 008a 0123     		movhi	r3, #1
 5731 008c DBB2     		uxtb	r3, r3
 5732 008e 002B     		cmp	r3, #0
 5733 0090 D6D1     		bne	.L91
 5734              	.LBE21:
 250:../phy/frame.cpp **** 		}
 251:../phy/frame.cpp **** 		// Finish the string
 252:../phy/frame.cpp **** 		str[payloadSize() * 3] = '\0';
 5735              		.loc 1 252 0 is_stmt 1
 5736 0092 7868     		ldr	r0, [r7, #4]
 5737 0094 FFF7FEFF 		bl	_ZNK5Frame11payloadSizeEv
 5738 0098 0246     		mov	r2, r0
 5739 009a 1346     		mov	r3, r2
 5740 009c 4FEA4303 		lsl	r3, r3, #1
 5741 00a0 9A18     		adds	r2, r3, r2
 5742 00a2 40F20003 		movw	r3, #:lower16:_ZZNK5Frame8toStringEvE3str
 5743 00a6 C0F20003 		movt	r3, #:upper16:_ZZNK5Frame8toStringEvE3str
 5744 00aa 4FF00001 		mov	r1, #0
 5745 00ae 9954     		strb	r1, [r3, r2]
 253:../phy/frame.cpp **** 
 254:../phy/frame.cpp **** 		return str;
 5746              		.loc 1 254 0
 5747 00b0 40F20003 		movw	r3, #:lower16:_ZZNK5Frame8toStringEvE3str
 5748 00b4 C0F20003 		movt	r3, #:upper16:_ZZNK5Frame8toStringEvE3str
 5749 00b8 01E0     		b	.L92
 5750              	.L89:
 5751              	.LBE20:
 5752              	.LBE19:
 255:../phy/frame.cpp **** 	}
 256:../phy/frame.cpp **** 	return NULL;
 5753              		.loc 1 256 0
 5754 00ba 4FF00003 		mov	r3, #0
 5755              	.L92:
 5756              	.LBE18:
 257:../phy/frame.cpp **** }
 5757              		.loc 1 257 0
 5758 00be 1846     		mov	r0, r3
 5759 00c0 07F11007 		add	r7, r7, #16
 5760 00c4 BD46     		mov	sp, r7
 5761 00c6 80BD     		pop	{r7, pc}
 5762              		.cfi_endproc
 5763              	.LFE1028:
 5765              		.section	.rodata
 5766 007a 0000     		.align	2
 5767              	.LC6:
 5768 007c 50726976 		.ascii	"Private::framePool != NULL && Private::framePool->o"
 5768      6174653A 
 5768      3A667261 
 5768      6D65506F 
 5768      6F6C2021 
 5769 00af 626A6563 		.ascii	"bjectCount() == numberOfFrames\000"
 5769      74436F75 
 5769      6E742829 
 5769      203D3D20 
 5769      6E756D62 
 5770              		.section	.text._ZN5Frame19initializeFramePoolEjPPh,"ax",%progbits
 5771              		.align	2
 5772              		.global	_ZN5Frame19initializeFramePoolEjPPh
 5773              		.thumb
 5774              		.thumb_func
 5776              	_ZN5Frame19initializeFramePoolEjPPh:
 5777              	.LFB1029:
 258:../phy/frame.cpp **** 
 259:../phy/frame.cpp **** bool Frame::initializeFramePool( size_t numberOfFrames , uint8_t * * memory )
 260:../phy/frame.cpp **** {
 5778              		.loc 1 260 0
 5779              		.cfi_startproc
 5780              		@ args = 0, pretend = 0, frame = 16
 5781              		@ frame_needed = 1, uses_anonymous_args = 0
 5782 0000 90B5     		push	{r4, r7, lr}
 5783              	.LCFI71:
 5784              		.cfi_def_cfa_offset 12
 5785 0002 85B0     		sub	sp, sp, #20
 5786              	.LCFI72:
 5787              		.cfi_def_cfa_offset 32
 5788 0004 00AF     		add	r7, sp, #0
 5789              		.cfi_offset 14, -4
 5790              		.cfi_offset 7, -8
 5791              		.cfi_offset 4, -12
 5792              	.LCFI73:
 5793              		.cfi_def_cfa_register 7
 5794 0006 7860     		str	r0, [r7, #4]
 5795 0008 3960     		str	r1, [r7, #0]
 5796              	.LBB22:
 5797              	.LBB23:
 261:../phy/frame.cpp **** 	// If we got a pointer to the memory region to use, take the memory from there.
 262:../phy/frame.cpp **** 	if ( memory )
 5798              		.loc 1 262 0
 5799 000a 3B68     		ldr	r3, [r7, #0]
 5800 000c 002B     		cmp	r3, #0
 5801 000e 21D0     		beq	.L94
 5802              	.LBB24:
 263:../phy/frame.cpp **** 	{
 264:../phy/frame.cpp **** 		uint8_t * poolPtr = *memory;
 5803              		.loc 1 264 0
 5804 0010 3B68     		ldr	r3, [r7, #0]
 5805 0012 1B68     		ldr	r3, [r3, #0]
 5806 0014 FB60     		str	r3, [r7, #12]
 265:../phy/frame.cpp **** 		*memory += sizeof( ObjectPool<Private> );
 5807              		.loc 1 265 0
 5808 0016 3B68     		ldr	r3, [r7, #0]
 5809 0018 1B68     		ldr	r3, [r3, #0]
 5810 001a 03F11802 		add	r2, r3, #24
 5811 001e 3B68     		ldr	r3, [r7, #0]
 5812 0020 1A60     		str	r2, [r3, #0]
 266:../phy/frame.cpp **** 
 267:../phy/frame.cpp **** 		Private::framePool = new( (void *)poolPtr ) ObjectPool<Private>( numberOfFrames , memory );
 5813              		.loc 1 267 0
 5814 0022 FB68     		ldr	r3, [r7, #12]
 5815 0024 4FF01800 		mov	r0, #24
 5816 0028 1946     		mov	r1, r3
 5817 002a FFF7FEFF 		bl	_ZnwjPv
 5818 002e 0446     		mov	r4, r0
 5819 0030 2346     		mov	r3, r4
 5820 0032 002B     		cmp	r3, #0
 5821 0034 07D0     		beq	.L95
 5822              		.loc 1 267 0 is_stmt 0 discriminator 1
 5823 0036 2346     		mov	r3, r4
 5824 0038 1846     		mov	r0, r3
 5825 003a 7968     		ldr	r1, [r7, #4]
 5826 003c 3A68     		ldr	r2, [r7, #0]
 5827 003e FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEEC1EjPPh
 5828 0042 2246     		mov	r2, r4
 5829 0044 00E0     		b	.L96
 5830              	.L95:
 5831              		.loc 1 267 0 discriminator 2
 5832 0046 2246     		mov	r2, r4
 5833              	.L96:
 5834              		.loc 1 267 0 discriminator 3
 5835 0048 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 5836 004c C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 5837 0050 1A60     		str	r2, [r3, #0]
 5838 0052 11E0     		b	.L97
 5839              	.L94:
 5840              	.LBE24:
 268:../phy/frame.cpp **** 	}
 269:../phy/frame.cpp **** 	// Otherwise use malloc() (new()).
 270:../phy/frame.cpp **** 	else
 271:../phy/frame.cpp **** 	{
 272:../phy/frame.cpp **** 		Private::framePool = new ObjectPool<Private>( numberOfFrames );
 5841              		.loc 1 272 0 is_stmt 1
 5842 0054 4FF01800 		mov	r0, #24
 5843 0058 FFF7FEFF 		bl	_Znwj
 5844 005c 0446     		mov	r4, r0
 5845 005e 2346     		mov	r3, r4
 5846 0060 1846     		mov	r0, r3
 5847 0062 7968     		ldr	r1, [r7, #4]
 5848 0064 4FF00002 		mov	r2, #0
 5849 0068 FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEEC1EjPPh
 5850 006c 2246     		mov	r2, r4
 5851 006e 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 5852 0072 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 5853 0076 1A60     		str	r2, [r3, #0]
 5854              	.L97:
 5855              	.LBE23:
 273:../phy/frame.cpp **** 	}
 274:../phy/frame.cpp **** 
 275:../phy/frame.cpp **** 	// Check that the allocation of the pool worked!
 276:../phy/frame.cpp **** 	assert( Private::framePool != NULL && Private::framePool->objectCount() == numberOfFrames );
 5856              		.loc 1 276 0
 5857 0078 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 5858 007c C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 5859 0080 1B68     		ldr	r3, [r3, #0]
 5860 0082 002B     		cmp	r3, #0
 5861 0084 0BD0     		beq	.L98
 5862              		.loc 1 276 0 is_stmt 0 discriminator 2
 5863 0086 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 5864 008a C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 5865 008e 1B68     		ldr	r3, [r3, #0]
 5866 0090 1846     		mov	r0, r3
 5867 0092 FFF7FEFF 		bl	_ZNK10ObjectPoolIN5Frame7PrivateEE11objectCountEv
 5868 0096 0246     		mov	r2, r0
 5869 0098 7B68     		ldr	r3, [r7, #4]
 5870 009a 9A42     		cmp	r2, r3
 5871 009c 0FD0     		beq	.L99
 5872              	.L98:
 5873              		.loc 1 276 0 discriminator 1
 5874 009e 40F20000 		movw	r0, #:lower16:.LC0
 5875 00a2 C0F20000 		movt	r0, #:upper16:.LC0
 5876 00a6 4FF48A71 		mov	r1, #276
 5877 00aa 40F20002 		movw	r2, #:lower16:_ZZN5Frame19initializeFramePoolEjPPhE19__PRETTY_FUNCTION__
 5878 00ae C0F20002 		movt	r2, #:upper16:_ZZN5Frame19initializeFramePoolEjPPhE19__PRETTY_FUNCTION__
 5879 00b2 40F20003 		movw	r3, #:lower16:.LC6
 5880 00b6 C0F20003 		movt	r3, #:upper16:.LC6
 5881 00ba FFF7FEFF 		bl	__assert_func
 5882              	.L99:
 277:../phy/frame.cpp **** 	return ( Private::framePool != NULL && Private::framePool->objectCount() == numberOfFrames );
 5883              		.loc 1 277 0 is_stmt 1
 5884 00be 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 5885 00c2 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 5886 00c6 1B68     		ldr	r3, [r3, #0]
 5887 00c8 002B     		cmp	r3, #0
 5888 00ca 0ED0     		beq	.L100
 5889              		.loc 1 277 0 is_stmt 0 discriminator 1
 5890 00cc 40F20003 		movw	r3, #:lower16:_ZN5Frame7Private9framePoolE
 5891 00d0 C0F20003 		movt	r3, #:upper16:_ZN5Frame7Private9framePoolE
 5892 00d4 1B68     		ldr	r3, [r3, #0]
 5893 00d6 1846     		mov	r0, r3
 5894 00d8 FFF7FEFF 		bl	_ZNK10ObjectPoolIN5Frame7PrivateEE11objectCountEv
 5895 00dc 0246     		mov	r2, r0
 5896 00de 7B68     		ldr	r3, [r7, #4]
 5897 00e0 9A42     		cmp	r2, r3
 5898 00e2 02D1     		bne	.L100
 5899              		.loc 1 277 0 discriminator 3
 5900 00e4 4FF00103 		mov	r3, #1
 5901 00e8 01E0     		b	.L101
 5902              	.L100:
 5903              		.loc 1 277 0 discriminator 2
 5904 00ea 4FF00003 		mov	r3, #0
 5905              	.L101:
 5906              	.LBE22:
 278:../phy/frame.cpp **** }
 5907              		.loc 1 278 0 is_stmt 1 discriminator 4
 5908 00ee 1846     		mov	r0, r3
 5909 00f0 07F11407 		add	r7, r7, #20
 5910 00f4 BD46     		mov	sp, r7
 5911 00f6 90BD     		pop	{r4, r7, pc}
 5912              		.cfi_endproc
 5913              	.LFE1029:
 5915              		.section	.rodata
 5916 00ce 0000     		.align	2
 5917              	.LC7:
 5918 00d0 2F686F6D 		.ascii	"/home/desem/workspace/desenet/utils/objectpool.hpp\000"
 5918      652F6465 
 5918      73656D2F 
 5918      776F726B 
 5918      73706163 
 5919 0103 00       		.align	2
 5920              	.LC8:
 5921 0104 66616C73 		.ascii	"false\000"
 5921      6500
 5922              		.section	.text._ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv,"axG",%progbits,_ZN10ObjectPoolIN5Fram
 5923              		.align	2
 5924              		.weak	_ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv
 5925              		.thumb
 5926              		.thumb_func
 5928              	_ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv:
 5929              	.LFB1031:
   1:/home/desem/workspace/desenet/utils/objectpool.hpp **** #pragma once
   2:/home/desem/workspace/desenet/utils/objectpool.hpp **** #include <stdint.h>
   3:/home/desem/workspace/desenet/utils/objectpool.hpp **** #include <cstring>
   4:/home/desem/workspace/desenet/utils/objectpool.hpp **** #include <new>
   5:/home/desem/workspace/desenet/utils/objectpool.hpp **** #include <assert.h>
   6:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
   7:/home/desem/workspace/desenet/utils/objectpool.hpp **** /**
   8:/home/desem/workspace/desenet/utils/objectpool.hpp ****  * @ingroup utils
   9:/home/desem/workspace/desenet/utils/objectpool.hpp ****  * @brief Template to generate a class that can store objects of another class either inside a dyna
  10:/home/desem/workspace/desenet/utils/objectpool.hpp ****  * 		  memory region or inside a given memory block.
  11:/home/desem/workspace/desenet/utils/objectpool.hpp ****  *
  12:/home/desem/workspace/desenet/utils/objectpool.hpp ****  * It implements a simple reference count system that lets the objects be easily shared. Note that 
  13:/home/desem/workspace/desenet/utils/objectpool.hpp ****  * is manually handled.
  14:/home/desem/workspace/desenet/utils/objectpool.hpp ****  */
  15:/home/desem/workspace/desenet/utils/objectpool.hpp **** template <typename T>
  16:/home/desem/workspace/desenet/utils/objectpool.hpp **** class ObjectPool
  17:/home/desem/workspace/desenet/utils/objectpool.hpp **** {
  18:/home/desem/workspace/desenet/utils/objectpool.hpp **** public:
  19:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	/**
  20:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @brief Creates a new object pool with the given number of objects preallocated either at the gi
  21:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * 		  memory region (the memory region pointer will be incremented by the size needed to store al
  22:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * 		  data) or if the pointer to the memory pointer is NULL, the template class uses malloc to
  23:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * 		  allocate memory for his content.
  24:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 *
  25:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @param numberOfObjectsToPreallocate 	The number of objects to hold.
  26:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @param memory 						Pointer to the memory pointer or NULL if the template should use
  27:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * 										malloc (new) to allocate memory.
  28:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 */
  29:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	explicit ObjectPool( size_t numberOfObjectsToPreallocate , uint8_t * * memory = NULL )
  30:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	{
  31:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// If the objects should be placed into a given memory region.
  32:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( memory )
  33:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		{
  34:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// Create the object pool.
  35:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new( static_cast<void *>( *memory ) ) T[numberOfObjectsToPreallocate];
  36:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			*memory += numberOfObjectsToPreallocate * sizeof( T );
  37:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  38:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// Create the reference count variables.
  39:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new( static_cast<void *>( *memory ) ) uint8_t[numberOfObjectsToPreallocate];
  40:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			*memory += numberOfObjectsToPreallocate;
  41:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  42:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// Remember that we should not delete the memory afterwards.
  43:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_dynamicMemoryUsed = false;
  44:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		}
  45:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  46:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// Use systems malloc()/new() functions to allocate memory.
  47:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		else
  48:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		{
  49:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// Create the object pool.
  50:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new T[numberOfObjectsToPreallocate];
  51:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  52:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// Create the reference count variables.
  53:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new uint8_t[numberOfObjectsToPreallocate];
  54:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  55:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// Remember that we should delete the memory afterwards.s
  56:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_dynamicMemoryUsed = true;
  57:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		}
  58:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  59:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// Initialize the reference count and total free objects variables on success.
  60:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		assert( _objectPool && _referenceCounts );
  61:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( _objectPool && _referenceCounts )
  62:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		{
  63:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			 memset( _referenceCounts , 0 , numberOfObjectsToPreallocate );
  64:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			 _objectCount = numberOfObjectsToPreallocate;
  65:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			 _availableObjectCount = numberOfObjectsToPreallocate;
  66:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		}
  67:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  68:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// Something went wrong, so we can not offer any object.
  69:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		else
  70:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		{
  71:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
  72:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
  73:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_dynamicMemoryUsed = false;
  74:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectCount = 0;
  75:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_availableObjectCount = 0;
  76:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		}
  77:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
  78:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  79:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	/**
  80:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @brief Releases the resources used by this pool in the case the memory was allocated dynamicall
  81:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 */
  82:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	virtual ~ObjectPool()
  83:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	{
  84:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// We have to release memory if it was allocated using new().
  85:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( _dynamicMemoryUsed )
  86:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		{
  87:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
  88:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
  89:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		}
  90:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
  91:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
  92:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	/**
  93:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @brief Returns the total number of objects that this pool contains.
  94:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 *
  95:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @return Number of objects in pool.
  96:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 */
  97:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	size_t objectCount() const
  98:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	{
  99:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		return _objectCount;
 100:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 101:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 102:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	/**
 103:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @brief Returns the number of objects actually available.
 104:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 *
 105:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @return Number of available objects in pool.
 106:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 */
 107:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	size_t availableObjectCount() const
 108:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	{
 109:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		return _availableObjectCount;
 110:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 111:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 112:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	/**
 113:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @brief Tries to allocate a new object from the pool and returns a pointer to that object.
 114:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 *
 115:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * If no more objects are left inside the pool, the method returns a NULL pointer.
 116:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 *
 117:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @return Pointer to an object or NULL in the case that there are no more objects left inside the
 118:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 */
 119:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	T * allocate()
 5930              		.loc 97 119 0
 5931              		.cfi_startproc
 5932              		@ args = 0, pretend = 0, frame = 16
 5933              		@ frame_needed = 1, uses_anonymous_args = 0
 5934 0000 80B5     		push	{r7, lr}
 5935              	.LCFI74:
 5936              		.cfi_def_cfa_offset 8
 5937 0002 84B0     		sub	sp, sp, #16
 5938              	.LCFI75:
 5939              		.cfi_def_cfa_offset 24
 5940 0004 00AF     		add	r7, sp, #0
 5941              		.cfi_offset 14, -4
 5942              		.cfi_offset 7, -8
 5943              	.LCFI76:
 5944              		.cfi_def_cfa_register 7
 5945 0006 7860     		str	r0, [r7, #4]
 5946              	.LBB25:
 5947              	.LBB26:
 120:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	{
 121:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// Do we have objects left?
 122:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( _availableObjectCount )
 5948              		.loc 97 122 0
 5949 0008 7B68     		ldr	r3, [r7, #4]
 5950 000a 1B69     		ldr	r3, [r3, #16]
 5951 000c 002B     		cmp	r3, #0
 5952 000e 32D0     		beq	.L103
 5953              	.LBB27:
 5954              	.LBB28:
 123:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		{
 124:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// Search first available object and return it.
 125:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			for ( unsigned int i = 0 ; i < _objectCount ; ++i )
 5955              		.loc 97 125 0
 5956 0010 4FF00003 		mov	r3, #0
 5957 0014 FB60     		str	r3, [r7, #12]
 5958 0016 24E0     		b	.L104
 5959              	.L106:
 126:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			{
 127:/home/desem/workspace/desenet/utils/objectpool.hpp **** 				if ( _referenceCounts[i] == 0 )
 5960              		.loc 97 127 0
 5961 0018 7B68     		ldr	r3, [r7, #4]
 5962 001a 9A68     		ldr	r2, [r3, #8]
 5963 001c FB68     		ldr	r3, [r7, #12]
 5964 001e D318     		adds	r3, r2, r3
 5965 0020 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 5966 0022 002B     		cmp	r3, #0
 5967 0024 19D1     		bne	.L105
 128:/home/desem/workspace/desenet/utils/objectpool.hpp **** 				{
 129:/home/desem/workspace/desenet/utils/objectpool.hpp **** 					_referenceCounts[i] = 1;
 5968              		.loc 97 129 0
 5969 0026 7B68     		ldr	r3, [r7, #4]
 5970 0028 9A68     		ldr	r2, [r3, #8]
 5971 002a FB68     		ldr	r3, [r7, #12]
 5972 002c D318     		adds	r3, r2, r3
 5973 002e 4FF00102 		mov	r2, #1
 5974 0032 1A70     		strb	r2, [r3, #0]
 130:/home/desem/workspace/desenet/utils/objectpool.hpp **** 					_availableObjectCount--;
 5975              		.loc 97 130 0
 5976 0034 7B68     		ldr	r3, [r7, #4]
 5977 0036 1B69     		ldr	r3, [r3, #16]
 5978 0038 03F1FF32 		add	r2, r3, #-1
 5979 003c 7B68     		ldr	r3, [r7, #4]
 5980 003e 1A61     		str	r2, [r3, #16]
 131:/home/desem/workspace/desenet/utils/objectpool.hpp **** 					return &_objectPool[i];
 5981              		.loc 97 131 0
 5982 0040 7B68     		ldr	r3, [r7, #4]
 5983 0042 5A68     		ldr	r2, [r3, #4]
 5984 0044 FB68     		ldr	r3, [r7, #12]
 5985 0046 4FF02C01 		mov	r1, #44
 5986 004a 01FB03F3 		mul	r3, r1, r3
 5987 004e D318     		adds	r3, r2, r3
 5988              	.LBE28:
 5989              	.LBE27:
 5990              	.LBE26:
 5991              	.LBE25:
 132:/home/desem/workspace/desenet/utils/objectpool.hpp **** 				}
 133:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			}
 134:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		}
 135:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 136:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// We did not found any unused frame anymore, return NULL pointer.
 137:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		assert( false );
 138:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		return NULL;
 139:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 5992              		.loc 97 139 0
 5993 0050 1846     		mov	r0, r3
 5994 0052 07F11007 		add	r7, r7, #16
 5995 0056 BD46     		mov	sp, r7
 5996 0058 80BD     		pop	{r7, pc}
 5997              	.L105:
 5998              	.LBB32:
 5999              	.LBB31:
 6000              	.LBB30:
 6001              	.LBB29:
 125:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			for ( unsigned int i = 0 ; i < _objectCount ; ++i )
 6002              		.loc 97 125 0
 6003 005a FB68     		ldr	r3, [r7, #12]
 6004 005c 03F10103 		add	r3, r3, #1
 6005 0060 FB60     		str	r3, [r7, #12]
 6006              	.L104:
 125:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			for ( unsigned int i = 0 ; i < _objectCount ; ++i )
 6007              		.loc 97 125 0 is_stmt 0 discriminator 1
 6008 0062 7B68     		ldr	r3, [r7, #4]
 6009 0064 DA68     		ldr	r2, [r3, #12]
 6010 0066 FB68     		ldr	r3, [r7, #12]
 6011 0068 9A42     		cmp	r2, r3
 6012 006a 94BF     		ite	ls
 6013 006c 0023     		movls	r3, #0
 6014 006e 0123     		movhi	r3, #1
 6015 0070 DBB2     		uxtb	r3, r3
 6016 0072 002B     		cmp	r3, #0
 6017 0074 D0D1     		bne	.L106
 6018              	.L103:
 6019              	.LBE29:
 6020              	.LBE30:
 6021              	.LBE31:
 137:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		assert( false );
 6022              		.loc 97 137 0 is_stmt 1
 6023 0076 40F20000 		movw	r0, #:lower16:.LC7
 6024 007a C0F20000 		movt	r0, #:upper16:.LC7
 6025 007e 4FF08901 		mov	r1, #137
 6026 0082 40F20002 		movw	r2, #:lower16:_ZZN10ObjectPoolIN5Frame7PrivateEE8allocateEvE19__PRETTY_FUNCTION__
 6027 0086 C0F20002 		movt	r2, #:upper16:_ZZN10ObjectPoolIN5Frame7PrivateEE8allocateEvE19__PRETTY_FUNCTION__
 6028 008a 40F20003 		movw	r3, #:lower16:.LC8
 6029 008e C0F20003 		movt	r3, #:upper16:.LC8
 6030 0092 FFF7FEFF 		bl	__assert_func
 6031              	.LBE32:
 6032              		.cfi_endproc
 6033              	.LFE1031:
 6035 0096 00BF     		.section	.text._ZSt3minIjERKT_S2_S2_,"axG",%progbits,_ZSt3minIjERKT_S2_S2_,comdat
 6036              		.align	2
 6037              		.weak	_ZSt3minIjERKT_S2_S2_
 6038              		.thumb
 6039              		.thumb_func
 6041              	_ZSt3minIjERKT_S2_S2_:
 6042              	.LFB1032:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** /** @file stl_algobase.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/c++config.h>
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <cstddef>
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/functexcept.h>
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <ext/type_traits.h>
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/concept_check.h>
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <debug/debug.h>
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE(std)
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<bool _BoolType>
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     struct __iter_swap
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         static void
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         {
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****             _ValueType1;
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	}
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     };
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<>
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     struct __iter_swap<true>
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         static void 
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         {
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           swap(*__a, *__b);
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         }
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     };
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  An iterator.
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another iterator.
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   Nothing.
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  iterators themselves.
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline void
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ValueType1;
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ValueType2;
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ValueType2>)
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ValueType1>)
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ReferenceType1;
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ReferenceType2;
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  first1  A forward iterator.
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  last1   A forward iterator.
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  first2  A forward iterator.
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  The ranges must not overlap.
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     _ForwardIterator2
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __first2;
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  preprocessor macro.
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _Tp>
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline const _Tp&
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 6043              		.loc 34 186 0
 6044              		.cfi_startproc
 6045              		@ args = 0, pretend = 0, frame = 8
 6046              		@ frame_needed = 1, uses_anonymous_args = 0
 6047              		@ link register save eliminated.
 6048 0000 80B4     		push	{r7}
 6049              	.LCFI77:
 6050              		.cfi_def_cfa_offset 4
 6051 0002 83B0     		sub	sp, sp, #12
 6052              	.LCFI78:
 6053              		.cfi_def_cfa_offset 16
 6054 0004 00AF     		add	r7, sp, #0
 6055              		.cfi_offset 7, -4
 6056              	.LCFI79:
 6057              		.cfi_def_cfa_register 7
 6058 0006 7860     		str	r0, [r7, #4]
 6059 0008 3960     		str	r1, [r7, #0]
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       if (__b < __a)
 6060              		.loc 34 191 0
 6061 000a 3B68     		ldr	r3, [r7, #0]
 6062 000c 1A68     		ldr	r2, [r3, #0]
 6063 000e 7B68     		ldr	r3, [r7, #4]
 6064 0010 1B68     		ldr	r3, [r3, #0]
 6065 0012 9A42     		cmp	r2, r3
 6066 0014 01D2     		bcs	.L108
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	return __b;
 6067              		.loc 34 192 0
 6068 0016 3B68     		ldr	r3, [r7, #0]
 6069 0018 00E0     		b	.L109
 6070              	.L108:
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __a;
 6071              		.loc 34 193 0
 6072 001a 7B68     		ldr	r3, [r7, #4]
 6073              	.L109:
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 6074              		.loc 34 194 0
 6075 001c 1846     		mov	r0, r3
 6076 001e 07F10C07 		add	r7, r7, #12
 6077 0022 BD46     		mov	sp, r7
 6078 0024 80BC     		pop	{r7}
 6079 0026 7047     		bx	lr
 6080              		.cfi_endproc
 6081              	.LFE1032:
 6083              		.section	.text._ZNKSt6vectorIhSaIhEE4sizeEv,"axG",%progbits,_ZNKSt6vectorIhSaIhEE4sizeEv,comdat
 6084              		.align	2
 6085              		.weak	_ZNKSt6vectorIhSaIhEE4sizeEv
 6086              		.thumb
 6087              		.thumb_func
 6089              	_ZNKSt6vectorIhSaIhEE4sizeEv:
 6090              	.LFB1033:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Copyright (c) 1996
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** /** @file stl_vector.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #include <bits/functexcept.h>
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #include <bits/concept_check.h>
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #include <initializer_list>
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     struct _Vector_base
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     {
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       struct _Vector_impl 
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : public _Tp_alloc_type
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_start;
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_finish;
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_end_of_storage;
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_Vector_impl()
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	{ }
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	{ }
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       };
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef _Alloc allocator_type;
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Tp_alloc_type&
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_get_Tp_allocator()
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const _Tp_alloc_type&
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_get_Tp_allocator() const
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       allocator_type
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       get_allocator() const
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base()
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl() { }
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a)
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl(__a) { }
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl(__a)
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x)
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _M_impl(__x._M_get_Tp_allocator())
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_start = __x._M_impl._M_start;
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_finish = __x._M_impl._M_finish;
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	__x._M_impl._M_start = 0;
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	__x._M_impl._M_finish = 0;
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	__x._M_impl._M_end_of_storage = 0;
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       ~_Vector_base()
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _Vector_impl _M_impl;
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typename _Tp_alloc_type::pointer
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_allocate(size_t __n)
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	if (__p)
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     };
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   /**
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  individual elements in any order.
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  @ingroup sequences
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   */
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     {
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // Concept requirements.
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef _Tp					 value_type;
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::pointer           pointer;
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::const_pointer     const_pointer;
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::reference         reference;
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::const_reference   const_reference;
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator;
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef size_t					 size_type;
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     protected:
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::_M_allocate;
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::_M_deallocate;
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::_M_impl;
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Default constructor creates no elements.
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector()
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base() { }
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  a  An allocator object.
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       explicit
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(const allocator_type& __a)
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(__a) { }
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 218:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 219:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 220:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 221:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  value  An element to copy.
 222:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  a  An allocator.
 223:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 224:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n copies of @a value.
 225:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 226:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       explicit
 227:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 228:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 229:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(__n, __a)
 230:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 231:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 232:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 233:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 234:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 235:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 236:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 237:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  object used by @a x.  All the elements of @a x are copied,
 238:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  but any extra memory in
 239:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.
 240:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 241:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(const vector& __x)
 242:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(__x.size(), __x._M_get_Tp_allocator())
 243:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 244:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 245:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 246:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 247:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 248:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 249:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 250:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 251:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 252:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 253:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 254:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a x.
 255:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The contents of @a x are a valid, but unspecified %vector.
 256:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 257:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(vector&& __x)
 258:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(std::forward<_Base>(__x)) { }
 259:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 260:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 261:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 262:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 263:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  a  An allocator.
 264:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 265:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 266:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  initializer_list @a l.
 267:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 268:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 269:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  (where N is @a l.size()) and do no memory reallocation.
 270:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 271:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 272:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 273:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       : _Base(__a)
 274:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 275:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 276:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 			    random_access_iterator_tag());
 277:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 278:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 279:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 280:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 281:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 282:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  first  An input iterator.
 283:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  last  An input iterator.
 284:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  a  An allocator.
 285:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 286:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 287:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  [first,last).
 288:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 289:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 290:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 291:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 292:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 293:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 294:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 295:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 296:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       template<typename _InputIterator>
 297:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 298:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 299:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	: _Base(__a)
 300:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         {
 301:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 302:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 303:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 304:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	}
 305:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 306:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 307:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 308:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 309:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 310:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  responsibility.
 311:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 312:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       ~vector()
 313:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 314:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 315:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 316:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 317:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 318:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 319:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 320:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  All the elements of @a x are copied, but any extra memory in
 321:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.  Unlike the
 322:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 323:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 324:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector&
 325:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator=(const vector& __x);
 326:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 327:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 328:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 329:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 330:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 331:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 332:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The contents of @a x are moved into this %vector (without copying).
 333:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @a x is a valid, but unspecified %vector.
 334:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 335:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector&
 336:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator=(vector&& __x)
 337:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 338:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	// NB: DR 1204.
 339:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	// NB: DR 675.
 340:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->clear();
 341:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->swap(__x);
 342:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	return *this;
 343:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 344:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 345:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 346:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 347:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 348:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 349:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 350:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  initializer list @a l.
 351:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 352:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 353:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 354:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 355:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 356:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       vector&
 357:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 358:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 359:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 360:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	return *this;
 361:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 362:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 363:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 364:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 365:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 366:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  n  Number of elements to be assigned.
 367:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  val  Value to be assigned.
 368:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 369:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function fills a %vector with @a n copies of the given
 370:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 371:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 372:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 373:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 374:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 375:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 376:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 377:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 378:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 379:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 380:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  first  An input iterator.
 381:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  last   An input iterator.
 382:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 383:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 384:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  range [first,last).
 385:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 386:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 387:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 388:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 389:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 390:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       template<typename _InputIterator>
 391:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         void
 392:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 393:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****         {
 394:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 395:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 396:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 397:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	}
 398:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 399:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 400:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 401:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 402:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 403:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 404:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 405:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  initializer list @a l.
 406:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 407:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 408:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 409:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 410:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 411:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 412:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 413:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 414:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 415:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 416:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 417:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       using _Base::get_allocator;
 418:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 419:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // iterators
 420:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 421:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 422:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 423:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 424:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 425:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       iterator
 426:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       begin()
 427:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 428:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 429:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 430:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 431:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 432:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 433:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 434:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator
 435:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       begin() const
 436:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 437:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 438:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 439:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 440:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 441:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 442:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 443:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       iterator
 444:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       end()
 445:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 446:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 447:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 448:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 449:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 450:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  ordinary element order.
 451:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 452:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator
 453:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       end() const
 454:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 455:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 456:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 457:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 458:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 459:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 460:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 461:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reverse_iterator
 462:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       rbegin()
 463:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 464:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 465:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 466:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 467:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 468:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  reverse element order.
 469:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 470:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reverse_iterator
 471:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       rbegin() const
 472:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 473:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 474:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 475:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 476:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 477:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  in reverse element order.
 478:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 479:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reverse_iterator
 480:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       rend()
 481:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 482:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 483:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 484:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 485:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 486:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  is done in reverse element order.
 487:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 488:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reverse_iterator
 489:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       rend() const
 490:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 491:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 492:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 493:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 494:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 495:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 496:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element order.
 497:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 498:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator
 499:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       cbegin() const
 500:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 501:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 502:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 503:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 504:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 505:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  ordinary element order.
 506:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 507:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_iterator
 508:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       cend() const
 509:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 510:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 511:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 512:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 513:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 514:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  reverse element order.
 515:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 516:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reverse_iterator
 517:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       crbegin() const
 518:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 519:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 520:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 521:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 522:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 523:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  is done in reverse element order.
 524:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 525:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reverse_iterator
 526:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       crend() const
 527:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 528:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 529:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 530:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // [23.2.4.2] capacity
 531:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 532:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       size_type
 533:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       size() const
 6091              		.loc 93 533 0
 6092              		.cfi_startproc
 6093              		@ args = 0, pretend = 0, frame = 8
 6094              		@ frame_needed = 1, uses_anonymous_args = 0
 6095              		@ link register save eliminated.
 6096 0000 80B4     		push	{r7}
 6097              	.LCFI80:
 6098              		.cfi_def_cfa_offset 4
 6099 0002 83B0     		sub	sp, sp, #12
 6100              	.LCFI81:
 6101              		.cfi_def_cfa_offset 16
 6102 0004 00AF     		add	r7, sp, #0
 6103              		.cfi_offset 7, -4
 6104              	.LCFI82:
 6105              		.cfi_def_cfa_register 7
 6106 0006 7860     		str	r0, [r7, #4]
 534:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 6107              		.loc 93 534 0
 6108 0008 7B68     		ldr	r3, [r7, #4]
 6109 000a 5B68     		ldr	r3, [r3, #4]
 6110 000c 1A46     		mov	r2, r3
 6111 000e 7B68     		ldr	r3, [r7, #4]
 6112 0010 1B68     		ldr	r3, [r3, #0]
 6113 0012 D31A     		subs	r3, r2, r3
 6114 0014 1846     		mov	r0, r3
 6115 0016 07F10C07 		add	r7, r7, #12
 6116 001a BD46     		mov	sp, r7
 6117 001c 80BC     		pop	{r7}
 6118 001e 7047     		bx	lr
 6119              		.cfi_endproc
 6120              	.LFE1033:
 6122              		.section	.text._ZNKSt6vectorIhSaIhEE4dataEv,"axG",%progbits,_ZNKSt6vectorIhSaIhEE4dataEv,comdat
 6123              		.align	2
 6124              		.weak	_ZNKSt6vectorIhSaIhEE4dataEv
 6125              		.thumb
 6126              		.thumb_func
 6128              	_ZNKSt6vectorIhSaIhEE4dataEv:
 6129              	.LFB1034:
 535:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 536:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 537:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       size_type
 538:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       max_size() const
 539:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return _M_get_Tp_allocator().max_size(); }
 540:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 541:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 542:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 543:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 544:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  x  Data with which new elements should be populated.
 545:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 546:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 547:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 548:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 549:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 550:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  given data.
 551:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 552:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 553:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 554:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 555:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	if (__new_size < size())
 556:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 557:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	else
 558:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 559:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 560:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 561:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 562:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 563:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 564:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       shrink_to_fit()
 565:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { std::__shrink_to_fit<vector>::_S_do_it(*this); }
 566:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** #endif
 567:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 568:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 569:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 570:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 571:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 572:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       size_type
 573:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       capacity() const
 574:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 575:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 576:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 577:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 578:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 579:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  equal end().)
 580:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 581:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       bool
 582:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       empty() const
 583:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return begin() == end(); }
 584:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 585:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 586:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 587:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *          elements.
 588:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param  n  Number of elements required.
 589:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 590:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 591:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 592:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 593:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 594:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  thrown.
 595:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 596:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 597:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 598:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 599:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 600:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  and copying of %vector data.
 601:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 602:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 603:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reserve(size_type __n);
 604:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 605:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // element access
 606:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 607:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 608:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 609:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  accessed.
 610:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 611:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 612:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 613:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 614:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 615:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  see at().)
 616:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 617:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reference
 618:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator[](size_type __n)
 619:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 620:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 621:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 622:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 623:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 624:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  accessed.
 625:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 626:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 627:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 628:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 629:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 630:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  see at().)
 631:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 632:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reference
 633:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       operator[](size_type __n) const
 634:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 635:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 636:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     protected:
 637:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /// Safety check used only from at().
 638:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       void
 639:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 640:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 641:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	if (__n >= this->size())
 642:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	  __throw_out_of_range(__N("vector::_M_range_check"));
 643:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 644:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 645:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****     public:
 646:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 647:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 648:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 649:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  accessed.
 650:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 651:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 652:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 653:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 654:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 655:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 656:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 657:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reference
 658:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       at(size_type __n)
 659:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 660:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_M_range_check(__n);
 661:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	return (*this)[__n]; 
 662:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 663:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 664:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 665:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 666:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 667:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  accessed.
 668:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 669:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a n is an invalid index.
 670:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *
 671:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 672:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 673:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 674:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 675:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reference
 676:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       at(size_type __n) const
 677:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       {
 678:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	_M_range_check(__n);
 679:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 	return (*this)[__n];
 680:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       }
 681:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 682:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 683:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 684:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element of the %vector.
 685:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 686:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reference
 687:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       front()
 688:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *begin(); }
 689:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 690:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 691:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 692:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element of the %vector.
 693:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 694:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reference
 695:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       front() const
 696:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *begin(); }
 697:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 698:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 699:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 700:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  element of the %vector.
 701:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 702:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       reference
 703:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       back()
 704:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *(end() - 1); }
 705:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       
 706:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 707:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 708:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *  last element of the %vector.
 709:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 710:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_reference
 711:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       back() const
 712:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return *(end() - 1); }
 713:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 714:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 715:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 716:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       // data access
 717:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       /**
 718:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 719:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 720:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****        */
 721:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       pointer
 722:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       data()
 723:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return pointer(this->_M_impl._M_start); }
 724:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h **** 
 725:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       const_pointer
 726:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       data() const
 6130              		.loc 93 726 0
 6131              		.cfi_startproc
 6132              		@ args = 0, pretend = 0, frame = 8
 6133              		@ frame_needed = 1, uses_anonymous_args = 0
 6134              		@ link register save eliminated.
 6135 0000 80B4     		push	{r7}
 6136              	.LCFI83:
 6137              		.cfi_def_cfa_offset 4
 6138 0002 83B0     		sub	sp, sp, #12
 6139              	.LCFI84:
 6140              		.cfi_def_cfa_offset 16
 6141 0004 00AF     		add	r7, sp, #0
 6142              		.cfi_offset 7, -4
 6143              	.LCFI85:
 6144              		.cfi_def_cfa_register 7
 6145 0006 7860     		str	r0, [r7, #4]
 727:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_vector.h ****       { return const_pointer(this->_M_impl._M_start); }
 6146              		.loc 93 727 0
 6147 0008 7B68     		ldr	r3, [r7, #4]
 6148 000a 1B68     		ldr	r3, [r3, #0]
 6149 000c 1846     		mov	r0, r3
 6150 000e 07F10C07 		add	r7, r7, #12
 6151 0012 BD46     		mov	sp, r7
 6152 0014 80BC     		pop	{r7}
 6153 0016 7047     		bx	lr
 6154              		.cfi_endproc
 6155              	.LFE1034:
 6157              		.section	.text._ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_,"axG",%progbits,_ZN10ObjectPoolIN5Fr
 6158              		.align	2
 6159              		.weak	_ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_
 6160              		.thumb
 6161              		.thumb_func
 6163              	_ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_:
 6164              	.LFB1035:
 140:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 141:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	/**
 142:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @brief Increments the reference count variable for the given object.
 143:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 *
 144:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @param object Pointer to the object for which the reference count should incremented.
 145:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 */
 146:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	void retain( T * object )
 147:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	{
 148:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// Calculate index from pointer value.
 149:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		int index = ( reinterpret_cast<uint8_t *>( object ) -
 150:/home/desem/workspace/desenet/utils/objectpool.hpp **** 					  reinterpret_cast<uint8_t *>( _objectPool ) ) / sizeof( T );
 151:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 152:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// If index is reasonable, increment the reference count for that object.
 153:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( index >= 0 && index < static_cast<int>( _objectCount ) )
 154:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		{
 155:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts[index] += 1;
 156:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 157:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// Ensure that we do not have more references as we can count.
 158:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			assert( _referenceCounts[index] < 255 );
 159:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		}
 160:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 161:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 162:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	/**
 163:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @brief Decrements the reference count variable for the given object and gives it back to the po
 164:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 *  	  count reaches 0.
 165:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 *
 166:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 * @param object Pointer to the object for which the reference count should decremented.
 167:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	 */
 168:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	void release( T * object )
 6165              		.loc 97 168 0
 6166              		.cfi_startproc
 6167              		@ args = 0, pretend = 0, frame = 16
 6168              		@ frame_needed = 1, uses_anonymous_args = 0
 6169              		@ link register save eliminated.
 6170 0000 80B4     		push	{r7}
 6171              	.LCFI86:
 6172              		.cfi_def_cfa_offset 4
 6173 0002 85B0     		sub	sp, sp, #20
 6174              	.LCFI87:
 6175              		.cfi_def_cfa_offset 24
 6176 0004 00AF     		add	r7, sp, #0
 6177              		.cfi_offset 7, -4
 6178              	.LCFI88:
 6179              		.cfi_def_cfa_register 7
 6180 0006 7860     		str	r0, [r7, #4]
 6181 0008 3960     		str	r1, [r7, #0]
 6182              	.LBB33:
 169:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	{
 170:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// Calculate index from pointer value.
 171:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		int index = ( reinterpret_cast<uint8_t *>( object ) -
 172:/home/desem/workspace/desenet/utils/objectpool.hpp **** 				      reinterpret_cast<uint8_t *>( _objectPool ) ) / sizeof( T );
 6183              		.loc 97 172 0
 6184 000a 3A68     		ldr	r2, [r7, #0]
 6185 000c 7B68     		ldr	r3, [r7, #4]
 6186 000e 5B68     		ldr	r3, [r3, #4]
 6187 0010 D31A     		subs	r3, r2, r3
 6188 0012 1A46     		mov	r2, r3
 6189 0014 48F6A333 		movw	r3, #35747
 6190 0018 CBF62E23 		movt	r3, 47662
 6191 001c A3FB0213 		umull	r1, r3, r3, r2
 6192 0020 4FEA5313 		lsr	r3, r3, #5
 6193 0024 FB60     		str	r3, [r7, #12]
 173:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 174:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		// If index is reasonable, decrement the reference count for that object.
 175:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( index >= 0 && index < static_cast<int>( _objectCount ) )
 6194              		.loc 97 175 0
 6195 0026 FB68     		ldr	r3, [r7, #12]
 6196 0028 002B     		cmp	r3, #0
 6197 002a 1FDB     		blt	.L112
 6198              		.loc 97 175 0 is_stmt 0 discriminator 1
 6199 002c 7B68     		ldr	r3, [r7, #4]
 6200 002e DB68     		ldr	r3, [r3, #12]
 6201 0030 1A46     		mov	r2, r3
 6202 0032 FB68     		ldr	r3, [r7, #12]
 6203 0034 9A42     		cmp	r2, r3
 6204 0036 19DD     		ble	.L112
 176:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		{
 177:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts[index] -= 1;
 6205              		.loc 97 177 0 is_stmt 1
 6206 0038 7B68     		ldr	r3, [r7, #4]
 6207 003a 9A68     		ldr	r2, [r3, #8]
 6208 003c FB68     		ldr	r3, [r7, #12]
 6209 003e D318     		adds	r3, r2, r3
 6210 0040 7A68     		ldr	r2, [r7, #4]
 6211 0042 9168     		ldr	r1, [r2, #8]
 6212 0044 FA68     		ldr	r2, [r7, #12]
 6213 0046 8A18     		adds	r2, r1, r2
 6214 0048 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 6215 004a 02F1FF32 		add	r2, r2, #-1
 6216 004e D2B2     		uxtb	r2, r2
 6217 0050 1A70     		strb	r2, [r3, #0]
 178:/home/desem/workspace/desenet/utils/objectpool.hpp **** 
 179:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			// If the last released the object, increment the number of available objects.
 180:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( !_referenceCounts[index] ) _availableObjectCount++;
 6218              		.loc 97 180 0
 6219 0052 7B68     		ldr	r3, [r7, #4]
 6220 0054 9A68     		ldr	r2, [r3, #8]
 6221 0056 FB68     		ldr	r3, [r7, #12]
 6222 0058 D318     		adds	r3, r2, r3
 6223 005a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6224 005c 002B     		cmp	r3, #0
 6225 005e 05D1     		bne	.L112
 6226              		.loc 97 180 0 is_stmt 0 discriminator 1
 6227 0060 7B68     		ldr	r3, [r7, #4]
 6228 0062 1B69     		ldr	r3, [r3, #16]
 6229 0064 03F10102 		add	r2, r3, #1
 6230 0068 7B68     		ldr	r3, [r7, #4]
 6231 006a 1A61     		str	r2, [r3, #16]
 6232              	.L112:
 6233              	.LBE33:
 181:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		}
 182:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 6234              		.loc 97 182 0 is_stmt 1
 6235 006c 07F11407 		add	r7, r7, #20
 6236 0070 BD46     		mov	sp, r7
 6237 0072 80BC     		pop	{r7}
 6238 0074 7047     		bx	lr
 6239              		.cfi_endproc
 6240              	.LFE1035:
 6242 0076 00BF     		.section	.rodata
 6243 010a 0000     		.align	2
 6244              	.LC9:
 6245 010c 5F726566 		.ascii	"_referenceCounts[index] < 255\000"
 6245      6572656E 
 6245      6365436F 
 6245      756E7473 
 6245      5B696E64 
 6246              		.section	.text._ZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_,"axG",%progbits,_ZN10ObjectPoolIN5Fra
 6247              		.align	2
 6248              		.weak	_ZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_
 6249              		.thumb
 6250              		.thumb_func
 6252              	_ZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_:
 6253              	.LFB1036:
 146:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	void retain( T * object )
 6254              		.loc 97 146 0
 6255              		.cfi_startproc
 6256              		@ args = 0, pretend = 0, frame = 16
 6257              		@ frame_needed = 1, uses_anonymous_args = 0
 6258 0000 80B5     		push	{r7, lr}
 6259              	.LCFI89:
 6260              		.cfi_def_cfa_offset 8
 6261 0002 84B0     		sub	sp, sp, #16
 6262              	.LCFI90:
 6263              		.cfi_def_cfa_offset 24
 6264 0004 00AF     		add	r7, sp, #0
 6265              		.cfi_offset 14, -4
 6266              		.cfi_offset 7, -8
 6267              	.LCFI91:
 6268              		.cfi_def_cfa_register 7
 6269 0006 7860     		str	r0, [r7, #4]
 6270 0008 3960     		str	r1, [r7, #0]
 6271              	.LBB34:
 150:/home/desem/workspace/desenet/utils/objectpool.hpp **** 					  reinterpret_cast<uint8_t *>( _objectPool ) ) / sizeof( T );
 6272              		.loc 97 150 0
 6273 000a 3A68     		ldr	r2, [r7, #0]
 6274 000c 7B68     		ldr	r3, [r7, #4]
 6275 000e 5B68     		ldr	r3, [r3, #4]
 6276 0010 D31A     		subs	r3, r2, r3
 6277 0012 1A46     		mov	r2, r3
 6278 0014 48F6A333 		movw	r3, #35747
 6279 0018 CBF62E23 		movt	r3, 47662
 6280 001c A3FB0213 		umull	r1, r3, r3, r2
 6281 0020 4FEA5313 		lsr	r3, r3, #5
 6282 0024 FB60     		str	r3, [r7, #12]
 153:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( index >= 0 && index < static_cast<int>( _objectCount ) )
 6283              		.loc 97 153 0
 6284 0026 FB68     		ldr	r3, [r7, #12]
 6285 0028 002B     		cmp	r3, #0
 6286 002a 29DB     		blt	.L114
 153:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( index >= 0 && index < static_cast<int>( _objectCount ) )
 6287              		.loc 97 153 0 is_stmt 0 discriminator 1
 6288 002c 7B68     		ldr	r3, [r7, #4]
 6289 002e DB68     		ldr	r3, [r3, #12]
 6290 0030 1A46     		mov	r2, r3
 6291 0032 FB68     		ldr	r3, [r7, #12]
 6292 0034 9A42     		cmp	r2, r3
 6293 0036 23DD     		ble	.L114
 155:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts[index] += 1;
 6294              		.loc 97 155 0 is_stmt 1
 6295 0038 7B68     		ldr	r3, [r7, #4]
 6296 003a 9A68     		ldr	r2, [r3, #8]
 6297 003c FB68     		ldr	r3, [r7, #12]
 6298 003e D318     		adds	r3, r2, r3
 6299 0040 7A68     		ldr	r2, [r7, #4]
 6300 0042 9168     		ldr	r1, [r2, #8]
 6301 0044 FA68     		ldr	r2, [r7, #12]
 6302 0046 8A18     		adds	r2, r1, r2
 6303 0048 1278     		ldrb	r2, [r2, #0]	@ zero_extendqisi2
 6304 004a 02F10102 		add	r2, r2, #1
 6305 004e D2B2     		uxtb	r2, r2
 6306 0050 1A70     		strb	r2, [r3, #0]
 158:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			assert( _referenceCounts[index] < 255 );
 6307              		.loc 97 158 0
 6308 0052 7B68     		ldr	r3, [r7, #4]
 6309 0054 9A68     		ldr	r2, [r3, #8]
 6310 0056 FB68     		ldr	r3, [r7, #12]
 6311 0058 D318     		adds	r3, r2, r3
 6312 005a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 6313 005c FF2B     		cmp	r3, #255
 6314 005e 0FD1     		bne	.L114
 158:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			assert( _referenceCounts[index] < 255 );
 6315              		.loc 97 158 0 is_stmt 0 discriminator 1
 6316 0060 40F20000 		movw	r0, #:lower16:.LC7
 6317 0064 C0F20000 		movt	r0, #:upper16:.LC7
 6318 0068 4FF09E01 		mov	r1, #158
 6319 006c 40F20002 		movw	r2, #:lower16:_ZZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_E19__PRETTY_FUNCTION__
 6320 0070 C0F20002 		movt	r2, #:upper16:_ZZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_E19__PRETTY_FUNCTION__
 6321 0074 40F20003 		movw	r3, #:lower16:.LC9
 6322 0078 C0F20003 		movt	r3, #:upper16:.LC9
 6323 007c FFF7FEFF 		bl	__assert_func
 6324              	.L114:
 6325              	.LBE34:
 160:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 6326              		.loc 97 160 0 is_stmt 1
 6327 0080 07F11007 		add	r7, r7, #16
 6328 0084 BD46     		mov	sp, r7
 6329 0086 80BD     		pop	{r7, pc}
 6330              		.cfi_endproc
 6331              	.LFE1036:
 6333              		.section	.text._ZN7AddressILj4EED2Ev,"axG",%progbits,_ZN7AddressILj4EED5Ev,comdat
 6334              		.align	2
 6335              		.weak	_ZN7AddressILj4EED2Ev
 6336              		.thumb
 6337              		.thumb_func
 6339              	_ZN7AddressILj4EED2Ev:
 6340              	.LFB1038:
  35:/home/desem/workspace/desenet/utils/address.hpp **** public:
  36:/home/desem/workspace/desenet/utils/address.hpp **** 	/**
  37:/home/desem/workspace/desenet/utils/address.hpp **** 	 * @brief Creates an invalid (all bytes to 0 is considered invalid) address.
  38:/home/desem/workspace/desenet/utils/address.hpp **** 	 */
  39:/home/desem/workspace/desenet/utils/address.hpp **** 	explicit Address()
  40:/home/desem/workspace/desenet/utils/address.hpp **** 	{
  41:/home/desem/workspace/desenet/utils/address.hpp **** 		// Initialize address to default value of all bytes equal 0.
  42:/home/desem/workspace/desenet/utils/address.hpp **** 		memset( _address , 0 , size );
  43:/home/desem/workspace/desenet/utils/address.hpp **** 	}
  44:/home/desem/workspace/desenet/utils/address.hpp **** 
  45:/home/desem/workspace/desenet/utils/address.hpp **** 	/**
  46:/home/desem/workspace/desenet/utils/address.hpp **** 	 * @brief Creates an address with the data taken from the memory region pointed by from.
  47:/home/desem/workspace/desenet/utils/address.hpp **** 	 *
  48:/home/desem/workspace/desenet/utils/address.hpp **** 	 * Note that it is your responsibility to ensure that there are enough bytes for the address size.
  49:/home/desem/workspace/desenet/utils/address.hpp **** 	 *
  50:/home/desem/workspace/desenet/utils/address.hpp **** 	 * @param from Pointer to the memory region holding the address.
  51:/home/desem/workspace/desenet/utils/address.hpp **** 	 */
  52:/home/desem/workspace/desenet/utils/address.hpp **** 	explicit Address( const uint8_t * const from )
  53:/home/desem/workspace/desenet/utils/address.hpp **** 	{
  54:/home/desem/workspace/desenet/utils/address.hpp **** 		copyFrom( from );
  55:/home/desem/workspace/desenet/utils/address.hpp **** 	}
  56:/home/desem/workspace/desenet/utils/address.hpp **** 
  57:/home/desem/workspace/desenet/utils/address.hpp **** 	/**
  58:/home/desem/workspace/desenet/utils/address.hpp **** 	 * @brief Destructor, actually it does nothing @ all.
  59:/home/desem/workspace/desenet/utils/address.hpp **** 	 */
  60:/home/desem/workspace/desenet/utils/address.hpp **** 	virtual ~Address()
 6341              		.loc 7 60 0
 6342              		.cfi_startproc
 6343              		@ args = 0, pretend = 0, frame = 8
 6344              		@ frame_needed = 1, uses_anonymous_args = 0
 6345 0000 80B5     		push	{r7, lr}
 6346              	.LCFI92:
 6347              		.cfi_def_cfa_offset 8
 6348 0002 82B0     		sub	sp, sp, #8
 6349              	.LCFI93:
 6350              		.cfi_def_cfa_offset 16
 6351 0004 00AF     		add	r7, sp, #0
 6352              		.cfi_offset 14, -4
 6353              		.cfi_offset 7, -8
 6354              	.LCFI94:
 6355              		.cfi_def_cfa_register 7
 6356 0006 7860     		str	r0, [r7, #4]
 6357              	.LBB35:
  61:/home/desem/workspace/desenet/utils/address.hpp **** 	{}
 6358              		.loc 7 61 0
 6359 0008 7B68     		ldr	r3, [r7, #4]
 6360 000a 094A     		ldr	r2, .L119
 6361 000c 1A60     		str	r2, [r3, #0]
 6362              	.LBE35:
 6363 000e 4FF00003 		mov	r3, #0
 6364 0012 03F00103 		and	r3, r3, #1
 6365 0016 DBB2     		uxtb	r3, r3
 6366 0018 002B     		cmp	r3, #0
 6367 001a 02D0     		beq	.L118
 6368              		.loc 7 61 0 is_stmt 0 discriminator 1
 6369 001c 7868     		ldr	r0, [r7, #4]
 6370 001e FFF7FEFF 		bl	_ZdlPv
 6371              	.L118:
 6372              		.loc 7 61 0 discriminator 2
 6373 0022 7B68     		ldr	r3, [r7, #4]
 6374 0024 1846     		mov	r0, r3
 6375 0026 07F10807 		add	r7, r7, #8
 6376 002a BD46     		mov	sp, r7
 6377 002c 80BD     		pop	{r7, pc}
 6378              	.L120:
 6379 002e 00BF     		.align	2
 6380              	.L119:
 6381 0030 08000000 		.word	_ZTV7AddressILj4EE+8
 6382              		.cfi_endproc
 6383              	.LFE1038:
 6385              		.weak	_ZN7AddressILj4EED1Ev
 6386              		.thumb_set _ZN7AddressILj4EED1Ev,_ZN7AddressILj4EED2Ev
 6387              		.section	.text._ZN7AddressILj4EED0Ev,"axG",%progbits,_ZN7AddressILj4EED5Ev,comdat
 6388              		.align	2
 6389              		.weak	_ZN7AddressILj4EED0Ev
 6390              		.thumb
 6391              		.thumb_func
 6393              	_ZN7AddressILj4EED0Ev:
 6394              	.LFB1040:
  60:/home/desem/workspace/desenet/utils/address.hpp **** 	virtual ~Address()
 6395              		.loc 7 60 0 is_stmt 1
 6396              		.cfi_startproc
 6397              		@ args = 0, pretend = 0, frame = 8
 6398              		@ frame_needed = 1, uses_anonymous_args = 0
 6399 0000 80B5     		push	{r7, lr}
 6400              	.LCFI95:
 6401              		.cfi_def_cfa_offset 8
 6402 0002 82B0     		sub	sp, sp, #8
 6403              	.LCFI96:
 6404              		.cfi_def_cfa_offset 16
 6405 0004 00AF     		add	r7, sp, #0
 6406              		.cfi_offset 14, -4
 6407              		.cfi_offset 7, -8
 6408              	.LCFI97:
 6409              		.cfi_def_cfa_register 7
 6410 0006 7860     		str	r0, [r7, #4]
 6411              		.loc 7 61 0
 6412 0008 7868     		ldr	r0, [r7, #4]
 6413 000a FFF7FEFF 		bl	_ZN7AddressILj4EED1Ev
 6414 000e 7868     		ldr	r0, [r7, #4]
 6415 0010 FFF7FEFF 		bl	_ZdlPv
 6416 0014 7B68     		ldr	r3, [r7, #4]
 6417 0016 1846     		mov	r0, r3
 6418 0018 07F10807 		add	r7, r7, #8
 6419 001c BD46     		mov	sp, r7
 6420 001e 80BD     		pop	{r7, pc}
 6421              		.cfi_endproc
 6422              	.LFE1040:
 6424              		.section	.text._ZN7AddressILj4EEC2Ev,"axG",%progbits,_ZN7AddressILj4EEC5Ev,comdat
 6425              		.align	2
 6426              		.weak	_ZN7AddressILj4EEC2Ev
 6427              		.thumb
 6428              		.thumb_func
 6430              	_ZN7AddressILj4EEC2Ev:
 6431              	.LFB1042:
  39:/home/desem/workspace/desenet/utils/address.hpp **** 	explicit Address()
 6432              		.loc 7 39 0
 6433              		.cfi_startproc
 6434              		@ args = 0, pretend = 0, frame = 8
 6435              		@ frame_needed = 1, uses_anonymous_args = 0
 6436 0000 80B5     		push	{r7, lr}
 6437              	.LCFI98:
 6438              		.cfi_def_cfa_offset 8
 6439 0002 82B0     		sub	sp, sp, #8
 6440              	.LCFI99:
 6441              		.cfi_def_cfa_offset 16
 6442 0004 00AF     		add	r7, sp, #0
 6443              		.cfi_offset 14, -4
 6444              		.cfi_offset 7, -8
 6445              	.LCFI100:
 6446              		.cfi_def_cfa_register 7
 6447 0006 7860     		str	r0, [r7, #4]
 6448              	.LBB36:
  40:/home/desem/workspace/desenet/utils/address.hpp **** 	{
 6449              		.loc 7 40 0
 6450 0008 7B68     		ldr	r3, [r7, #4]
 6451 000a 094A     		ldr	r2, .L125
 6452 000c 1A60     		str	r2, [r3, #0]
  42:/home/desem/workspace/desenet/utils/address.hpp **** 		memset( _address , 0 , size );
 6453              		.loc 7 42 0
 6454 000e 7B68     		ldr	r3, [r7, #4]
 6455 0010 03F10403 		add	r3, r3, #4
 6456 0014 1846     		mov	r0, r3
 6457 0016 4FF00001 		mov	r1, #0
 6458 001a 4FF00402 		mov	r2, #4
 6459 001e FFF7FEFF 		bl	memset
 6460              	.LBE36:
 6461 0022 7B68     		ldr	r3, [r7, #4]
  43:/home/desem/workspace/desenet/utils/address.hpp **** 	}
 6462              		.loc 7 43 0
 6463 0024 1846     		mov	r0, r3
 6464 0026 07F10807 		add	r7, r7, #8
 6465 002a BD46     		mov	sp, r7
 6466 002c 80BD     		pop	{r7, pc}
 6467              	.L126:
 6468 002e 00BF     		.align	2
 6469              	.L125:
 6470 0030 08000000 		.word	_ZTV7AddressILj4EE+8
 6471              		.cfi_endproc
 6472              	.LFE1042:
 6474              		.weak	_ZN7AddressILj4EEC1Ev
 6475              		.thumb_set _ZN7AddressILj4EEC1Ev,_ZN7AddressILj4EEC2Ev
 6476              		.section	.text._ZSt3maxIjERKT_S2_S2_,"axG",%progbits,_ZSt3maxIjERKT_S2_S2_,comdat
 6477              		.align	2
 6478              		.weak	_ZSt3maxIjERKT_S2_S2_
 6479              		.thumb
 6480              		.thumb_func
 6482              	_ZSt3maxIjERKT_S2_S2_:
 6483              	.LFB1044:
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  preprocessor macro.
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _Tp>
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline const _Tp&
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 6484              		.loc 34 209 0
 6485              		.cfi_startproc
 6486              		@ args = 0, pretend = 0, frame = 8
 6487              		@ frame_needed = 1, uses_anonymous_args = 0
 6488              		@ link register save eliminated.
 6489 0000 80B4     		push	{r7}
 6490              	.LCFI101:
 6491              		.cfi_def_cfa_offset 4
 6492 0002 83B0     		sub	sp, sp, #12
 6493              	.LCFI102:
 6494              		.cfi_def_cfa_offset 16
 6495 0004 00AF     		add	r7, sp, #0
 6496              		.cfi_offset 7, -4
 6497              	.LCFI103:
 6498              		.cfi_def_cfa_register 7
 6499 0006 7860     		str	r0, [r7, #4]
 6500 0008 3960     		str	r1, [r7, #0]
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       if (__a < __b)
 6501              		.loc 34 214 0
 6502 000a 7B68     		ldr	r3, [r7, #4]
 6503 000c 1A68     		ldr	r2, [r3, #0]
 6504 000e 3B68     		ldr	r3, [r7, #0]
 6505 0010 1B68     		ldr	r3, [r3, #0]
 6506 0012 9A42     		cmp	r2, r3
 6507 0014 01D2     		bcs	.L128
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	return __b;
 6508              		.loc 34 215 0
 6509 0016 3B68     		ldr	r3, [r7, #0]
 6510 0018 00E0     		b	.L129
 6511              	.L128:
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __a;
 6512              		.loc 34 216 0
 6513 001a 7B68     		ldr	r3, [r7, #4]
 6514              	.L129:
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 6515              		.loc 34 217 0
 6516 001c 1846     		mov	r0, r3
 6517 001e 07F10C07 		add	r7, r7, #12
 6518 0022 BD46     		mov	sp, r7
 6519 0024 80BC     		pop	{r7}
 6520 0026 7047     		bx	lr
 6521              		.cfi_endproc
 6522              	.LFE1044:
 6524              		.section	.text._ZN5Frame7PrivateC2Ev,"axG",%progbits,_ZN5Frame7PrivateC5Ev,comdat
 6525              		.align	2
 6526              		.weak	_ZN5Frame7PrivateC2Ev
 6527              		.thumb
 6528              		.thumb_func
 6530              	_ZN5Frame7PrivateC2Ev:
 6531              	.LFB1047:
  10:../phy/frame.cpp **** {
 6532              		.loc 1 10 0
 6533              		.cfi_startproc
 6534              		@ args = 0, pretend = 0, frame = 8
 6535              		@ frame_needed = 1, uses_anonymous_args = 0
 6536 0000 80B5     		push	{r7, lr}
 6537              	.LCFI104:
 6538              		.cfi_def_cfa_offset 8
 6539 0002 82B0     		sub	sp, sp, #8
 6540              	.LCFI105:
 6541              		.cfi_def_cfa_offset 16
 6542 0004 00AF     		add	r7, sp, #0
 6543              		.cfi_offset 14, -4
 6544              		.cfi_offset 7, -8
 6545              	.LCFI106:
 6546              		.cfi_def_cfa_register 7
 6547 0006 7860     		str	r0, [r7, #4]
 6548              	.LBB37:
  10:../phy/frame.cpp **** {
 6549              		.loc 1 10 0
 6550 0008 7B68     		ldr	r3, [r7, #4]
 6551 000a 1846     		mov	r0, r3
 6552 000c FFF7FEFF 		bl	_ZN7AddressILj4EEC1Ev
 6553              	.LBE37:
 6554 0010 7B68     		ldr	r3, [r7, #4]
 6555 0012 1846     		mov	r0, r3
 6556 0014 07F10807 		add	r7, r7, #8
 6557 0018 BD46     		mov	sp, r7
 6558 001a 80BD     		pop	{r7, pc}
 6559              		.cfi_endproc
 6560              	.LFE1047:
 6562              		.weak	_ZN5Frame7PrivateC1Ev
 6563              		.thumb_set _ZN5Frame7PrivateC1Ev,_ZN5Frame7PrivateC2Ev
 6564              		.section	.text._ZN5Frame7PrivateD2Ev,"axG",%progbits,_ZN5Frame7PrivateD5Ev,comdat
 6565              		.align	2
 6566              		.weak	_ZN5Frame7PrivateD2Ev
 6567              		.thumb
 6568              		.thumb_func
 6570              	_ZN5Frame7PrivateD2Ev:
 6571              	.LFB1050:
  10:../phy/frame.cpp **** {
 6572              		.loc 1 10 0
 6573              		.cfi_startproc
 6574              		@ args = 0, pretend = 0, frame = 8
 6575              		@ frame_needed = 1, uses_anonymous_args = 0
 6576 0000 80B5     		push	{r7, lr}
 6577              	.LCFI107:
 6578              		.cfi_def_cfa_offset 8
 6579 0002 82B0     		sub	sp, sp, #8
 6580              	.LCFI108:
 6581              		.cfi_def_cfa_offset 16
 6582 0004 00AF     		add	r7, sp, #0
 6583              		.cfi_offset 14, -4
 6584              		.cfi_offset 7, -8
 6585              	.LCFI109:
 6586              		.cfi_def_cfa_register 7
 6587 0006 7860     		str	r0, [r7, #4]
 6588              	.LBB38:
  10:../phy/frame.cpp **** {
 6589              		.loc 1 10 0
 6590 0008 7B68     		ldr	r3, [r7, #4]
 6591 000a 1846     		mov	r0, r3
 6592 000c FFF7FEFF 		bl	_ZN7AddressILj4EED1Ev
 6593              	.LBE38:
 6594 0010 7B68     		ldr	r3, [r7, #4]
 6595 0012 1846     		mov	r0, r3
 6596 0014 07F10807 		add	r7, r7, #8
 6597 0018 BD46     		mov	sp, r7
 6598 001a 80BD     		pop	{r7, pc}
 6599              		.cfi_endproc
 6600              	.LFE1050:
 6602              		.weak	_ZN5Frame7PrivateD1Ev
 6603              		.thumb_set _ZN5Frame7PrivateD1Ev,_ZN5Frame7PrivateD2Ev
 6604              		.section	.rodata
 6605 012a 0000     		.align	2
 6606              	.LC10:
 6607 012c 5F6F626A 		.ascii	"_objectPool && _referenceCounts\000"
 6607      65637450 
 6607      6F6F6C20 
 6607      2626205F 
 6607      72656665 
 6608              		.section	.text._ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh,"axG",%progbits,_ZN10ObjectPoolIN5Frame7Pr
 6609              		.align	2
 6610              		.weak	_ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh
 6611              		.thumb
 6612              		.thumb_func
 6614              	_ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh:
 6615              	.LFB1052:
  29:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	explicit ObjectPool( size_t numberOfObjectsToPreallocate , uint8_t * * memory = NULL )
 6616              		.loc 97 29 0
 6617              		.cfi_startproc
 6618              		@ args = 0, pretend = 0, frame = 16
 6619              		@ frame_needed = 1, uses_anonymous_args = 0
 6620 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 6621              	.LCFI110:
 6622              		.cfi_def_cfa_offset 20
 6623 0002 85B0     		sub	sp, sp, #20
 6624              	.LCFI111:
 6625              		.cfi_def_cfa_offset 40
 6626 0004 00AF     		add	r7, sp, #0
 6627              		.cfi_offset 14, -4
 6628              		.cfi_offset 7, -8
 6629              		.cfi_offset 6, -12
 6630              		.cfi_offset 5, -16
 6631              		.cfi_offset 4, -20
 6632              	.LCFI112:
 6633              		.cfi_def_cfa_register 7
 6634 0006 F860     		str	r0, [r7, #12]
 6635 0008 B960     		str	r1, [r7, #8]
 6636 000a 7A60     		str	r2, [r7, #4]
 6637              	.LBB39:
  30:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	{
 6638              		.loc 97 30 0
 6639 000c FB68     		ldr	r3, [r7, #12]
 6640 000e 834A     		ldr	r2, .L157
 6641 0010 1A60     		str	r2, [r3, #0]
  32:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( memory )
 6642              		.loc 97 32 0
 6643 0012 7B68     		ldr	r3, [r7, #4]
 6644 0014 002B     		cmp	r3, #0
 6645 0016 60D0     		beq	.L135
  35:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new( static_cast<void *>( *memory ) ) T[numberOfObjectsToPreallocate];
 6646              		.loc 97 35 0
 6647 0018 BD68     		ldr	r5, [r7, #8]
 6648 001a 4FF02C03 		mov	r3, #44
 6649 001e 03FB05F2 		mul	r2, r3, r5
 6650 0022 7B68     		ldr	r3, [r7, #4]
 6651 0024 1B68     		ldr	r3, [r3, #0]
 6652 0026 1046     		mov	r0, r2
 6653 0028 1946     		mov	r1, r3
 6654 002a FFF7FEFF 		bl	_ZnajPv
 6655 002e 0446     		mov	r4, r0
 6656 0030 2346     		mov	r3, r4
 6657 0032 002B     		cmp	r3, #0
 6658 0034 16D0     		beq	.L136
  35:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new( static_cast<void *>( *memory ) ) T[numberOfObjectsToPreallocate];
 6659              		.loc 97 35 0 is_stmt 0 discriminator 1
 6660 0036 2346     		mov	r3, r4
 6661 0038 1E46     		mov	r6, r3
 6662 003a 05F1FF33 		add	r3, r5, #-1
 6663 003e 1D46     		mov	r5, r3
 6664 0040 06E0     		b	.L137
 6665              	.L138:
  35:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new( static_cast<void *>( *memory ) ) T[numberOfObjectsToPreallocate];
 6666              		.loc 97 35 0 discriminator 4
 6667 0042 3046     		mov	r0, r6
 6668 0044 FFF7FEFF 		bl	_ZN5Frame7PrivateC1Ev
 6669 0048 06F12C06 		add	r6, r6, #44
 6670 004c 05F1FF35 		add	r5, r5, #-1
 6671              	.L137:
  35:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new( static_cast<void *>( *memory ) ) T[numberOfObjectsToPreallocate];
 6672              		.loc 97 35 0 discriminator 3
 6673 0050 B5F1FF3F 		cmp	r5, #-1
 6674 0054 0CBF     		ite	eq
 6675 0056 0023     		moveq	r3, #0
 6676 0058 0123     		movne	r3, #1
 6677 005a DBB2     		uxtb	r3, r3
 6678 005c 002B     		cmp	r3, #0
 6679 005e F0D1     		bne	.L138
  35:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new( static_cast<void *>( *memory ) ) T[numberOfObjectsToPreallocate];
 6680              		.loc 97 35 0 discriminator 5
 6681 0060 2346     		mov	r3, r4
 6682 0062 00E0     		b	.L139
 6683              	.L136:
  35:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new( static_cast<void *>( *memory ) ) T[numberOfObjectsToPreallocate];
 6684              		.loc 97 35 0 discriminator 2
 6685 0064 2346     		mov	r3, r4
 6686              	.L139:
  35:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new( static_cast<void *>( *memory ) ) T[numberOfObjectsToPreallocate];
 6687              		.loc 97 35 0 discriminator 6
 6688 0066 FA68     		ldr	r2, [r7, #12]
 6689 0068 5360     		str	r3, [r2, #4]
  36:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			*memory += numberOfObjectsToPreallocate * sizeof( T );
 6690              		.loc 97 36 0 is_stmt 1 discriminator 6
 6691 006a 7B68     		ldr	r3, [r7, #4]
 6692 006c 1A68     		ldr	r2, [r3, #0]
 6693 006e BB68     		ldr	r3, [r7, #8]
 6694 0070 4FF02C01 		mov	r1, #44
 6695 0074 01FB03F3 		mul	r3, r1, r3
 6696 0078 D218     		adds	r2, r2, r3
 6697 007a 7B68     		ldr	r3, [r7, #4]
 6698 007c 1A60     		str	r2, [r3, #0]
  39:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new( static_cast<void *>( *memory ) ) uint8_t[numberOfObjectsToPreallocate];
 6699              		.loc 97 39 0 discriminator 6
 6700 007e BC68     		ldr	r4, [r7, #8]
 6701 0080 2246     		mov	r2, r4
 6702 0082 7B68     		ldr	r3, [r7, #4]
 6703 0084 1B68     		ldr	r3, [r3, #0]
 6704 0086 1046     		mov	r0, r2
 6705 0088 1946     		mov	r1, r3
 6706 008a FFF7FEFF 		bl	_ZnajPv
 6707 008e 0346     		mov	r3, r0
 6708 0090 1A46     		mov	r2, r3
 6709 0092 002A     		cmp	r2, #0
 6710 0094 14D0     		beq	.L140
  39:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new( static_cast<void *>( *memory ) ) uint8_t[numberOfObjectsToPreallocate];
 6711              		.loc 97 39 0 is_stmt 0 discriminator 1
 6712 0096 1A46     		mov	r2, r3
 6713 0098 1146     		mov	r1, r2
 6714 009a 04F1FF32 		add	r2, r4, #-1
 6715 009e 06E0     		b	.L141
 6716              	.L142:
  39:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new( static_cast<void *>( *memory ) ) uint8_t[numberOfObjectsToPreallocate];
 6717              		.loc 97 39 0 discriminator 4
 6718 00a0 4FF00000 		mov	r0, #0
 6719 00a4 0870     		strb	r0, [r1, #0]
 6720 00a6 01F10101 		add	r1, r1, #1
 6721 00aa 02F1FF32 		add	r2, r2, #-1
 6722              	.L141:
  39:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new( static_cast<void *>( *memory ) ) uint8_t[numberOfObjectsToPreallocate];
 6723              		.loc 97 39 0 discriminator 3
 6724 00ae B2F1FF3F 		cmp	r2, #-1
 6725 00b2 0CBF     		ite	eq
 6726 00b4 0020     		moveq	r0, #0
 6727 00b6 0120     		movne	r0, #1
 6728 00b8 C0B2     		uxtb	r0, r0
 6729 00ba 0028     		cmp	r0, #0
 6730 00bc F0D1     		bne	.L142
 6731 00be FFE7     		b	.L143
 6732              	.L140:
 6733              	.L143:
  39:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new( static_cast<void *>( *memory ) ) uint8_t[numberOfObjectsToPreallocate];
 6734              		.loc 97 39 0 discriminator 6
 6735 00c0 FA68     		ldr	r2, [r7, #12]
 6736 00c2 9360     		str	r3, [r2, #8]
  40:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			*memory += numberOfObjectsToPreallocate;
 6737              		.loc 97 40 0 is_stmt 1 discriminator 6
 6738 00c4 7B68     		ldr	r3, [r7, #4]
 6739 00c6 1A68     		ldr	r2, [r3, #0]
 6740 00c8 BB68     		ldr	r3, [r7, #8]
 6741 00ca D218     		adds	r2, r2, r3
 6742 00cc 7B68     		ldr	r3, [r7, #4]
 6743 00ce 1A60     		str	r2, [r3, #0]
  43:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_dynamicMemoryUsed = false;
 6744              		.loc 97 43 0 discriminator 6
 6745 00d0 FB68     		ldr	r3, [r7, #12]
 6746 00d2 4FF00002 		mov	r2, #0
 6747 00d6 1A75     		strb	r2, [r3, #20]
 6748 00d8 52E0     		b	.L144
 6749              	.L135:
  50:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new T[numberOfObjectsToPreallocate];
 6750              		.loc 97 50 0
 6751 00da BD68     		ldr	r5, [r7, #8]
 6752 00dc 4FF02C03 		mov	r3, #44
 6753 00e0 03FB05F3 		mul	r3, r3, r5
 6754 00e4 03F10803 		add	r3, r3, #8
 6755 00e8 1846     		mov	r0, r3
 6756 00ea FFF7FEFF 		bl	_Znaj
 6757 00ee 0446     		mov	r4, r0
 6758 00f0 2346     		mov	r3, r4
 6759 00f2 03F10403 		add	r3, r3, #4
 6760 00f6 A3F10403 		sub	r3, r3, #4
 6761 00fa 4FF02C02 		mov	r2, #44
 6762 00fe 1A60     		str	r2, [r3, #0]
 6763 0100 2346     		mov	r3, r4
 6764 0102 03F10403 		add	r3, r3, #4
 6765 0106 1D60     		str	r5, [r3, #0]
 6766 0108 2346     		mov	r3, r4
 6767 010a 03F10803 		add	r3, r3, #8
 6768 010e 1E46     		mov	r6, r3
 6769 0110 05F1FF33 		add	r3, r5, #-1
 6770 0114 1D46     		mov	r5, r3
 6771 0116 06E0     		b	.L145
 6772              	.L146:
  50:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new T[numberOfObjectsToPreallocate];
 6773              		.loc 97 50 0 is_stmt 0 discriminator 2
 6774 0118 3046     		mov	r0, r6
 6775 011a FFF7FEFF 		bl	_ZN5Frame7PrivateC1Ev
 6776 011e 06F12C06 		add	r6, r6, #44
 6777 0122 05F1FF35 		add	r5, r5, #-1
 6778              	.L145:
  50:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new T[numberOfObjectsToPreallocate];
 6779              		.loc 97 50 0 discriminator 1
 6780 0126 B5F1FF3F 		cmp	r5, #-1
 6781 012a 0CBF     		ite	eq
 6782 012c 0023     		moveq	r3, #0
 6783 012e 0123     		movne	r3, #1
 6784 0130 DBB2     		uxtb	r3, r3
 6785 0132 002B     		cmp	r3, #0
 6786 0134 F0D1     		bne	.L146
  50:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectPool = new T[numberOfObjectsToPreallocate];
 6787              		.loc 97 50 0 discriminator 3
 6788 0136 2346     		mov	r3, r4
 6789 0138 03F10802 		add	r2, r3, #8
 6790 013c FB68     		ldr	r3, [r7, #12]
 6791 013e 5A60     		str	r2, [r3, #4]
  53:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new uint8_t[numberOfObjectsToPreallocate];
 6792              		.loc 97 53 0 is_stmt 1 discriminator 3
 6793 0140 BC68     		ldr	r4, [r7, #8]
 6794 0142 2046     		mov	r0, r4
 6795 0144 FFF7FEFF 		bl	_Znaj
 6796 0148 0146     		mov	r1, r0
 6797 014a 0B46     		mov	r3, r1
 6798 014c 1A46     		mov	r2, r3
 6799 014e 04F1FF33 		add	r3, r4, #-1
 6800 0152 06E0     		b	.L147
 6801              	.L148:
  53:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new uint8_t[numberOfObjectsToPreallocate];
 6802              		.loc 97 53 0 is_stmt 0 discriminator 2
 6803 0154 4FF00000 		mov	r0, #0
 6804 0158 1070     		strb	r0, [r2, #0]
 6805 015a 02F10102 		add	r2, r2, #1
 6806 015e 03F1FF33 		add	r3, r3, #-1
 6807              	.L147:
  53:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new uint8_t[numberOfObjectsToPreallocate];
 6808              		.loc 97 53 0 discriminator 1
 6809 0162 B3F1FF3F 		cmp	r3, #-1
 6810 0166 0CBF     		ite	eq
 6811 0168 0020     		moveq	r0, #0
 6812 016a 0120     		movne	r0, #1
 6813 016c C0B2     		uxtb	r0, r0
 6814 016e 0028     		cmp	r0, #0
 6815 0170 F0D1     		bne	.L148
  53:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_referenceCounts = new uint8_t[numberOfObjectsToPreallocate];
 6816              		.loc 97 53 0 discriminator 3
 6817 0172 0A46     		mov	r2, r1
 6818 0174 FB68     		ldr	r3, [r7, #12]
 6819 0176 9A60     		str	r2, [r3, #8]
  56:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_dynamicMemoryUsed = true;
 6820              		.loc 97 56 0 is_stmt 1 discriminator 3
 6821 0178 FB68     		ldr	r3, [r7, #12]
 6822 017a 4FF00102 		mov	r2, #1
 6823 017e 1A75     		strb	r2, [r3, #20]
 6824              	.L144:
  60:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		assert( _objectPool && _referenceCounts );
 6825              		.loc 97 60 0
 6826 0180 FB68     		ldr	r3, [r7, #12]
 6827 0182 5B68     		ldr	r3, [r3, #4]
 6828 0184 002B     		cmp	r3, #0
 6829 0186 03D0     		beq	.L149
  60:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		assert( _objectPool && _referenceCounts );
 6830              		.loc 97 60 0 is_stmt 0 discriminator 2
 6831 0188 FB68     		ldr	r3, [r7, #12]
 6832 018a 9B68     		ldr	r3, [r3, #8]
 6833 018c 002B     		cmp	r3, #0
 6834 018e 0FD1     		bne	.L150
 6835              	.L149:
  60:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		assert( _objectPool && _referenceCounts );
 6836              		.loc 97 60 0 discriminator 1
 6837 0190 40F20000 		movw	r0, #:lower16:.LC7
 6838 0194 C0F20000 		movt	r0, #:upper16:.LC7
 6839 0198 4FF03C01 		mov	r1, #60
 6840 019c 40F20002 		movw	r2, #:lower16:_ZZN10ObjectPoolIN5Frame7PrivateEEC1EjPPhE19__PRETTY_FUNCTION__
 6841 01a0 C0F20002 		movt	r2, #:upper16:_ZZN10ObjectPoolIN5Frame7PrivateEEC1EjPPhE19__PRETTY_FUNCTION__
 6842 01a4 40F20003 		movw	r3, #:lower16:.LC10
 6843 01a8 C0F20003 		movt	r3, #:upper16:.LC10
 6844 01ac FFF7FEFF 		bl	__assert_func
 6845              	.L150:
  61:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( _objectPool && _referenceCounts )
 6846              		.loc 97 61 0 is_stmt 1
 6847 01b0 FB68     		ldr	r3, [r7, #12]
 6848 01b2 5B68     		ldr	r3, [r3, #4]
 6849 01b4 002B     		cmp	r3, #0
 6850 01b6 12D0     		beq	.L151
  61:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( _objectPool && _referenceCounts )
 6851              		.loc 97 61 0 is_stmt 0 discriminator 1
 6852 01b8 FB68     		ldr	r3, [r7, #12]
 6853 01ba 9B68     		ldr	r3, [r3, #8]
 6854 01bc 002B     		cmp	r3, #0
 6855 01be 0ED0     		beq	.L151
  63:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			 memset( _referenceCounts , 0 , numberOfObjectsToPreallocate );
 6856              		.loc 97 63 0 is_stmt 1
 6857 01c0 FB68     		ldr	r3, [r7, #12]
 6858 01c2 9B68     		ldr	r3, [r3, #8]
 6859 01c4 1846     		mov	r0, r3
 6860 01c6 4FF00001 		mov	r1, #0
 6861 01ca BA68     		ldr	r2, [r7, #8]
 6862 01cc FFF7FEFF 		bl	memset
  64:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			 _objectCount = numberOfObjectsToPreallocate;
 6863              		.loc 97 64 0
 6864 01d0 FB68     		ldr	r3, [r7, #12]
 6865 01d2 BA68     		ldr	r2, [r7, #8]
 6866 01d4 DA60     		str	r2, [r3, #12]
  65:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			 _availableObjectCount = numberOfObjectsToPreallocate;
 6867              		.loc 97 65 0
 6868 01d6 FB68     		ldr	r3, [r7, #12]
 6869 01d8 BA68     		ldr	r2, [r7, #8]
 6870 01da 1A61     		str	r2, [r3, #16]
 6871 01dc 40E0     		b	.L152
 6872              	.L151:
  71:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 6873              		.loc 97 71 0
 6874 01de FB68     		ldr	r3, [r7, #12]
 6875 01e0 5B68     		ldr	r3, [r3, #4]
 6876 01e2 002B     		cmp	r3, #0
 6877 01e4 23D0     		beq	.L153
  71:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 6878              		.loc 97 71 0 is_stmt 0 discriminator 1
 6879 01e6 FB68     		ldr	r3, [r7, #12]
 6880 01e8 5B68     		ldr	r3, [r3, #4]
 6881 01ea 002B     		cmp	r3, #0
 6882 01ec 1FD0     		beq	.L153
 6883 01ee FB68     		ldr	r3, [r7, #12]
 6884 01f0 5A68     		ldr	r2, [r3, #4]
 6885 01f2 FB68     		ldr	r3, [r7, #12]
 6886 01f4 5B68     		ldr	r3, [r3, #4]
 6887 01f6 A3F10403 		sub	r3, r3, #4
 6888 01fa 1B68     		ldr	r3, [r3, #0]
 6889 01fc 4FF02C01 		mov	r1, #44
 6890 0200 01FB03F3 		mul	r3, r1, r3
 6891 0204 D418     		adds	r4, r2, r3
 6892              	.L155:
  71:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 6893              		.loc 97 71 0 discriminator 2
 6894 0206 FB68     		ldr	r3, [r7, #12]
 6895 0208 5B68     		ldr	r3, [r3, #4]
 6896 020a 9C42     		cmp	r4, r3
 6897 020c 08D0     		beq	.L154
  71:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 6898              		.loc 97 71 0 discriminator 4
 6899 020e A4F12C04 		sub	r4, r4, #44
 6900 0212 2046     		mov	r0, r4
 6901 0214 FFF7FEFF 		bl	_ZN5Frame7PrivateD1Ev
 6902 0218 F5E7     		b	.L155
 6903              	.L158:
 6904 021a 00BF     		.align	2
 6905              	.L157:
 6906 021c 08000000 		.word	_ZTV10ObjectPoolIN5Frame7PrivateEE+8
 6907              	.L154:
  71:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 6908              		.loc 97 71 0 discriminator 3
 6909 0220 FB68     		ldr	r3, [r7, #12]
 6910 0222 5B68     		ldr	r3, [r3, #4]
 6911 0224 A3F10803 		sub	r3, r3, #8
 6912 0228 1846     		mov	r0, r3
 6913 022a FFF7FEFF 		bl	_ZdaPv
 6914              	.L153:
  72:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
 6915              		.loc 97 72 0 is_stmt 1
 6916 022e FB68     		ldr	r3, [r7, #12]
 6917 0230 9B68     		ldr	r3, [r3, #8]
 6918 0232 002B     		cmp	r3, #0
 6919 0234 08D0     		beq	.L156
  72:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
 6920              		.loc 97 72 0 is_stmt 0 discriminator 1
 6921 0236 FB68     		ldr	r3, [r7, #12]
 6922 0238 9B68     		ldr	r3, [r3, #8]
 6923 023a 002B     		cmp	r3, #0
 6924 023c 04D0     		beq	.L156
 6925 023e FB68     		ldr	r3, [r7, #12]
 6926 0240 9B68     		ldr	r3, [r3, #8]
 6927 0242 1846     		mov	r0, r3
 6928 0244 FFF7FEFF 		bl	_ZdaPv
 6929              	.L156:
  73:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_dynamicMemoryUsed = false;
 6930              		.loc 97 73 0 is_stmt 1
 6931 0248 FB68     		ldr	r3, [r7, #12]
 6932 024a 4FF00002 		mov	r2, #0
 6933 024e 1A75     		strb	r2, [r3, #20]
  74:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_objectCount = 0;
 6934              		.loc 97 74 0
 6935 0250 FB68     		ldr	r3, [r7, #12]
 6936 0252 4FF00002 		mov	r2, #0
 6937 0256 DA60     		str	r2, [r3, #12]
  75:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_availableObjectCount = 0;
 6938              		.loc 97 75 0
 6939 0258 FB68     		ldr	r3, [r7, #12]
 6940 025a 4FF00002 		mov	r2, #0
 6941 025e 1A61     		str	r2, [r3, #16]
 6942              	.L152:
 6943              	.LBE39:
  75:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			_availableObjectCount = 0;
 6944              		.loc 97 75 0 is_stmt 0 discriminator 1
 6945 0260 FB68     		ldr	r3, [r7, #12]
  77:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 6946              		.loc 97 77 0 is_stmt 1 discriminator 1
 6947 0262 1846     		mov	r0, r3
 6948 0264 07F11407 		add	r7, r7, #20
 6949 0268 BD46     		mov	sp, r7
 6950 026a F0BD     		pop	{r4, r5, r6, r7, pc}
 6951              		.cfi_endproc
 6952              	.LFE1052:
 6954              		.weak	_ZN10ObjectPoolIN5Frame7PrivateEEC1EjPPh
 6955              		.thumb_set _ZN10ObjectPoolIN5Frame7PrivateEEC1EjPPh,_ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh
 6956              		.section	.text._ZNK10ObjectPoolIN5Frame7PrivateEE11objectCountEv,"axG",%progbits,_ZNK10ObjectPoolI
 6957              		.align	2
 6958              		.weak	_ZNK10ObjectPoolIN5Frame7PrivateEE11objectCountEv
 6959              		.thumb
 6960              		.thumb_func
 6962              	_ZNK10ObjectPoolIN5Frame7PrivateEE11objectCountEv:
 6963              	.LFB1054:
  97:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	size_t objectCount() const
 6964              		.loc 97 97 0
 6965              		.cfi_startproc
 6966              		@ args = 0, pretend = 0, frame = 8
 6967              		@ frame_needed = 1, uses_anonymous_args = 0
 6968              		@ link register save eliminated.
 6969 0000 80B4     		push	{r7}
 6970              	.LCFI113:
 6971              		.cfi_def_cfa_offset 4
 6972 0002 83B0     		sub	sp, sp, #12
 6973              	.LCFI114:
 6974              		.cfi_def_cfa_offset 16
 6975 0004 00AF     		add	r7, sp, #0
 6976              		.cfi_offset 7, -4
 6977              	.LCFI115:
 6978              		.cfi_def_cfa_register 7
 6979 0006 7860     		str	r0, [r7, #4]
  99:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		return _objectCount;
 6980              		.loc 97 99 0
 6981 0008 7B68     		ldr	r3, [r7, #4]
 6982 000a DB68     		ldr	r3, [r3, #12]
 100:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 6983              		.loc 97 100 0
 6984 000c 1846     		mov	r0, r3
 6985 000e 07F10C07 		add	r7, r7, #12
 6986 0012 BD46     		mov	sp, r7
 6987 0014 80BC     		pop	{r7}
 6988 0016 7047     		bx	lr
 6989              		.cfi_endproc
 6990              	.LFE1054:
 6992              		.weak	_ZTV10ObjectPoolIN5Frame7PrivateEE
 6993              		.section	.rodata._ZTV10ObjectPoolIN5Frame7PrivateEE,"aG",%progbits,_ZTV10ObjectPoolIN5Frame7Privat
 6994              		.align	3
 6997              	_ZTV10ObjectPoolIN5Frame7PrivateEE:
 6998 0000 00000000 		.word	0
 6999 0004 00000000 		.word	0
 7000 0008 00000000 		.word	_ZN10ObjectPoolIN5Frame7PrivateEED1Ev
 7001 000c 00000000 		.word	_ZN10ObjectPoolIN5Frame7PrivateEED0Ev
 7002              		.weak	_ZTV7AddressILj4EE
 7003              		.section	.rodata._ZTV7AddressILj4EE,"aG",%progbits,_ZTV7AddressILj4EE,comdat
 7004              		.align	3
 7007              	_ZTV7AddressILj4EE:
 7008 0000 00000000 		.word	0
 7009 0004 00000000 		.word	0
 7010 0008 00000000 		.word	_ZN7AddressILj4EED1Ev
 7011 000c 00000000 		.word	_ZN7AddressILj4EED0Ev
 7012              		.global	_ZTV5Frame
 7013              		.section	.rodata._ZTV5Frame,"a",%progbits
 7014              		.align	3
 7017              	_ZTV5Frame:
 7018 0000 00000000 		.word	0
 7019 0004 00000000 		.word	0
 7020 0008 00000000 		.word	_ZN5FrameD1Ev
 7021 000c 00000000 		.word	_ZN5FrameD0Ev
 7022              		.section	.rodata._ZL23MaximalFramePayloadSize,"a",%progbits
 7023              		.align	2
 7026              	_ZL23MaximalFramePayloadSize:
 7027 0000 20000000 		.word	32
 7028              		.section	.text._ZN10ObjectPoolIN5Frame7PrivateEED2Ev,"axG",%progbits,_ZN10ObjectPoolIN5Frame7Priva
 7029              		.align	2
 7030              		.weak	_ZN10ObjectPoolIN5Frame7PrivateEED2Ev
 7031              		.thumb
 7032              		.thumb_func
 7034              	_ZN10ObjectPoolIN5Frame7PrivateEED2Ev:
 7035              	.LFB1059:
  82:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	virtual ~ObjectPool()
 7036              		.loc 97 82 0
 7037              		.cfi_startproc
 7038              		@ args = 0, pretend = 0, frame = 8
 7039              		@ frame_needed = 1, uses_anonymous_args = 0
 7040 0000 90B5     		push	{r4, r7, lr}
 7041              	.LCFI116:
 7042              		.cfi_def_cfa_offset 12
 7043 0002 83B0     		sub	sp, sp, #12
 7044              	.LCFI117:
 7045              		.cfi_def_cfa_offset 24
 7046 0004 00AF     		add	r7, sp, #0
 7047              		.cfi_offset 14, -4
 7048              		.cfi_offset 7, -8
 7049              		.cfi_offset 4, -12
 7050              	.LCFI118:
 7051              		.cfi_def_cfa_register 7
 7052 0006 7860     		str	r0, [r7, #4]
 7053              	.LBB40:
  90:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 7054              		.loc 97 90 0
 7055 0008 7B68     		ldr	r3, [r7, #4]
 7056 000a 244A     		ldr	r2, .L166
 7057 000c 1A60     		str	r2, [r3, #0]
  85:/home/desem/workspace/desenet/utils/objectpool.hpp **** 		if ( _dynamicMemoryUsed )
 7058              		.loc 97 85 0
 7059 000e 7B68     		ldr	r3, [r7, #4]
 7060 0010 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 7061 0012 002B     		cmp	r3, #0
 7062 0014 31D0     		beq	.L161
  87:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 7063              		.loc 97 87 0
 7064 0016 7B68     		ldr	r3, [r7, #4]
 7065 0018 5B68     		ldr	r3, [r3, #4]
 7066 001a 002B     		cmp	r3, #0
 7067 001c 20D0     		beq	.L162
  87:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 7068              		.loc 97 87 0 is_stmt 0 discriminator 1
 7069 001e 7B68     		ldr	r3, [r7, #4]
 7070 0020 5B68     		ldr	r3, [r3, #4]
 7071 0022 002B     		cmp	r3, #0
 7072 0024 1CD0     		beq	.L162
 7073 0026 7B68     		ldr	r3, [r7, #4]
 7074 0028 5A68     		ldr	r2, [r3, #4]
 7075 002a 7B68     		ldr	r3, [r7, #4]
 7076 002c 5B68     		ldr	r3, [r3, #4]
 7077 002e A3F10403 		sub	r3, r3, #4
 7078 0032 1B68     		ldr	r3, [r3, #0]
 7079 0034 4FF02C01 		mov	r1, #44
 7080 0038 01FB03F3 		mul	r3, r1, r3
 7081 003c D418     		adds	r4, r2, r3
 7082              	.L164:
  87:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 7083              		.loc 97 87 0 discriminator 2
 7084 003e 7B68     		ldr	r3, [r7, #4]
 7085 0040 5B68     		ldr	r3, [r3, #4]
 7086 0042 9C42     		cmp	r4, r3
 7087 0044 05D0     		beq	.L163
  87:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 7088              		.loc 97 87 0 discriminator 4
 7089 0046 A4F12C04 		sub	r4, r4, #44
 7090 004a 2046     		mov	r0, r4
 7091 004c FFF7FEFF 		bl	_ZN5Frame7PrivateD1Ev
 7092 0050 F5E7     		b	.L164
 7093              	.L163:
  87:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _objectPool ) delete[] _objectPool;
 7094              		.loc 97 87 0 discriminator 3
 7095 0052 7B68     		ldr	r3, [r7, #4]
 7096 0054 5B68     		ldr	r3, [r3, #4]
 7097 0056 A3F10803 		sub	r3, r3, #8
 7098 005a 1846     		mov	r0, r3
 7099 005c FFF7FEFF 		bl	_ZdaPv
 7100              	.L162:
  88:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
 7101              		.loc 97 88 0 is_stmt 1
 7102 0060 7B68     		ldr	r3, [r7, #4]
 7103 0062 9B68     		ldr	r3, [r3, #8]
 7104 0064 002B     		cmp	r3, #0
 7105 0066 08D0     		beq	.L161
  88:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
 7106              		.loc 97 88 0 is_stmt 0 discriminator 1
 7107 0068 7B68     		ldr	r3, [r7, #4]
 7108 006a 9B68     		ldr	r3, [r3, #8]
 7109 006c 002B     		cmp	r3, #0
 7110 006e 04D0     		beq	.L161
 7111 0070 7B68     		ldr	r3, [r7, #4]
 7112 0072 9B68     		ldr	r3, [r3, #8]
 7113 0074 1846     		mov	r0, r3
 7114 0076 FFF7FEFF 		bl	_ZdaPv
 7115              	.L161:
 7116              	.LBE40:
  88:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
 7117              		.loc 97 88 0
 7118 007a 4FF00003 		mov	r3, #0
 7119 007e 03F00103 		and	r3, r3, #1
 7120 0082 DBB2     		uxtb	r3, r3
 7121 0084 002B     		cmp	r3, #0
 7122 0086 02D0     		beq	.L165
  88:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
 7123              		.loc 97 88 0 discriminator 2
 7124 0088 7868     		ldr	r0, [r7, #4]
 7125 008a FFF7FEFF 		bl	_ZdlPv
 7126              	.L165:
  88:/home/desem/workspace/desenet/utils/objectpool.hpp **** 			if ( _referenceCounts ) delete[] _referenceCounts;
 7127              		.loc 97 88 0 discriminator 3
 7128 008e 7B68     		ldr	r3, [r7, #4]
  90:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 7129              		.loc 97 90 0 is_stmt 1 discriminator 3
 7130 0090 1846     		mov	r0, r3
 7131 0092 07F10C07 		add	r7, r7, #12
 7132 0096 BD46     		mov	sp, r7
 7133 0098 90BD     		pop	{r4, r7, pc}
 7134              	.L167:
 7135 009a 00BF     		.align	2
 7136              	.L166:
 7137 009c 08000000 		.word	_ZTV10ObjectPoolIN5Frame7PrivateEE+8
 7138              		.cfi_endproc
 7139              	.LFE1059:
 7141              		.weak	_ZN10ObjectPoolIN5Frame7PrivateEED1Ev
 7142              		.thumb_set _ZN10ObjectPoolIN5Frame7PrivateEED1Ev,_ZN10ObjectPoolIN5Frame7PrivateEED2Ev
 7143              		.section	.text._ZN10ObjectPoolIN5Frame7PrivateEED0Ev,"axG",%progbits,_ZN10ObjectPoolIN5Frame7Priva
 7144              		.align	2
 7145              		.weak	_ZN10ObjectPoolIN5Frame7PrivateEED0Ev
 7146              		.thumb
 7147              		.thumb_func
 7149              	_ZN10ObjectPoolIN5Frame7PrivateEED0Ev:
 7150              	.LFB1061:
  82:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	virtual ~ObjectPool()
 7151              		.loc 97 82 0
 7152              		.cfi_startproc
 7153              		@ args = 0, pretend = 0, frame = 8
 7154              		@ frame_needed = 1, uses_anonymous_args = 0
 7155 0000 80B5     		push	{r7, lr}
 7156              	.LCFI119:
 7157              		.cfi_def_cfa_offset 8
 7158 0002 82B0     		sub	sp, sp, #8
 7159              	.LCFI120:
 7160              		.cfi_def_cfa_offset 16
 7161 0004 00AF     		add	r7, sp, #0
 7162              		.cfi_offset 14, -4
 7163              		.cfi_offset 7, -8
 7164              	.LCFI121:
 7165              		.cfi_def_cfa_register 7
 7166 0006 7860     		str	r0, [r7, #4]
  90:/home/desem/workspace/desenet/utils/objectpool.hpp **** 	}
 7167              		.loc 97 90 0
 7168 0008 7868     		ldr	r0, [r7, #4]
 7169 000a FFF7FEFF 		bl	_ZN10ObjectPoolIN5Frame7PrivateEED1Ev
 7170 000e 7868     		ldr	r0, [r7, #4]
 7171 0010 FFF7FEFF 		bl	_ZdlPv
 7172 0014 7B68     		ldr	r3, [r7, #4]
 7173 0016 1846     		mov	r0, r3
 7174 0018 07F10807 		add	r7, r7, #8
 7175 001c BD46     		mov	sp, r7
 7176 001e 80BD     		pop	{r7, pc}
 7177              		.cfi_endproc
 7178              	.LFE1061:
 7180              		.section	.rodata._ZZN5Frame19initializeFramePoolEjPPhE19__PRETTY_FUNCTION__,"a",%progbits
 7181              		.align	2
 7184              	_ZZN5Frame19initializeFramePoolEjPPhE19__PRETTY_FUNCTION__:
 7185 0000 73746174 		.ascii	"static bool Frame::initializeFramePool(size_t, uint"
 7185      69632062 
 7185      6F6F6C20 
 7185      4672616D 
 7185      653A3A69 
 7186 0033 385F742A 		.ascii	"8_t**)\000"
 7186      2A2900
 7187 003a 0000     		.section	.rodata._ZZN10ObjectPoolIN5Frame7PrivateEEC1EjPPhE19__PRETTY_FUNCTION__,"a",%progbits
 7188              		.align	2
 7191              	_ZZN10ObjectPoolIN5Frame7PrivateEEC1EjPPhE19__PRETTY_FUNCTION__:
 7192 0000 4F626A65 		.ascii	"ObjectPool<T>::ObjectPool(size_t, uint8_t**) [with "
 7192      6374506F 
 7192      6F6C3C54 
 7192      3E3A3A4F 
 7192      626A6563 
 7193 0033 54203D20 		.ascii	"T = Frame::Private, size_t = unsigned int, uint8_t "
 7193      4672616D 
 7193      653A3A50 
 7193      72697661 
 7193      74652C20 
 7194 0066 3D20756E 		.ascii	"= unsigned char]\000"
 7194      7369676E 
 7194      65642063 
 7194      6861725D 
 7194      00
 7195 0077 00       		.section	.rodata._ZZNK5Frame8toStringEvE19__PRETTY_FUNCTION__,"a",%progbits
 7196              		.align	2
 7199              	_ZZNK5Frame8toStringEvE19__PRETTY_FUNCTION__:
 7200 0000 636F6E73 		.ascii	"const char* Frame::toString() const\000"
 7200      74206368 
 7200      61722A20 
 7200      4672616D 
 7200      653A3A74 
 7201              		.section	.bss._ZZNK5Frame8toStringEvE3str,"aw",%nobits
 7202              		.align	2
 7205              	_ZZNK5Frame8toStringEvE3str:
 7206 0000 00000000 		.space	96
 7206      00000000 
 7206      00000000 
 7206      00000000 
 7206      00000000 
 7207              		.section	.rodata._ZZNK5Frame12payloadBytesEvE19__PRETTY_FUNCTION__,"a",%progbits
 7208              		.align	2
 7211              	_ZZNK5Frame12payloadBytesEvE19__PRETTY_FUNCTION__:
 7212 0000 636F6E73 		.ascii	"const uint8_t* const Frame::payloadBytes() const\000"
 7212      74207569 
 7212      6E74385F 
 7212      742A2063 
 7212      6F6E7374 
 7213 0031 000000   		.section	.rodata._ZZN5Frame12payloadBytesEvE19__PRETTY_FUNCTION__,"a",%progbits
 7214              		.align	2
 7217              	_ZZN5Frame12payloadBytesEvE19__PRETTY_FUNCTION__:
 7218 0000 75696E74 		.ascii	"uint8_t* Frame::payloadBytes()\000"
 7218      385F742A 
 7218      20467261 
 7218      6D653A3A 
 7218      7061796C 
 7219 001f 00       		.section	.rodata._ZZNK5FrameixEjE19__PRETTY_FUNCTION__,"a",%progbits
 7220              		.align	2
 7223              	_ZZNK5FrameixEjE19__PRETTY_FUNCTION__:
 7224 0000 636F6E73 		.ascii	"const uint8_t& Frame::operator[](size_t) const\000"
 7224      74207569 
 7224      6E74385F 
 7224      74262046 
 7224      72616D65 
 7225 002f 00       		.section	.rodata._ZZN5FrameixEjE19__PRETTY_FUNCTION__,"a",%progbits
 7226              		.align	2
 7229              	_ZZN5FrameixEjE19__PRETTY_FUNCTION__:
 7230 0000 75696E74 		.ascii	"uint8_t& Frame::operator[](size_t)\000"
 7230      385F7426 
 7230      20467261 
 7230      6D653A3A 
 7230      6F706572 
 7231 0023 00       		.section	.rodata._ZZN5Frame14setPayloadSizeEjE19__PRETTY_FUNCTION__,"a",%progbits
 7232              		.align	2
 7235              	_ZZN5Frame14setPayloadSizeEjE19__PRETTY_FUNCTION__:
 7236 0000 766F6964 		.ascii	"void Frame::setPayloadSize(size_t)\000"
 7236      20467261 
 7236      6D653A3A 
 7236      73657450 
 7236      61796C6F 
 7237 0023 00       		.section	.rodata._ZZNK5Frame11payloadSizeEvE19__PRETTY_FUNCTION__,"a",%progbits
 7238              		.align	2
 7241              	_ZZNK5Frame11payloadSizeEvE19__PRETTY_FUNCTION__:
 7242 0000 73697A65 		.ascii	"size_t Frame::payloadSize() const\000"
 7242      5F742046 
 7242      72616D65 
 7242      3A3A7061 
 7242      796C6F61 
 7243 0022 0000     		.section	.rodata._ZZN5Frame10setAddressERK7AddressILj4EEE19__PRETTY_FUNCTION__,"a",%progbits
 7244              		.align	2
 7247              	_ZZN5Frame10setAddressERK7AddressILj4EEE19__PRETTY_FUNCTION__:
 7248 0000 766F6964 		.ascii	"void Frame::setAddress(const Frame::FrameAddress&)\000"
 7248      20467261 
 7248      6D653A3A 
 7248      73657441 
 7248      64647265 
 7249 0033 00       		.section	.rodata._ZZNK5Frame7addressEvE19__PRETTY_FUNCTION__,"a",%progbits
 7250              		.align	2
 7253              	_ZZNK5Frame7addressEvE19__PRETTY_FUNCTION__:
 7254 0000 4672616D 		.ascii	"Frame::FrameAddress Frame::address() const\000"
 7254      653A3A46 
 7254      72616D65 
 7254      41646472 
 7254      65737320 
 7255 002b 00       		.section	.rodata._ZZN5Frame8deepCopyEvE19__PRETTY_FUNCTION__,"a",%progbits
 7256              		.align	2
 7259              	_ZZN5Frame8deepCopyEvE19__PRETTY_FUNCTION__:
 7260 0000 4672616D 		.ascii	"Frame Frame::deepCopy()\000"
 7260      65204672 
 7260      616D653A 
 7260      3A646565 
 7260      70436F70 
 7261              		.section	.rodata._ZZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_E19__PRETTY_FUNCTION__,"a",%progbit
 7262              		.align	2
 7265              	_ZZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_E19__PRETTY_FUNCTION__:
 7266 0000 766F6964 		.ascii	"void ObjectPool<T>::retain(T*) [with T = Frame::Pri"
 7266      204F626A 
 7266      65637450 
 7266      6F6F6C3C 
 7266      543E3A3A 
 7267 0033 76617465 		.ascii	"vate]\000"
 7267      5D00
 7268 0039 000000   		.section	.rodata._ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__,"a",%progb
 7269              		.align	2
 7272              	_ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__:
 7273 0000 4672616D 		.ascii	"Frame::Frame(const Frame::FrameAddress&, const std:"
 7273      653A3A46 
 7273      72616D65 
 7273      28636F6E 
 7273      73742046 
 7274 0033 3A766563 		.ascii	":vector<unsigned char>&)\000"
 7274      746F723C 
 7274      756E7369 
 7274      676E6564 
 7274      20636861 
 7275              		.section	.rodata._ZZN10ObjectPoolIN5Frame7PrivateEE8allocateEvE19__PRETTY_FUNCTION__,"a",%progbits
 7276              		.align	2
 7279              	_ZZN10ObjectPoolIN5Frame7PrivateEE8allocateEvE19__PRETTY_FUNCTION__:
 7280 0000 542A204F 		.ascii	"T* ObjectPool<T>::allocate() [with T = Frame::Priva"
 7280      626A6563 
 7280      74506F6F 
 7280      6C3C543E 
 7280      3A3A616C 
 7281 0033 74655D00 		.ascii	"te]\000"
 7282 0037 00       		.section	.rodata._ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__,"a",%progbits
 7283              		.align	2
 7286              	_ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__:
 7287 0000 4672616D 		.ascii	"Frame::Frame(const Frame::FrameAddress&, const void"
 7287      653A3A46 
 7287      72616D65 
 7287      28636F6E 
 7287      73742046 
 7288 0033 2A2C2073 		.ascii	"*, size_t)\000"
 7288      697A655F 
 7288      742900
 7289 003e 0000     		.section	.rodata._ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__,"a",%progbits
 7290              		.align	2
 7293              	_ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__:
 7294 0000 4672616D 		.ascii	"Frame::Frame(const Frame::FrameAddress&, size_t)\000"
 7294      653A3A46 
 7294      72616D65 
 7294      28636F6E 
 7294      73742046 
 7295 0031 000000   		.section	.rodata._ZZN5FrameC1EvE19__PRETTY_FUNCTION__,"a",%progbits
 7296              		.align	2
 7299              	_ZZN5FrameC1EvE19__PRETTY_FUNCTION__:
 7300 0000 4672616D 		.ascii	"Frame::Frame()\000"
 7300      653A3A46 
 7300      72616D65 
 7300      282900
 7301 000f 00       		.text
 7302              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 frame.cpp
     /tmp/ccB9mkaT.s:3951   .text._ZnwjPv:00000000 $t
     /tmp/ccB9mkaT.s:3956   .text._ZnwjPv:00000000 _ZnwjPv
     /tmp/ccB9mkaT.s:3986   .text._ZnajPv:00000000 $t
     /tmp/ccB9mkaT.s:3991   .text._ZnajPv:00000000 _ZnajPv
     /tmp/ccB9mkaT.s:4021   .text._ZL20__gthread_key_deletei:00000000 $t
     /tmp/ccB9mkaT.s:4025   .text._ZL20__gthread_key_deletei:00000000 _ZL20__gthread_key_deletei
     /tmp/ccB9mkaT.s:4058   .bss._ZN5Frame7Private9dummyByteE:00000000 _ZN5Frame7Private9dummyByteE
     /tmp/ccB9mkaT.s:4059   .bss._ZN5Frame7Private9dummyByteE:00000000 $d
     /tmp/ccB9mkaT.s:4065   .bss._ZN5Frame7Private9framePoolE:00000000 _ZN5Frame7Private9framePoolE
     /tmp/ccB9mkaT.s:4062   .bss._ZN5Frame7Private9framePoolE:00000000 $d
     /tmp/ccB9mkaT.s:4068   .rodata:00000000 $d
     /tmp/ccB9mkaT.s:4069   .rodata:00000000 .LC0
     /tmp/ccB9mkaT.s:4072   .rodata:00000014 .LC1
     /tmp/ccB9mkaT.s:4075   .rodata:00000028 .LC2
     /tmp/ccB9mkaT.s:4078   .text._ZN5FrameC2Ev:00000000 $t
     /tmp/ccB9mkaT.s:4083   .text._ZN5FrameC2Ev:00000000 _ZN5FrameC2Ev
     /tmp/ccB9mkaT.s:7299   .rodata._ZZN5FrameC1EvE19__PRETTY_FUNCTION__:00000000 _ZZN5FrameC1EvE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5928   .text._ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv:00000000 _ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv
     /tmp/ccB9mkaT.s:4176   .text._ZN5FrameC2Ev:000000b0 $d
     /tmp/ccB9mkaT.s:7017   .rodata._ZTV5Frame:00000000 _ZTV5Frame
     /tmp/ccB9mkaT.s:4083   .text._ZN5FrameC2Ev:00000000 _ZN5FrameC1Ev
     /tmp/ccB9mkaT.s:4183   .text._ZN7AddressILj4EEaSERKS0_:00000000 $t
     /tmp/ccB9mkaT.s:4188   .text._ZN7AddressILj4EEaSERKS0_:00000000 _ZN7AddressILj4EEaSERKS0_
     /tmp/ccB9mkaT.s:4222   .text._ZN5FrameC2ERK7AddressILj4EEj:00000000 $t
     /tmp/ccB9mkaT.s:4227   .text._ZN5FrameC2ERK7AddressILj4EEj:00000000 _ZN5FrameC2ERK7AddressILj4EEj
     /tmp/ccB9mkaT.s:7293   .rodata._ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__:00000000 _ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:7026   .rodata._ZL23MaximalFramePayloadSize:00000000 _ZL23MaximalFramePayloadSize
     /tmp/ccB9mkaT.s:6041   .text._ZSt3minIjERKT_S2_S2_:00000000 _ZSt3minIjERKT_S2_S2_
     /tmp/ccB9mkaT.s:4335   .text._ZN5FrameC2ERK7AddressILj4EEj:000000d0 $d
     /tmp/ccB9mkaT.s:4227   .text._ZN5FrameC2ERK7AddressILj4EEj:00000000 _ZN5FrameC1ERK7AddressILj4EEj
     /tmp/ccB9mkaT.s:4342   .text._ZN5FrameC2ERK7AddressILj4EEPKvj:00000000 $t
     /tmp/ccB9mkaT.s:4347   .text._ZN5FrameC2ERK7AddressILj4EEPKvj:00000000 _ZN5FrameC2ERK7AddressILj4EEPKvj
     /tmp/ccB9mkaT.s:7286   .rodata._ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__:00000000 _ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:4475   .text._ZN5FrameC2ERK7AddressILj4EEPKvj:000000f4 $d
     /tmp/ccB9mkaT.s:4347   .text._ZN5FrameC2ERK7AddressILj4EEPKvj:00000000 _ZN5FrameC1ERK7AddressILj4EEPKvj
     /tmp/ccB9mkaT.s:4482   .text._ZN5FrameC2ERK7AddressILj4EERKSt6vectorIhSaIhEE:00000000 $t
     /tmp/ccB9mkaT.s:4487   .text._ZN5FrameC2ERK7AddressILj4EERKSt6vectorIhSaIhEE:00000000 _ZN5FrameC2ERK7AddressILj4EERKSt6vectorIhSaIhEE
     /tmp/ccB9mkaT.s:7272   .rodata._ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__:00000000 _ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:6089   .text._ZNKSt6vectorIhSaIhEE4sizeEv:00000000 _ZNKSt6vectorIhSaIhEE4sizeEv
     /tmp/ccB9mkaT.s:6128   .text._ZNKSt6vectorIhSaIhEE4dataEv:00000000 _ZNKSt6vectorIhSaIhEE4dataEv
     /tmp/ccB9mkaT.s:4624   .text._ZN5FrameC2ERK7AddressILj4EERKSt6vectorIhSaIhEE:00000110 $d
     /tmp/ccB9mkaT.s:4487   .text._ZN5FrameC2ERK7AddressILj4EERKSt6vectorIhSaIhEE:00000000 _ZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEE
     /tmp/ccB9mkaT.s:4631   .text._ZN5FrameD2Ev:00000000 $t
     /tmp/ccB9mkaT.s:4636   .text._ZN5FrameD2Ev:00000000 _ZN5FrameD2Ev
     /tmp/ccB9mkaT.s:6163   .text._ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_:00000000 _ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_
     /tmp/ccB9mkaT.s:4695   .text._ZN5FrameD2Ev:00000054 $d
     /tmp/ccB9mkaT.s:4636   .text._ZN5FrameD2Ev:00000000 _ZN5FrameD1Ev
     /tmp/ccB9mkaT.s:4702   .text._ZN5FrameD0Ev:00000000 $t
     /tmp/ccB9mkaT.s:4707   .text._ZN5FrameD0Ev:00000000 _ZN5FrameD0Ev
     /tmp/ccB9mkaT.s:4739   .text._ZN5FrameC2ERKS_:00000000 $t
     /tmp/ccB9mkaT.s:4744   .text._ZN5FrameC2ERKS_:00000000 _ZN5FrameC2ERKS_
     /tmp/ccB9mkaT.s:6252   .text._ZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_:00000000 _ZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_
     /tmp/ccB9mkaT.s:4816   .text._ZN5FrameC2ERKS_:00000068 $d
     /tmp/ccB9mkaT.s:4744   .text._ZN5FrameC2ERKS_:00000000 _ZN5FrameC1ERKS_
     /tmp/ccB9mkaT.s:4823   .text._ZN5FrameaSERKS_:00000000 $t
     /tmp/ccB9mkaT.s:4828   .text._ZN5FrameaSERKS_:00000000 _ZN5FrameaSERKS_
     /tmp/ccB9mkaT.s:4899   .rodata:00000030 .LC3
     /tmp/ccB9mkaT.s:4902   .text._ZN5Frame8deepCopyEv:00000000 $t
     /tmp/ccB9mkaT.s:4907   .text._ZN5Frame8deepCopyEv:00000000 _ZN5Frame8deepCopyEv
     /tmp/ccB9mkaT.s:7259   .rodata._ZZN5Frame8deepCopyEvE19__PRETTY_FUNCTION__:00000000 _ZZN5Frame8deepCopyEvE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5008   .text._ZN7AddressILj4EEC2ERKS0_:00000000 $t
     /tmp/ccB9mkaT.s:5013   .text._ZN7AddressILj4EEC2ERKS0_:00000000 _ZN7AddressILj4EEC2ERKS0_
     /tmp/ccB9mkaT.s:5051   .text._ZN7AddressILj4EEC2ERKS0_:00000028 $d
     /tmp/ccB9mkaT.s:7007   .rodata._ZTV7AddressILj4EE:00000000 _ZTV7AddressILj4EE
     /tmp/ccB9mkaT.s:5013   .text._ZN7AddressILj4EEC2ERKS0_:00000000 _ZN7AddressILj4EEC1ERKS0_
     /tmp/ccB9mkaT.s:5058   .text._ZNK5Frame7addressEv:00000000 $t
     /tmp/ccB9mkaT.s:5063   .text._ZNK5Frame7addressEv:00000000 _ZNK5Frame7addressEv
     /tmp/ccB9mkaT.s:7253   .rodata._ZZNK5Frame7addressEvE19__PRETTY_FUNCTION__:00000000 _ZZNK5Frame7addressEvE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:6430   .text._ZN7AddressILj4EEC2Ev:00000000 _ZN7AddressILj4EEC1Ev
     /tmp/ccB9mkaT.s:5129   .text._ZN5Frame10setAddressERK7AddressILj4EE:00000000 $t
     /tmp/ccB9mkaT.s:5134   .text._ZN5Frame10setAddressERK7AddressILj4EE:00000000 _ZN5Frame10setAddressERK7AddressILj4EE
     /tmp/ccB9mkaT.s:7247   .rodata._ZZN5Frame10setAddressERK7AddressILj4EEE19__PRETTY_FUNCTION__:00000000 _ZZN5Frame10setAddressERK7AddressILj4EEE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5190   .text._ZNK5Frame11payloadSizeEv:00000000 $t
     /tmp/ccB9mkaT.s:5195   .text._ZNK5Frame11payloadSizeEv:00000000 _ZNK5Frame11payloadSizeEv
     /tmp/ccB9mkaT.s:7241   .rodata._ZZNK5Frame11payloadSizeEvE19__PRETTY_FUNCTION__:00000000 _ZZNK5Frame11payloadSizeEvE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5253   .text._ZN5Frame23maximalFramePayloadSizeEv:00000000 $t
     /tmp/ccB9mkaT.s:5258   .text._ZN5Frame23maximalFramePayloadSizeEv:00000000 _ZN5Frame23maximalFramePayloadSizeEv
     /tmp/ccB9mkaT.s:5283   .text._ZN5Frame14setPayloadSizeEj:00000000 $t
     /tmp/ccB9mkaT.s:5288   .text._ZN5Frame14setPayloadSizeEj:00000000 _ZN5Frame14setPayloadSizeEj
     /tmp/ccB9mkaT.s:7235   .rodata._ZZN5Frame14setPayloadSizeEjE19__PRETTY_FUNCTION__:00000000 _ZZN5Frame14setPayloadSizeEjE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5344   .rodata:00000048 .LC4
     /tmp/ccB9mkaT.s:5347   .text._ZN5FrameixEj:00000000 $t
     /tmp/ccB9mkaT.s:5352   .text._ZN5FrameixEj:00000000 _ZN5FrameixEj
     /tmp/ccB9mkaT.s:7229   .rodata._ZZN5FrameixEjE19__PRETTY_FUNCTION__:00000000 _ZZN5FrameixEjE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:6482   .text._ZSt3maxIjERKT_S2_S2_:00000000 _ZSt3maxIjERKT_S2_S2_
     /tmp/ccB9mkaT.s:5440   .text._ZNK5FrameixEj:00000000 $t
     /tmp/ccB9mkaT.s:5445   .text._ZNK5FrameixEj:00000000 _ZNK5FrameixEj
     /tmp/ccB9mkaT.s:7223   .rodata._ZZNK5FrameixEjE19__PRETTY_FUNCTION__:00000000 _ZZNK5FrameixEjE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5516   .text._ZN5Frame12payloadBytesEv:00000000 $t
     /tmp/ccB9mkaT.s:5521   .text._ZN5Frame12payloadBytesEv:00000000 _ZN5Frame12payloadBytesEv
     /tmp/ccB9mkaT.s:7217   .rodata._ZZN5Frame12payloadBytesEvE19__PRETTY_FUNCTION__:00000000 _ZZN5Frame12payloadBytesEvE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5579   .text._ZNK5Frame12payloadBytesEv:00000000 $t
     /tmp/ccB9mkaT.s:5584   .text._ZNK5Frame12payloadBytesEv:00000000 _ZNK5Frame12payloadBytesEv
     /tmp/ccB9mkaT.s:7211   .rodata._ZZNK5Frame12payloadBytesEvE19__PRETTY_FUNCTION__:00000000 _ZZNK5Frame12payloadBytesEvE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5643   .rodata:00000074 .LC5
     /tmp/ccB9mkaT.s:5646   .text._ZNK5Frame8toStringEv:00000000 $t
     /tmp/ccB9mkaT.s:5651   .text._ZNK5Frame8toStringEv:00000000 _ZNK5Frame8toStringEv
     /tmp/ccB9mkaT.s:7199   .rodata._ZZNK5Frame8toStringEvE19__PRETTY_FUNCTION__:00000000 _ZZNK5Frame8toStringEvE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:7205   .bss._ZZNK5Frame8toStringEvE3str:00000000 _ZZNK5Frame8toStringEvE3str
     /tmp/ccB9mkaT.s:5767   .rodata:0000007c .LC6
     /tmp/ccB9mkaT.s:5771   .text._ZN5Frame19initializeFramePoolEjPPh:00000000 $t
     /tmp/ccB9mkaT.s:5776   .text._ZN5Frame19initializeFramePoolEjPPh:00000000 _ZN5Frame19initializeFramePoolEjPPh
     /tmp/ccB9mkaT.s:6614   .text._ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh:00000000 _ZN10ObjectPoolIN5Frame7PrivateEEC1EjPPh
     /tmp/ccB9mkaT.s:6962   .text._ZNK10ObjectPoolIN5Frame7PrivateEE11objectCountEv:00000000 _ZNK10ObjectPoolIN5Frame7PrivateEE11objectCountEv
     /tmp/ccB9mkaT.s:7184   .rodata._ZZN5Frame19initializeFramePoolEjPPhE19__PRETTY_FUNCTION__:00000000 _ZZN5Frame19initializeFramePoolEjPPhE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:5917   .rodata:000000d0 .LC7
     /tmp/ccB9mkaT.s:5920   .rodata:00000104 .LC8
     /tmp/ccB9mkaT.s:5923   .text._ZN10ObjectPoolIN5Frame7PrivateEE8allocateEv:00000000 $t
     /tmp/ccB9mkaT.s:7279   .rodata._ZZN10ObjectPoolIN5Frame7PrivateEE8allocateEvE19__PRETTY_FUNCTION__:00000000 _ZZN10ObjectPoolIN5Frame7PrivateEE8allocateEvE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:6036   .text._ZSt3minIjERKT_S2_S2_:00000000 $t
     /tmp/ccB9mkaT.s:6084   .text._ZNKSt6vectorIhSaIhEE4sizeEv:00000000 $t
     /tmp/ccB9mkaT.s:6123   .text._ZNKSt6vectorIhSaIhEE4dataEv:00000000 $t
     /tmp/ccB9mkaT.s:6158   .text._ZN10ObjectPoolIN5Frame7PrivateEE7releaseEPS1_:00000000 $t
     /tmp/ccB9mkaT.s:6244   .rodata:0000010c .LC9
     /tmp/ccB9mkaT.s:6247   .text._ZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_:00000000 $t
     /tmp/ccB9mkaT.s:7265   .rodata._ZZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_E19__PRETTY_FUNCTION__:00000000 _ZZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_E19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:6334   .text._ZN7AddressILj4EED2Ev:00000000 $t
     /tmp/ccB9mkaT.s:6339   .text._ZN7AddressILj4EED2Ev:00000000 _ZN7AddressILj4EED2Ev
     /tmp/ccB9mkaT.s:6381   .text._ZN7AddressILj4EED2Ev:00000030 $d
     /tmp/ccB9mkaT.s:6339   .text._ZN7AddressILj4EED2Ev:00000000 _ZN7AddressILj4EED1Ev
     /tmp/ccB9mkaT.s:6388   .text._ZN7AddressILj4EED0Ev:00000000 $t
     /tmp/ccB9mkaT.s:6393   .text._ZN7AddressILj4EED0Ev:00000000 _ZN7AddressILj4EED0Ev
     /tmp/ccB9mkaT.s:6425   .text._ZN7AddressILj4EEC2Ev:00000000 $t
     /tmp/ccB9mkaT.s:6430   .text._ZN7AddressILj4EEC2Ev:00000000 _ZN7AddressILj4EEC2Ev
     /tmp/ccB9mkaT.s:6470   .text._ZN7AddressILj4EEC2Ev:00000030 $d
     /tmp/ccB9mkaT.s:6477   .text._ZSt3maxIjERKT_S2_S2_:00000000 $t
     /tmp/ccB9mkaT.s:6525   .text._ZN5Frame7PrivateC2Ev:00000000 $t
     /tmp/ccB9mkaT.s:6530   .text._ZN5Frame7PrivateC2Ev:00000000 _ZN5Frame7PrivateC2Ev
     /tmp/ccB9mkaT.s:6530   .text._ZN5Frame7PrivateC2Ev:00000000 _ZN5Frame7PrivateC1Ev
     /tmp/ccB9mkaT.s:6565   .text._ZN5Frame7PrivateD2Ev:00000000 $t
     /tmp/ccB9mkaT.s:6570   .text._ZN5Frame7PrivateD2Ev:00000000 _ZN5Frame7PrivateD2Ev
     /tmp/ccB9mkaT.s:6570   .text._ZN5Frame7PrivateD2Ev:00000000 _ZN5Frame7PrivateD1Ev
     /tmp/ccB9mkaT.s:6606   .rodata:0000012c .LC10
     /tmp/ccB9mkaT.s:6609   .text._ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh:00000000 $t
     /tmp/ccB9mkaT.s:6614   .text._ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh:00000000 _ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh
     /tmp/ccB9mkaT.s:7191   .rodata._ZZN10ObjectPoolIN5Frame7PrivateEEC1EjPPhE19__PRETTY_FUNCTION__:00000000 _ZZN10ObjectPoolIN5Frame7PrivateEEC1EjPPhE19__PRETTY_FUNCTION__
     /tmp/ccB9mkaT.s:6906   .text._ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh:0000021c $d
     /tmp/ccB9mkaT.s:6997   .rodata._ZTV10ObjectPoolIN5Frame7PrivateEE:00000000 _ZTV10ObjectPoolIN5Frame7PrivateEE
     /tmp/ccB9mkaT.s:6909   .text._ZN10ObjectPoolIN5Frame7PrivateEEC2EjPPh:00000220 $t
     /tmp/ccB9mkaT.s:6957   .text._ZNK10ObjectPoolIN5Frame7PrivateEE11objectCountEv:00000000 $t
     /tmp/ccB9mkaT.s:6994   .rodata._ZTV10ObjectPoolIN5Frame7PrivateEE:00000000 $d
     /tmp/ccB9mkaT.s:7034   .text._ZN10ObjectPoolIN5Frame7PrivateEED2Ev:00000000 _ZN10ObjectPoolIN5Frame7PrivateEED1Ev
     /tmp/ccB9mkaT.s:7149   .text._ZN10ObjectPoolIN5Frame7PrivateEED0Ev:00000000 _ZN10ObjectPoolIN5Frame7PrivateEED0Ev
     /tmp/ccB9mkaT.s:7004   .rodata._ZTV7AddressILj4EE:00000000 $d
     /tmp/ccB9mkaT.s:7014   .rodata._ZTV5Frame:00000000 $d
     /tmp/ccB9mkaT.s:7023   .rodata._ZL23MaximalFramePayloadSize:00000000 $d
     /tmp/ccB9mkaT.s:7029   .text._ZN10ObjectPoolIN5Frame7PrivateEED2Ev:00000000 $t
     /tmp/ccB9mkaT.s:7034   .text._ZN10ObjectPoolIN5Frame7PrivateEED2Ev:00000000 _ZN10ObjectPoolIN5Frame7PrivateEED2Ev
     /tmp/ccB9mkaT.s:7137   .text._ZN10ObjectPoolIN5Frame7PrivateEED2Ev:0000009c $d
     /tmp/ccB9mkaT.s:7144   .text._ZN10ObjectPoolIN5Frame7PrivateEED0Ev:00000000 $t
     /tmp/ccB9mkaT.s:7181   .rodata._ZZN5Frame19initializeFramePoolEjPPhE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7188   .rodata._ZZN10ObjectPoolIN5Frame7PrivateEEC1EjPPhE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7196   .rodata._ZZNK5Frame8toStringEvE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7202   .bss._ZZNK5Frame8toStringEvE3str:00000000 $d
     /tmp/ccB9mkaT.s:7208   .rodata._ZZNK5Frame12payloadBytesEvE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7214   .rodata._ZZN5Frame12payloadBytesEvE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7220   .rodata._ZZNK5FrameixEjE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7226   .rodata._ZZN5FrameixEjE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7232   .rodata._ZZN5Frame14setPayloadSizeEjE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7238   .rodata._ZZNK5Frame11payloadSizeEvE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7244   .rodata._ZZN5Frame10setAddressERK7AddressILj4EEE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7250   .rodata._ZZNK5Frame7addressEvE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7256   .rodata._ZZN5Frame8deepCopyEvE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7262   .rodata._ZZN10ObjectPoolIN5Frame7PrivateEE6retainEPS1_E19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7269   .rodata._ZZN5FrameC1ERK7AddressILj4EERKSt6vectorIhSaIhEEE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7276   .rodata._ZZN10ObjectPoolIN5Frame7PrivateEE8allocateEvE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7283   .rodata._ZZN5FrameC1ERK7AddressILj4EEPKvjE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7290   .rodata._ZZN5FrameC1ERK7AddressILj4EEjE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/ccB9mkaT.s:7296   .rodata._ZZN5FrameC1EvE19__PRETTY_FUNCTION__:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 _ZN7AddressILj4EEC5ERKS0_
                           .group:00000000 _ZN7AddressILj4EED5Ev
                           .group:00000000 _ZN7AddressILj4EEC5Ev
                           .group:00000000 _ZN5Frame7PrivateC5Ev
                           .group:00000000 _ZN5Frame7PrivateD5Ev
                           .group:00000000 _ZN10ObjectPoolIN5Frame7PrivateEEC5EjPPh
                           .group:00000000 _ZN10ObjectPoolIN5Frame7PrivateEED5Ev

UNDEFINED SYMBOLS
__assert_func
memcpy
_ZdlPv
sprintf
_Znwj
memset
_Znaj
_ZdaPv
