   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"critical.c"
  23              	.Ltext0:
  24              		.file 1 "../target/stm32/critical/critical.c"
 670              	bInISR:
 671 0000 00       		.space	1
 672              		.global	bEnterCriticalRegionNested
 673              		.section	.bss.bEnterCriticalRegionNested,"aw",%nobits
 676              	bEnterCriticalRegionNested:
 677 0000 00       		.space	1
 678              		.section	.text.enterCritical,"ax",%progbits
 679              		.align	2
 680              		.global	enterCritical
 681              		.thumb
 682              		.thumb_func
 684              	enterCritical:
 685              	.LFB0:
   1:../target/stm32/critical/critical.c **** #include "critical.h"
   2:../target/stm32/critical/critical.c **** 
   3:../target/stm32/critical/critical.c **** 
   4:../target/stm32/critical/critical.c **** volatile unsigned char bInISR = 0;
   5:../target/stm32/critical/critical.c **** volatile unsigned char bEnterCriticalRegionNested = 0;
   6:../target/stm32/critical/critical.c **** 
   7:../target/stm32/critical/critical.c **** 
   8:../target/stm32/critical/critical.c **** void enterCritical()
   9:../target/stm32/critical/critical.c **** {
 686              		.loc 1 9 0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 1, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 691 0000 80B4     		push	{r7}
 692              	.LCFI0:
 693              		.cfi_def_cfa_offset 4
 694 0002 00AF     		add	r7, sp, #0
 695              		.cfi_offset 7, -4
 696              	.LCFI1:
 697              		.cfi_def_cfa_register 7
  10:../target/stm32/critical/critical.c **** 	// Only disable interrupts when not calling from an ISR
  11:../target/stm32/critical/critical.c **** 	if (!inISR())
 698              		.loc 1 11 0
 699 0004 40F20003 		movw	r3, #:lower16:bInISR
 700 0008 C0F20003 		movt	r3, #:upper16:bInISR
 701 000c 1B78     		ldrb	r3, [r3, #0]
 702 000e DBB2     		uxtb	r3, r3
 703 0010 002B     		cmp	r3, #0
 704 0012 16D1     		bne	.L1
  12:../target/stm32/critical/critical.c **** 	{
  13:../target/stm32/critical/critical.c **** 		if (!bEnterCriticalRegionNested)
 705              		.loc 1 13 0
 706 0014 40F20003 		movw	r3, #:lower16:bEnterCriticalRegionNested
 707 0018 C0F20003 		movt	r3, #:upper16:bEnterCriticalRegionNested
 708 001c 1B78     		ldrb	r3, [r3, #0]
 709 001e DBB2     		uxtb	r3, r3
 710 0020 002B     		cmp	r3, #0
 711 0022 00D1     		bne	.L3
  14:../target/stm32/critical/critical.c **** 		{
  15:../target/stm32/critical/critical.c **** 			// Turn off the priority configurable interrupts
  16:../target/stm32/critical/critical.c **** 			asm volatile ("cpsid i");
 712              		.loc 1 16 0
 713              	@ 16 "../target/stm32/critical/critical.c" 1
 714 0024 72B6     		cpsid i
 715              	@ 0 "" 2
 716              		.thumb
 717              	.L3:
  17:../target/stm32/critical/critical.c **** 		}
  18:../target/stm32/critical/critical.c **** 		bEnterCriticalRegionNested++;
 718              		.loc 1 18 0
 719 0026 40F20003 		movw	r3, #:lower16:bEnterCriticalRegionNested
 720 002a C0F20003 		movt	r3, #:upper16:bEnterCriticalRegionNested
 721 002e 1B78     		ldrb	r3, [r3, #0]
 722 0030 DBB2     		uxtb	r3, r3
 723 0032 03F10103 		add	r3, r3, #1
 724 0036 DAB2     		uxtb	r2, r3
 725 0038 40F20003 		movw	r3, #:lower16:bEnterCriticalRegionNested
 726 003c C0F20003 		movt	r3, #:upper16:bEnterCriticalRegionNested
 727 0040 1A70     		strb	r2, [r3, #0]
 728              	.L1:
  19:../target/stm32/critical/critical.c **** 	}
  20:../target/stm32/critical/critical.c **** 
  21:../target/stm32/critical/critical.c **** }
 729              		.loc 1 21 0
 730 0042 BD46     		mov	sp, r7
 731 0044 80BC     		pop	{r7}
 732 0046 7047     		bx	lr
 733              		.cfi_endproc
 734              	.LFE0:
 736              		.section	.text.exitCritical,"ax",%progbits
 737              		.align	2
 738              		.global	exitCritical
 739              		.thumb
 740              		.thumb_func
 742              	exitCritical:
 743              	.LFB1:
  22:../target/stm32/critical/critical.c **** 
  23:../target/stm32/critical/critical.c **** void exitCritical()
  24:../target/stm32/critical/critical.c **** {
 744              		.loc 1 24 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
 747              		@ frame_needed = 1, uses_anonymous_args = 0
 748              		@ link register save eliminated.
 749 0000 80B4     		push	{r7}
 750              	.LCFI2:
 751              		.cfi_def_cfa_offset 4
 752 0002 00AF     		add	r7, sp, #0
 753              		.cfi_offset 7, -4
 754              	.LCFI3:
 755              		.cfi_def_cfa_register 7
  25:../target/stm32/critical/critical.c **** 	// Only enable interrupts when not calling from an ISR
  26:../target/stm32/critical/critical.c **** 	if (!inISR())
 756              		.loc 1 26 0
 757 0004 40F20003 		movw	r3, #:lower16:bInISR
 758 0008 C0F20003 		movt	r3, #:upper16:bInISR
 759 000c 1B78     		ldrb	r3, [r3, #0]
 760 000e DBB2     		uxtb	r3, r3
 761 0010 002B     		cmp	r3, #0
 762 0012 16D1     		bne	.L4
  27:../target/stm32/critical/critical.c **** 	{
  28:../target/stm32/critical/critical.c **** 		bEnterCriticalRegionNested--;
 763              		.loc 1 28 0
 764 0014 40F20003 		movw	r3, #:lower16:bEnterCriticalRegionNested
 765 0018 C0F20003 		movt	r3, #:upper16:bEnterCriticalRegionNested
 766 001c 1B78     		ldrb	r3, [r3, #0]
 767 001e DBB2     		uxtb	r3, r3
 768 0020 03F1FF33 		add	r3, r3, #-1
 769 0024 DAB2     		uxtb	r2, r3
 770 0026 40F20003 		movw	r3, #:lower16:bEnterCriticalRegionNested
 771 002a C0F20003 		movt	r3, #:upper16:bEnterCriticalRegionNested
 772 002e 1A70     		strb	r2, [r3, #0]
  29:../target/stm32/critical/critical.c **** 
  30:../target/stm32/critical/critical.c **** 		if (!bEnterCriticalRegionNested)
 773              		.loc 1 30 0
 774 0030 40F20003 		movw	r3, #:lower16:bEnterCriticalRegionNested
 775 0034 C0F20003 		movt	r3, #:upper16:bEnterCriticalRegionNested
 776 0038 1B78     		ldrb	r3, [r3, #0]
 777 003a DBB2     		uxtb	r3, r3
 778 003c 002B     		cmp	r3, #0
 779 003e 00D1     		bne	.L4
  31:../target/stm32/critical/critical.c **** 		{
  32:../target/stm32/critical/critical.c **** 			// Turn on the interrupts with configurable priority
  33:../target/stm32/critical/critical.c **** 			asm volatile("cpsie i");
 780              		.loc 1 33 0
 781              	@ 33 "../target/stm32/critical/critical.c" 1
 782 0040 62B6     		cpsie i
 783              	@ 0 "" 2
 784              		.thumb
 785              	.L4:
  34:../target/stm32/critical/critical.c **** 		}
  35:../target/stm32/critical/critical.c **** 	}
  36:../target/stm32/critical/critical.c **** }
 786              		.loc 1 36 0
 787 0042 BD46     		mov	sp, r7
 788 0044 80BC     		pop	{r7}
 789 0046 7047     		bx	lr
 790              		.cfi_endproc
 791              	.LFE1:
 793              		.text
 794              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 critical.c
     /tmp/ccFQi6UC.s:670    .bss.bInISR:00000000 bInISR
     /tmp/ccFQi6UC.s:671    .bss.bInISR:00000000 $d
     /tmp/ccFQi6UC.s:676    .bss.bEnterCriticalRegionNested:00000000 bEnterCriticalRegionNested
     /tmp/ccFQi6UC.s:677    .bss.bEnterCriticalRegionNested:00000000 $d
     /tmp/ccFQi6UC.s:679    .text.enterCritical:00000000 $t
     /tmp/ccFQi6UC.s:684    .text.enterCritical:00000000 enterCritical
     /tmp/ccFQi6UC.s:737    .text.exitCritical:00000000 $t
     /tmp/ccFQi6UC.s:742    .text.exitCritical:00000000 exitCritical
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
