   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"fix16.c"
  23              	.Ltext0:
  24              		.file 1 "../fixmath/fix16.c"
 905              		.align	2
 908              	fix16_max:
 909 0000 FFFFFF7F 		.word	2147483647
 910              		.section	.rodata.fix16_min,"a",%progbits
 911              		.align	2
 914              	fix16_min:
 915 0000 00000080 		.word	-2147483648
 916              		.section	.rodata.fix16_pi,"a",%progbits
 917              		.align	2
 920              	fix16_pi:
 921 0000 3F240300 		.word	205887
 922              		.section	.rodata.fix16_e,"a",%progbits
 923              		.align	2
 926              	fix16_e:
 927 0000 E1B70200 		.word	178145
 928              		.section	.rodata.fix16_one,"a",%progbits
 929              		.align	2
 932              	fix16_one:
 933 0000 00000100 		.word	65536
 934              		.section	.text.fix16_sadd,"ax",%progbits
 935              		.align	2
 936              		.global	fix16_sadd
 937              		.thumb
 938              		.thumb_func
 940              	fix16_sadd:
 941              	.LFB9:
   1:../fixmath/fix16.c **** #include "fix16.h"
   2:../fixmath/fix16.c **** 
   3:../fixmath/fix16.c **** 
   4:../fixmath/fix16.c **** 
   5:../fixmath/fix16.c **** fix16_t fix16_sadd(fix16_t inArg0, fix16_t inArg1) {
 942              		.loc 1 5 0
 943              		.cfi_startproc
 944              		@ args = 0, pretend = 0, frame = 16
 945              		@ frame_needed = 1, uses_anonymous_args = 0
 946              		@ link register save eliminated.
 947 0000 80B4     		push	{r7}
 948              	.LCFI0:
 949              		.cfi_def_cfa_offset 4
 950 0002 85B0     		sub	sp, sp, #20
 951              	.LCFI1:
 952              		.cfi_def_cfa_offset 24
 953 0004 00AF     		add	r7, sp, #0
 954              		.cfi_offset 7, -4
 955              	.LCFI2:
 956              		.cfi_def_cfa_register 7
 957 0006 7860     		str	r0, [r7, #4]
 958 0008 3960     		str	r1, [r7, #0]
   6:../fixmath/fix16.c **** 	fix16_t tempResult = (inArg0 + inArg1);
 959              		.loc 1 6 0
 960 000a 7A68     		ldr	r2, [r7, #4]
 961 000c 3B68     		ldr	r3, [r7, #0]
 962 000e D318     		adds	r3, r2, r3
 963 0010 FB60     		str	r3, [r7, #12]
   7:../fixmath/fix16.c **** 	if((tempResult > 0) && (inArg0 < 0) && (inArg1 < 0))
 964              		.loc 1 7 0
 965 0012 FB68     		ldr	r3, [r7, #12]
 966 0014 002B     		cmp	r3, #0
 967 0016 0BDD     		ble	.L2
 968              		.loc 1 7 0 is_stmt 0 discriminator 1
 969 0018 7B68     		ldr	r3, [r7, #4]
 970 001a 002B     		cmp	r3, #0
 971 001c 08DA     		bge	.L2
 972 001e 3B68     		ldr	r3, [r7, #0]
 973 0020 002B     		cmp	r3, #0
 974 0022 05DA     		bge	.L2
   8:../fixmath/fix16.c **** 		return fix16_min;
 975              		.loc 1 8 0 is_stmt 1
 976 0024 40F20003 		movw	r3, #:lower16:fix16_min
 977 0028 C0F20003 		movt	r3, #:upper16:fix16_min
 978 002c 1B68     		ldr	r3, [r3, #0]
 979 002e 0FE0     		b	.L3
 980              	.L2:
   9:../fixmath/fix16.c **** 	if((tempResult < 0) && (inArg0 > 0) && (inArg1 > 0))
 981              		.loc 1 9 0
 982 0030 FB68     		ldr	r3, [r7, #12]
 983 0032 002B     		cmp	r3, #0
 984 0034 0BDA     		bge	.L4
 985              		.loc 1 9 0 is_stmt 0 discriminator 1
 986 0036 7B68     		ldr	r3, [r7, #4]
 987 0038 002B     		cmp	r3, #0
 988 003a 08DD     		ble	.L4
 989 003c 3B68     		ldr	r3, [r7, #0]
 990 003e 002B     		cmp	r3, #0
 991 0040 05DD     		ble	.L4
  10:../fixmath/fix16.c **** 		return fix16_max;
 992              		.loc 1 10 0 is_stmt 1
 993 0042 40F20003 		movw	r3, #:lower16:fix16_max
 994 0046 C0F20003 		movt	r3, #:upper16:fix16_max
 995 004a 1B68     		ldr	r3, [r3, #0]
 996 004c 00E0     		b	.L3
 997              	.L4:
  11:../fixmath/fix16.c **** 	return tempResult;
 998              		.loc 1 11 0
 999 004e FB68     		ldr	r3, [r7, #12]
 1000              	.L3:
  12:../fixmath/fix16.c **** }
 1001              		.loc 1 12 0
 1002 0050 1846     		mov	r0, r3
 1003 0052 07F11407 		add	r7, r7, #20
 1004 0056 BD46     		mov	sp, r7
 1005 0058 80BC     		pop	{r7}
 1006 005a 7047     		bx	lr
 1007              		.cfi_endproc
 1008              	.LFE9:
 1010              		.section	.text.fix16_mul,"ax",%progbits
 1011              		.align	2
 1012              		.global	fix16_mul
 1013              		.thumb
 1014              		.thumb_func
 1016              	fix16_mul:
 1017              	.LFB10:
  13:../fixmath/fix16.c **** 
  14:../fixmath/fix16.c **** 
  15:../fixmath/fix16.c **** 
  16:../fixmath/fix16.c **** fix16_t fix16_mul(fix16_t inArg0, fix16_t inArg1) {
 1018              		.loc 1 16 0
 1019              		.cfi_startproc
 1020              		@ args = 0, pretend = 0, frame = 16
 1021              		@ frame_needed = 1, uses_anonymous_args = 0
 1022              		@ link register save eliminated.
 1023 0000 B0B4     		push	{r4, r5, r7}
 1024              	.LCFI3:
 1025              		.cfi_def_cfa_offset 12
 1026 0002 85B0     		sub	sp, sp, #20
 1027              	.LCFI4:
 1028              		.cfi_def_cfa_offset 32
 1029 0004 00AF     		add	r7, sp, #0
 1030              		.cfi_offset 7, -4
 1031              		.cfi_offset 5, -8
 1032              		.cfi_offset 4, -12
 1033              	.LCFI5:
 1034              		.cfi_def_cfa_register 7
 1035 0006 7860     		str	r0, [r7, #4]
 1036 0008 3960     		str	r1, [r7, #0]
  17:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_64BIT
  18:../fixmath/fix16.c **** 	int64_t tempResult = ((int64_t)inArg0 * (int64_t)inArg1);
 1037              		.loc 1 18 0
 1038 000a 7B68     		ldr	r3, [r7, #4]
 1039 000c 1846     		mov	r0, r3
 1040 000e 4FEAE371 		asr	r1, r3, #31
 1041 0012 3B68     		ldr	r3, [r7, #0]
 1042 0014 1A46     		mov	r2, r3
 1043 0016 4FEAE373 		asr	r3, r3, #31
 1044 001a 02FB01F4 		mul	r4, r2, r1
 1045 001e 00FB03F5 		mul	r5, r0, r3
 1046 0022 6419     		adds	r4, r4, r5
 1047 0024 A0FB0223 		umull	r2, r3, r0, r2
 1048 0028 E418     		adds	r4, r4, r3
 1049 002a 2346     		mov	r3, r4
 1050 002c C7E90223 		strd	r2, [r7, #8]
 1051 0030 C7E90223 		strd	r2, [r7, #8]
  19:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_ROUNDING
  20:../fixmath/fix16.c **** 	tempResult += (fix16_one >> 1);
 1052              		.loc 1 20 0
 1053 0034 40F20003 		movw	r3, #:lower16:fix16_one
 1054 0038 C0F20003 		movt	r3, #:upper16:fix16_one
 1055 003c 1B68     		ldr	r3, [r3, #0]
 1056 003e 4FEA6303 		asr	r3, r3, #1
 1057 0042 1A46     		mov	r2, r3
 1058 0044 4FEAE373 		asr	r3, r3, #31
 1059 0048 D7E90201 		ldrd	r0, [r7, #8]
 1060 004c 1218     		adds	r2, r2, r0
 1061 004e 43EB0103 		adc	r3, r3, r1
 1062 0052 C7E90223 		strd	r2, [r7, #8]
  21:../fixmath/fix16.c **** 	#endif
  22:../fixmath/fix16.c **** 	tempResult >>= 16;
 1063              		.loc 1 22 0
 1064 0056 FB68     		ldr	r3, [r7, #12]
 1065 0058 4FEA0343 		lsl	r3, r3, #16
 1066 005c BA68     		ldr	r2, [r7, #8]
 1067 005e 4FEA1242 		lsr	r2, r2, #16
 1068 0062 42EA0303 		orr	r3, r2, r3
 1069 0066 BB60     		str	r3, [r7, #8]
 1070 0068 FB68     		ldr	r3, [r7, #12]
 1071 006a 4FEA2343 		asr	r3, r3, #16
 1072 006e FB60     		str	r3, [r7, #12]
  23:../fixmath/fix16.c **** 	return tempResult;
 1073              		.loc 1 23 0
 1074 0070 BB68     		ldr	r3, [r7, #8]
  24:../fixmath/fix16.c **** 	#else
  25:../fixmath/fix16.c **** 	 int16_t hi[2] = { (inArg0 >> 16),    (inArg1 >> 16)    };
  26:../fixmath/fix16.c **** 	uint16_t lo[2] = { (inArg0 & 0xFFFF), (inArg1 & 0xFFFF) };
  27:../fixmath/fix16.c **** 
  28:../fixmath/fix16.c **** 	 int32_t r_hi = hi[0] * hi[1];
  29:../fixmath/fix16.c **** 	 int32_t r_md = (hi[0] * lo[1]) + (hi[1] * lo[0]);
  30:../fixmath/fix16.c **** 	uint32_t r_lo = lo[0] * lo[1];
  31:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_ROUNDING
  32:../fixmath/fix16.c **** 	r_lo += 0xFFFF;
  33:../fixmath/fix16.c **** 	#endif
  34:../fixmath/fix16.c **** 
  35:../fixmath/fix16.c **** 	r_md += (r_hi & 0xFFFF) << 16;
  36:../fixmath/fix16.c **** 	r_md += (r_lo >> 16);
  37:../fixmath/fix16.c **** 
  38:../fixmath/fix16.c **** 	return r_md;
  39:../fixmath/fix16.c **** 	#endif
  40:../fixmath/fix16.c **** }
 1075              		.loc 1 40 0
 1076 0072 1846     		mov	r0, r3
 1077 0074 07F11407 		add	r7, r7, #20
 1078 0078 BD46     		mov	sp, r7
 1079 007a B0BC     		pop	{r4, r5, r7}
 1080 007c 7047     		bx	lr
 1081              		.cfi_endproc
 1082              	.LFE10:
 1084 007e 00BF     		.section	.text.fix16_smul,"ax",%progbits
 1085              		.align	2
 1086              		.global	fix16_smul
 1087              		.thumb
 1088              		.thumb_func
 1090              	fix16_smul:
 1091              	.LFB11:
  41:../fixmath/fix16.c **** 
  42:../fixmath/fix16.c **** fix16_t fix16_smul(fix16_t inArg0, fix16_t inArg1) {
 1092              		.loc 1 42 0
 1093              		.cfi_startproc
 1094              		@ args = 0, pretend = 0, frame = 16
 1095              		@ frame_needed = 1, uses_anonymous_args = 0
 1096              		@ link register save eliminated.
 1097 0000 B0B4     		push	{r4, r5, r7}
 1098              	.LCFI6:
 1099              		.cfi_def_cfa_offset 12
 1100 0002 85B0     		sub	sp, sp, #20
 1101              	.LCFI7:
 1102              		.cfi_def_cfa_offset 32
 1103 0004 00AF     		add	r7, sp, #0
 1104              		.cfi_offset 7, -4
 1105              		.cfi_offset 5, -8
 1106              		.cfi_offset 4, -12
 1107              	.LCFI8:
 1108              		.cfi_def_cfa_register 7
 1109 0006 7860     		str	r0, [r7, #4]
 1110 0008 3960     		str	r1, [r7, #0]
  43:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_64BIT
  44:../fixmath/fix16.c **** 	int64_t tempResult = ((int64_t)inArg0 * (int64_t)inArg1);
 1111              		.loc 1 44 0
 1112 000a 7B68     		ldr	r3, [r7, #4]
 1113 000c 1846     		mov	r0, r3
 1114 000e 4FEAE371 		asr	r1, r3, #31
 1115 0012 3B68     		ldr	r3, [r7, #0]
 1116 0014 1A46     		mov	r2, r3
 1117 0016 4FEAE373 		asr	r3, r3, #31
 1118 001a 02FB01F4 		mul	r4, r2, r1
 1119 001e 00FB03F5 		mul	r5, r0, r3
 1120 0022 6419     		adds	r4, r4, r5
 1121 0024 A0FB0223 		umull	r2, r3, r0, r2
 1122 0028 E418     		adds	r4, r4, r3
 1123 002a 2346     		mov	r3, r4
 1124 002c C7E90223 		strd	r2, [r7, #8]
 1125 0030 C7E90223 		strd	r2, [r7, #8]
  45:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_ROUNDING
  46:../fixmath/fix16.c **** 	tempResult += (fix16_one >> 1);
 1126              		.loc 1 46 0
 1127 0034 40F20003 		movw	r3, #:lower16:fix16_one
 1128 0038 C0F20003 		movt	r3, #:upper16:fix16_one
 1129 003c 1B68     		ldr	r3, [r3, #0]
 1130 003e 4FEA6303 		asr	r3, r3, #1
 1131 0042 1A46     		mov	r2, r3
 1132 0044 4FEAE373 		asr	r3, r3, #31
 1133 0048 D7E90201 		ldrd	r0, [r7, #8]
 1134 004c 1218     		adds	r2, r2, r0
 1135 004e 43EB0103 		adc	r3, r3, r1
 1136 0052 C7E90223 		strd	r2, [r7, #8]
  47:../fixmath/fix16.c **** 	#endif
  48:../fixmath/fix16.c **** 	tempResult >>= 16;
 1137              		.loc 1 48 0
 1138 0056 FB68     		ldr	r3, [r7, #12]
 1139 0058 4FEA0343 		lsl	r3, r3, #16
 1140 005c BA68     		ldr	r2, [r7, #8]
 1141 005e 4FEA1242 		lsr	r2, r2, #16
 1142 0062 42EA0303 		orr	r3, r2, r3
 1143 0066 BB60     		str	r3, [r7, #8]
 1144 0068 FB68     		ldr	r3, [r7, #12]
 1145 006a 4FEA2343 		asr	r3, r3, #16
 1146 006e FB60     		str	r3, [r7, #12]
  49:../fixmath/fix16.c **** 	if(tempResult < fix16_min)
 1147              		.loc 1 49 0
 1148 0070 40F20003 		movw	r3, #:lower16:fix16_min
 1149 0074 C0F20003 		movt	r3, #:upper16:fix16_min
 1150 0078 1B68     		ldr	r3, [r3, #0]
 1151 007a 1A46     		mov	r2, r3
 1152 007c 4FEAE373 		asr	r3, r3, #31
 1153 0080 D7E90201 		ldrd	r0, [r7, #8]
 1154 0084 9042     		cmp	r0, r2
 1155 0086 71EB030C 		sbcs	ip, r1, r3
 1156 008a 05DA     		bge	.L7
  50:../fixmath/fix16.c **** 		return fix16_min;
 1157              		.loc 1 50 0
 1158 008c 40F20003 		movw	r3, #:lower16:fix16_min
 1159 0090 C0F20003 		movt	r3, #:upper16:fix16_min
 1160 0094 1B68     		ldr	r3, [r3, #0]
 1161 0096 14E0     		b	.L8
 1162              	.L7:
  51:../fixmath/fix16.c **** 	if(tempResult > fix16_max)
 1163              		.loc 1 51 0
 1164 0098 40F20003 		movw	r3, #:lower16:fix16_max
 1165 009c C0F20003 		movt	r3, #:upper16:fix16_max
 1166 00a0 1B68     		ldr	r3, [r3, #0]
 1167 00a2 1846     		mov	r0, r3
 1168 00a4 4FEAE371 		asr	r1, r3, #31
 1169 00a8 D7E90223 		ldrd	r2, [r7, #8]
 1170 00ac 9042     		cmp	r0, r2
 1171 00ae 71EB030C 		sbcs	ip, r1, r3
 1172 00b2 05DA     		bge	.L9
  52:../fixmath/fix16.c **** 		return fix16_max;
 1173              		.loc 1 52 0
 1174 00b4 40F20003 		movw	r3, #:lower16:fix16_max
 1175 00b8 C0F20003 		movt	r3, #:upper16:fix16_max
 1176 00bc 1B68     		ldr	r3, [r3, #0]
 1177 00be 00E0     		b	.L8
 1178              	.L9:
  53:../fixmath/fix16.c **** 	return tempResult;
 1179              		.loc 1 53 0
 1180 00c0 BB68     		ldr	r3, [r7, #8]
 1181              	.L8:
  54:../fixmath/fix16.c **** 	#else
  55:../fixmath/fix16.c **** 	 int16_t hi[2] = { (inArg0 >> 16),    (inArg1 >> 16)    };
  56:../fixmath/fix16.c **** 	 int32_t r_hi = hi[0] * hi[1];
  57:../fixmath/fix16.c **** 	 if(r_hi >> 16)
  58:../fixmath/fix16.c **** 		return (r_hi < 0 ? fix16_min : fix16_max);
  59:../fixmath/fix16.c **** 
  60:../fixmath/fix16.c **** 	uint16_t lo[2] = { (inArg0 & 0xFFFF), (inArg1 & 0xFFFF) };
  61:../fixmath/fix16.c **** 	 int32_t r_md = (hi[0] * lo[1]) + (hi[1] * lo[0]);
  62:../fixmath/fix16.c **** 	uint32_t r_lo = lo[0] * lo[1];
  63:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_ROUNDING
  64:../fixmath/fix16.c **** 	r_lo += 0xFFFF;
  65:../fixmath/fix16.c **** 	#endif
  66:../fixmath/fix16.c **** 
  67:../fixmath/fix16.c **** 	r_md += (r_hi & 0xFFFF) << 16;
  68:../fixmath/fix16.c **** 	r_md += (r_lo >> 16);
  69:../fixmath/fix16.c **** 
  70:../fixmath/fix16.c **** 	return r_md;
  71:../fixmath/fix16.c **** 	#endif
  72:../fixmath/fix16.c **** }
 1182              		.loc 1 72 0
 1183 00c2 1846     		mov	r0, r3
 1184 00c4 07F11407 		add	r7, r7, #20
 1185 00c8 BD46     		mov	sp, r7
 1186 00ca B0BC     		pop	{r4, r5, r7}
 1187 00cc 7047     		bx	lr
 1188              		.cfi_endproc
 1189              	.LFE11:
 1191              		.global	__aeabi_ldivmod
 1192 00ce 00BF     		.section	.text.fix16_div,"ax",%progbits
 1193              		.align	2
 1194              		.global	fix16_div
 1195              		.thumb
 1196              		.thumb_func
 1198              	fix16_div:
 1199              	.LFB12:
  73:../fixmath/fix16.c **** 
  74:../fixmath/fix16.c **** 
  75:../fixmath/fix16.c **** 
  76:../fixmath/fix16.c **** fix16_t fix16_div(fix16_t inArg0, fix16_t inArg1) {
 1200              		.loc 1 76 0
 1201              		.cfi_startproc
 1202              		@ args = 0, pretend = 0, frame = 16
 1203              		@ frame_needed = 1, uses_anonymous_args = 0
 1204 0000 80B5     		push	{r7, lr}
 1205              	.LCFI9:
 1206              		.cfi_def_cfa_offset 8
 1207 0002 84B0     		sub	sp, sp, #16
 1208              	.LCFI10:
 1209              		.cfi_def_cfa_offset 24
 1210 0004 00AF     		add	r7, sp, #0
 1211              		.cfi_offset 14, -4
 1212              		.cfi_offset 7, -8
 1213              	.LCFI11:
 1214              		.cfi_def_cfa_register 7
 1215 0006 7860     		str	r0, [r7, #4]
 1216 0008 3960     		str	r1, [r7, #0]
  77:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_64BIT
  78:../fixmath/fix16.c **** 	int64_t tempResult = inArg0;
 1217              		.loc 1 78 0
 1218 000a 7B68     		ldr	r3, [r7, #4]
 1219 000c 1A46     		mov	r2, r3
 1220 000e 4FEAE373 		asr	r3, r3, #31
 1221 0012 C7E90223 		strd	r2, [r7, #8]
  79:../fixmath/fix16.c **** 	tempResult <<= 16;
 1222              		.loc 1 79 0
 1223 0016 BB68     		ldr	r3, [r7, #8]
 1224 0018 4FEA1343 		lsr	r3, r3, #16
 1225 001c FA68     		ldr	r2, [r7, #12]
 1226 001e 4FEA0242 		lsl	r2, r2, #16
 1227 0022 42EA0303 		orr	r3, r2, r3
 1228 0026 FB60     		str	r3, [r7, #12]
 1229 0028 BB68     		ldr	r3, [r7, #8]
 1230 002a 4FEA0343 		lsl	r3, r3, #16
 1231 002e BB60     		str	r3, [r7, #8]
  80:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_ROUNDING
  81:../fixmath/fix16.c **** 	tempResult += (inArg1 >> 1);
 1232              		.loc 1 81 0
 1233 0030 3B68     		ldr	r3, [r7, #0]
 1234 0032 4FEA6303 		asr	r3, r3, #1
 1235 0036 1A46     		mov	r2, r3
 1236 0038 4FEAE373 		asr	r3, r3, #31
 1237 003c D7E90201 		ldrd	r0, [r7, #8]
 1238 0040 1218     		adds	r2, r2, r0
 1239 0042 43EB0103 		adc	r3, r3, r1
 1240 0046 C7E90223 		strd	r2, [r7, #8]
  82:../fixmath/fix16.c **** 	#endif
  83:../fixmath/fix16.c **** 	tempResult /= inArg1;
 1241              		.loc 1 83 0
 1242 004a 3B68     		ldr	r3, [r7, #0]
 1243 004c 1A46     		mov	r2, r3
 1244 004e 4FEAE373 		asr	r3, r3, #31
 1245 0052 D7E90201 		ldrd	r0, [r7, #8]
 1246 0056 FFF7FEFF 		bl	__aeabi_ldivmod
 1247 005a 0246     		mov	r2, r0
 1248 005c 0B46     		mov	r3, r1
 1249 005e C7E90223 		strd	r2, [r7, #8]
  84:../fixmath/fix16.c **** 	return tempResult;
 1250              		.loc 1 84 0
 1251 0062 BB68     		ldr	r3, [r7, #8]
  85:../fixmath/fix16.c **** 	#else
  86:../fixmath/fix16.c **** 	int neg = ((inArg0 < 0) != (inArg1 < 0));
  87:../fixmath/fix16.c **** 	inArg0 = (inArg0 < 0 ? -inArg0 : inArg0);
  88:../fixmath/fix16.c **** 	inArg1 = (inArg1 < 0 ? -inArg1 : inArg1);
  89:../fixmath/fix16.c **** 
  90:../fixmath/fix16.c **** 	while(((inArg0 | inArg1) & 1) == 0) {
  91:../fixmath/fix16.c **** 		inArg0 >>= 1;
  92:../fixmath/fix16.c **** 		inArg1 >>= 1;
  93:../fixmath/fix16.c **** 	}
  94:../fixmath/fix16.c **** 
  95:../fixmath/fix16.c **** 	uint32_t r_hi = (inArg0 / inArg1);
  96:../fixmath/fix16.c **** 
  97:../fixmath/fix16.c **** 	uint32_t n_lo = (inArg0 % inArg1);
  98:../fixmath/fix16.c **** 	uint32_t n_hi = (n_lo >> 16);
  99:../fixmath/fix16.c **** 	n_lo <<= 16;
 100:../fixmath/fix16.c **** 
 101:../fixmath/fix16.c **** 	uint32_t i, arg;
 102:../fixmath/fix16.c **** 	for(i = 1, arg = inArg1; ((n_lo | arg) & 1) == 0; i <<= 1) {
 103:../fixmath/fix16.c **** 		n_lo = ((n_lo >> 1) | (n_hi << 31));
 104:../fixmath/fix16.c **** 		n_hi =  (n_hi >> 1);
 105:../fixmath/fix16.c **** 		arg >>= 1;
 106:../fixmath/fix16.c **** 	}
 107:../fixmath/fix16.c **** 
 108:../fixmath/fix16.c **** 	uint32_t res = 0;
 109:../fixmath/fix16.c **** 	if(n_hi) {
 110:../fixmath/fix16.c **** 		uint32_t arg_lo, arg_hi;
 111:../fixmath/fix16.c **** 		for(arg_lo = inArg1; (arg_lo >> 31) == 0; arg_lo <<= 1, i <<= 1);
 112:../fixmath/fix16.c **** 		for(arg_hi = (arg_lo >> 31), arg_lo <<= 1, i <<= 1; arg_hi < n_hi; arg_hi = (arg_hi << 1) | (arg_
 113:../fixmath/fix16.c **** 
 114:../fixmath/fix16.c **** 		do {
 115:../fixmath/fix16.c **** 			arg_lo = (arg_lo >> 1) | (arg_hi << 31);
 116:../fixmath/fix16.c **** 			arg_hi = (arg_hi >> 1);
 117:../fixmath/fix16.c **** 			i >>= 1;
 118:../fixmath/fix16.c **** 			if(arg_hi < n_hi) {
 119:../fixmath/fix16.c **** 				n_hi -= arg_hi;
 120:../fixmath/fix16.c **** 				if(arg_lo > n_lo)
 121:../fixmath/fix16.c **** 					n_hi--;
 122:../fixmath/fix16.c **** 				n_lo -= arg_lo;
 123:../fixmath/fix16.c **** 				res += i;
 124:../fixmath/fix16.c **** 			} else if((arg_hi == n_hi) && (arg_lo <= n_lo)) {
 125:../fixmath/fix16.c **** 				n_hi -= arg_hi;
 126:../fixmath/fix16.c **** 				n_lo -= arg_lo;
 127:../fixmath/fix16.c **** 				res += i;
 128:../fixmath/fix16.c **** 			}
 129:../fixmath/fix16.c **** 		} while(n_hi);
 130:../fixmath/fix16.c **** 	}
 131:../fixmath/fix16.c **** 
 132:../fixmath/fix16.c **** 	res += (n_lo / inArg1);
 133:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_ROUNDING
 134:../fixmath/fix16.c **** 	if((n_lo % inArg1) >= (inArg1 >> 1))
 135:../fixmath/fix16.c **** 		res++;
 136:../fixmath/fix16.c **** 	#endif
 137:../fixmath/fix16.c **** 	res += (r_hi << 16);
 138:../fixmath/fix16.c **** 
 139:../fixmath/fix16.c **** 	return (neg ? -res : res);
 140:../fixmath/fix16.c **** 	#endif
 141:../fixmath/fix16.c **** }
 1252              		.loc 1 141 0
 1253 0064 1846     		mov	r0, r3
 1254 0066 07F11007 		add	r7, r7, #16
 1255 006a BD46     		mov	sp, r7
 1256 006c 80BD     		pop	{r7, pc}
 1257              		.cfi_endproc
 1258              	.LFE12:
 1260 006e 00BF     		.section	.text.fix16_sdiv,"ax",%progbits
 1261              		.align	2
 1262              		.global	fix16_sdiv
 1263              		.thumb
 1264              		.thumb_func
 1266              	fix16_sdiv:
 1267              	.LFB13:
 142:../fixmath/fix16.c **** 
 143:../fixmath/fix16.c **** fix16_t fix16_sdiv(fix16_t inArg0, fix16_t inArg1) {
 1268              		.loc 1 143 0
 1269              		.cfi_startproc
 1270              		@ args = 0, pretend = 0, frame = 16
 1271              		@ frame_needed = 1, uses_anonymous_args = 0
 1272 0000 80B5     		push	{r7, lr}
 1273              	.LCFI12:
 1274              		.cfi_def_cfa_offset 8
 1275 0002 84B0     		sub	sp, sp, #16
 1276              	.LCFI13:
 1277              		.cfi_def_cfa_offset 24
 1278 0004 00AF     		add	r7, sp, #0
 1279              		.cfi_offset 14, -4
 1280              		.cfi_offset 7, -8
 1281              	.LCFI14:
 1282              		.cfi_def_cfa_register 7
 1283 0006 7860     		str	r0, [r7, #4]
 1284 0008 3960     		str	r1, [r7, #0]
 144:../fixmath/fix16.c **** 	if(inArg1 == 0) {
 1285              		.loc 1 144 0
 1286 000a 3B68     		ldr	r3, [r7, #0]
 1287 000c 002B     		cmp	r3, #0
 1288 000e 0ED1     		bne	.L12
 145:../fixmath/fix16.c **** 		if(inArg0 < 0)
 1289              		.loc 1 145 0
 1290 0010 7B68     		ldr	r3, [r7, #4]
 1291 0012 002B     		cmp	r3, #0
 1292 0014 05DA     		bge	.L13
 146:../fixmath/fix16.c **** 			return fix16_min;
 1293              		.loc 1 146 0
 1294 0016 40F20003 		movw	r3, #:lower16:fix16_min
 1295 001a C0F20003 		movt	r3, #:upper16:fix16_min
 1296 001e 1B68     		ldr	r3, [r3, #0]
 1297 0020 5AE0     		b	.L14
 1298              	.L13:
 147:../fixmath/fix16.c **** 		return fix16_max;
 1299              		.loc 1 147 0
 1300 0022 40F20003 		movw	r3, #:lower16:fix16_max
 1301 0026 C0F20003 		movt	r3, #:upper16:fix16_max
 1302 002a 1B68     		ldr	r3, [r3, #0]
 1303 002c 54E0     		b	.L14
 1304              	.L12:
 148:../fixmath/fix16.c **** 	}
 149:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_64BIT
 150:../fixmath/fix16.c **** 	int64_t tempResult = inArg0;
 1305              		.loc 1 150 0
 1306 002e 7B68     		ldr	r3, [r7, #4]
 1307 0030 1A46     		mov	r2, r3
 1308 0032 4FEAE373 		asr	r3, r3, #31
 1309 0036 C7E90223 		strd	r2, [r7, #8]
 151:../fixmath/fix16.c **** 	tempResult <<= 16;
 1310              		.loc 1 151 0
 1311 003a BB68     		ldr	r3, [r7, #8]
 1312 003c 4FEA1343 		lsr	r3, r3, #16
 1313 0040 FA68     		ldr	r2, [r7, #12]
 1314 0042 4FEA0242 		lsl	r2, r2, #16
 1315 0046 42EA0303 		orr	r3, r2, r3
 1316 004a FB60     		str	r3, [r7, #12]
 1317 004c BB68     		ldr	r3, [r7, #8]
 1318 004e 4FEA0343 		lsl	r3, r3, #16
 1319 0052 BB60     		str	r3, [r7, #8]
 152:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_ROUNDING
 153:../fixmath/fix16.c **** 	tempResult += (inArg1 >> 1);
 1320              		.loc 1 153 0
 1321 0054 3B68     		ldr	r3, [r7, #0]
 1322 0056 4FEA6303 		asr	r3, r3, #1
 1323 005a 1A46     		mov	r2, r3
 1324 005c 4FEAE373 		asr	r3, r3, #31
 1325 0060 D7E90201 		ldrd	r0, [r7, #8]
 1326 0064 1218     		adds	r2, r2, r0
 1327 0066 43EB0103 		adc	r3, r3, r1
 1328 006a C7E90223 		strd	r2, [r7, #8]
 154:../fixmath/fix16.c **** 	#endif
 155:../fixmath/fix16.c **** 	tempResult /= inArg1;
 1329              		.loc 1 155 0
 1330 006e 3B68     		ldr	r3, [r7, #0]
 1331 0070 1A46     		mov	r2, r3
 1332 0072 4FEAE373 		asr	r3, r3, #31
 1333 0076 D7E90201 		ldrd	r0, [r7, #8]
 1334 007a FFF7FEFF 		bl	__aeabi_ldivmod
 1335 007e 0246     		mov	r2, r0
 1336 0080 0B46     		mov	r3, r1
 1337 0082 C7E90223 		strd	r2, [r7, #8]
 156:../fixmath/fix16.c **** 	if(tempResult < fix16_min)
 1338              		.loc 1 156 0
 1339 0086 40F20003 		movw	r3, #:lower16:fix16_min
 1340 008a C0F20003 		movt	r3, #:upper16:fix16_min
 1341 008e 1B68     		ldr	r3, [r3, #0]
 1342 0090 1A46     		mov	r2, r3
 1343 0092 4FEAE373 		asr	r3, r3, #31
 1344 0096 D7E90201 		ldrd	r0, [r7, #8]
 1345 009a 9042     		cmp	r0, r2
 1346 009c 71EB030C 		sbcs	ip, r1, r3
 1347 00a0 05DA     		bge	.L15
 157:../fixmath/fix16.c **** 		return fix16_min;
 1348              		.loc 1 157 0
 1349 00a2 40F20003 		movw	r3, #:lower16:fix16_min
 1350 00a6 C0F20003 		movt	r3, #:upper16:fix16_min
 1351 00aa 1B68     		ldr	r3, [r3, #0]
 1352 00ac 14E0     		b	.L14
 1353              	.L15:
 158:../fixmath/fix16.c **** 	if(tempResult > fix16_max)
 1354              		.loc 1 158 0
 1355 00ae 40F20003 		movw	r3, #:lower16:fix16_max
 1356 00b2 C0F20003 		movt	r3, #:upper16:fix16_max
 1357 00b6 1B68     		ldr	r3, [r3, #0]
 1358 00b8 1846     		mov	r0, r3
 1359 00ba 4FEAE371 		asr	r1, r3, #31
 1360 00be D7E90223 		ldrd	r2, [r7, #8]
 1361 00c2 9042     		cmp	r0, r2
 1362 00c4 71EB030C 		sbcs	ip, r1, r3
 1363 00c8 05DA     		bge	.L16
 159:../fixmath/fix16.c **** 		return fix16_max;
 1364              		.loc 1 159 0
 1365 00ca 40F20003 		movw	r3, #:lower16:fix16_max
 1366 00ce C0F20003 		movt	r3, #:upper16:fix16_max
 1367 00d2 1B68     		ldr	r3, [r3, #0]
 1368 00d4 00E0     		b	.L14
 1369              	.L16:
 160:../fixmath/fix16.c **** 	return tempResult;
 1370              		.loc 1 160 0
 1371 00d6 BB68     		ldr	r3, [r7, #8]
 1372              	.L14:
 161:../fixmath/fix16.c **** 	#else
 162:../fixmath/fix16.c **** 	int neg = ((inArg0 < 0) != (inArg1 < 0));
 163:../fixmath/fix16.c **** 	inArg0 = (inArg0 < 0 ? -inArg0 : inArg0);
 164:../fixmath/fix16.c **** 	inArg1 = (inArg1 < 0 ? -inArg1 : inArg1);
 165:../fixmath/fix16.c **** 
 166:../fixmath/fix16.c **** 	while(((inArg0 | inArg1) & 1) == 0) {
 167:../fixmath/fix16.c **** 		inArg0 >>= 1;
 168:../fixmath/fix16.c **** 		inArg1 >>= 1;
 169:../fixmath/fix16.c **** 	}
 170:../fixmath/fix16.c **** 
 171:../fixmath/fix16.c **** 	uint32_t r_hi = (inArg0 / inArg1);
 172:../fixmath/fix16.c **** 	if(r_hi > (neg ? 32768 : 32767))
 173:../fixmath/fix16.c **** 		return (neg ? fix16_min : fix16_max);
 174:../fixmath/fix16.c **** 
 175:../fixmath/fix16.c **** 	uint32_t n_lo = (inArg0 % inArg1);
 176:../fixmath/fix16.c **** 	uint32_t n_hi = (n_lo >> 16);
 177:../fixmath/fix16.c **** 	n_lo <<= 16;
 178:../fixmath/fix16.c **** 
 179:../fixmath/fix16.c **** 	uint32_t i, arg;
 180:../fixmath/fix16.c **** 	for(i = 1, arg = inArg1; ((n_lo | arg) & 1) == 0; i <<= 1) {
 181:../fixmath/fix16.c **** 		n_lo = ((n_lo >> 1) | (n_hi << 31));
 182:../fixmath/fix16.c **** 		n_hi =  (n_hi >> 1);
 183:../fixmath/fix16.c **** 		arg >>= 1;
 184:../fixmath/fix16.c **** 	}
 185:../fixmath/fix16.c **** 
 186:../fixmath/fix16.c **** 	uint32_t res = 0;
 187:../fixmath/fix16.c **** 	if(n_hi) {
 188:../fixmath/fix16.c **** 		uint32_t arg_lo, arg_hi;
 189:../fixmath/fix16.c **** 		for(arg_lo = inArg1; (arg_lo >> 31) == 0; arg_lo <<= 1, i <<= 1);
 190:../fixmath/fix16.c **** 		for(arg_hi = (arg_lo >> 31), arg_lo <<= 1, i <<= 1; arg_hi < n_hi; arg_hi = (arg_hi << 1) | (arg_
 191:../fixmath/fix16.c **** 
 192:../fixmath/fix16.c **** 		do {
 193:../fixmath/fix16.c **** 			arg_lo = (arg_lo >> 1) | (arg_hi << 31);
 194:../fixmath/fix16.c **** 			arg_hi = (arg_hi >> 1);
 195:../fixmath/fix16.c **** 			i >>= 1;
 196:../fixmath/fix16.c **** 			if(arg_hi < n_hi) {
 197:../fixmath/fix16.c **** 				n_hi -= arg_hi;
 198:../fixmath/fix16.c **** 				if(arg_lo > n_lo)
 199:../fixmath/fix16.c **** 					n_hi--;
 200:../fixmath/fix16.c **** 				n_lo -= arg_lo;
 201:../fixmath/fix16.c **** 				res += i;
 202:../fixmath/fix16.c **** 			} else if((arg_hi == n_hi) && (arg_lo <= n_lo)) {
 203:../fixmath/fix16.c **** 				n_hi -= arg_hi;
 204:../fixmath/fix16.c **** 				n_lo -= arg_lo;
 205:../fixmath/fix16.c **** 				res += i;
 206:../fixmath/fix16.c **** 			}
 207:../fixmath/fix16.c **** 		} while(n_hi);
 208:../fixmath/fix16.c **** 	}
 209:../fixmath/fix16.c **** 
 210:../fixmath/fix16.c **** 	#ifndef FIXMATH_NO_ROUNDING
 211:../fixmath/fix16.c **** 	n_lo += (inArg1 >> 1);
 212:../fixmath/fix16.c **** 	#endif
 213:../fixmath/fix16.c **** 	res += (n_lo / inArg1);
 214:../fixmath/fix16.c **** 	res += (r_hi << 16);
 215:../fixmath/fix16.c **** 
 216:../fixmath/fix16.c **** 	return (neg ? -res : res);
 217:../fixmath/fix16.c **** 	#endif
 218:../fixmath/fix16.c **** }
 1373              		.loc 1 218 0
 1374 00d8 1846     		mov	r0, r3
 1375 00da 07F11007 		add	r7, r7, #16
 1376 00de BD46     		mov	sp, r7
 1377 00e0 80BD     		pop	{r7, pc}
 1378              		.cfi_endproc
 1379              	.LFE13:
 1381 00e2 00BF     		.section	.text.fix16_lerp8,"ax",%progbits
 1382              		.align	2
 1383              		.global	fix16_lerp8
 1384              		.thumb
 1385              		.thumb_func
 1387              	fix16_lerp8:
 1388              	.LFB14:
 219:../fixmath/fix16.c **** 
 220:../fixmath/fix16.c **** 
 221:../fixmath/fix16.c **** 
 222:../fixmath/fix16.c **** #ifndef FIXMATH_NO_64BIT
 223:../fixmath/fix16.c **** fix16_t fix16_lerp8(fix16_t inArg0, fix16_t inArg1, uint8_t inFract) {
 1389              		.loc 1 223 0
 1390              		.cfi_startproc
 1391              		@ args = 0, pretend = 0, frame = 24
 1392              		@ frame_needed = 1, uses_anonymous_args = 0
 1393              		@ link register save eliminated.
 1394 0000 B0B4     		push	{r4, r5, r7}
 1395              	.LCFI15:
 1396              		.cfi_def_cfa_offset 12
 1397 0002 87B0     		sub	sp, sp, #28
 1398              	.LCFI16:
 1399              		.cfi_def_cfa_offset 40
 1400 0004 00AF     		add	r7, sp, #0
 1401              		.cfi_offset 7, -4
 1402              		.cfi_offset 5, -8
 1403              		.cfi_offset 4, -12
 1404              	.LCFI17:
 1405              		.cfi_def_cfa_register 7
 1406 0006 F860     		str	r0, [r7, #12]
 1407 0008 B960     		str	r1, [r7, #8]
 1408 000a 1346     		mov	r3, r2
 1409 000c FB71     		strb	r3, [r7, #7]
 224:../fixmath/fix16.c **** 	int64_t tempOut;
 225:../fixmath/fix16.c **** 	tempOut   = ((int64_t)inArg0 * (256 - inFract));
 1410              		.loc 1 225 0
 1411 000e FB68     		ldr	r3, [r7, #12]
 1412 0010 1846     		mov	r0, r3
 1413 0012 4FEAE371 		asr	r1, r3, #31
 1414 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1415 0018 C3F58073 		rsb	r3, r3, #256
 1416 001c 1A46     		mov	r2, r3
 1417 001e 4FEAE373 		asr	r3, r3, #31
 1418 0022 02FB01F4 		mul	r4, r2, r1
 1419 0026 00FB03F5 		mul	r5, r0, r3
 1420 002a 6419     		adds	r4, r4, r5
 1421 002c A0FB0223 		umull	r2, r3, r0, r2
 1422 0030 E418     		adds	r4, r4, r3
 1423 0032 2346     		mov	r3, r4
 1424 0034 C7E90423 		strd	r2, [r7, #16]
 1425 0038 C7E90423 		strd	r2, [r7, #16]
 226:../fixmath/fix16.c **** 	tempOut  += ((int64_t)inArg1 * inFract);
 1426              		.loc 1 226 0
 1427 003c BB68     		ldr	r3, [r7, #8]
 1428 003e 1846     		mov	r0, r3
 1429 0040 4FEAE371 		asr	r1, r3, #31
 1430 0044 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1431 0046 4FF00003 		mov	r3, #0
 1432 004a 02FB01F4 		mul	r4, r2, r1
 1433 004e 00FB03F5 		mul	r5, r0, r3
 1434 0052 6419     		adds	r4, r4, r5
 1435 0054 A0FB0223 		umull	r2, r3, r0, r2
 1436 0058 E418     		adds	r4, r4, r3
 1437 005a 2346     		mov	r3, r4
 1438 005c D7E90401 		ldrd	r0, [r7, #16]
 1439 0060 1218     		adds	r2, r2, r0
 1440 0062 43EB0103 		adc	r3, r3, r1
 1441 0066 C7E90423 		strd	r2, [r7, #16]
 227:../fixmath/fix16.c **** 	tempOut >>= 8;
 1442              		.loc 1 227 0
 1443 006a 7B69     		ldr	r3, [r7, #20]
 1444 006c 4FEA0363 		lsl	r3, r3, #24
 1445 0070 3A69     		ldr	r2, [r7, #16]
 1446 0072 4FEA1222 		lsr	r2, r2, #8
 1447 0076 42EA0303 		orr	r3, r2, r3
 1448 007a 3B61     		str	r3, [r7, #16]
 1449 007c 7B69     		ldr	r3, [r7, #20]
 1450 007e 4FEA2323 		asr	r3, r3, #8
 1451 0082 7B61     		str	r3, [r7, #20]
 228:../fixmath/fix16.c **** 	return (fix16_t)tempOut;
 1452              		.loc 1 228 0
 1453 0084 3B69     		ldr	r3, [r7, #16]
 229:../fixmath/fix16.c **** }
 1454              		.loc 1 229 0
 1455 0086 1846     		mov	r0, r3
 1456 0088 07F11C07 		add	r7, r7, #28
 1457 008c BD46     		mov	sp, r7
 1458 008e B0BC     		pop	{r4, r5, r7}
 1459 0090 7047     		bx	lr
 1460              		.cfi_endproc
 1461              	.LFE14:
 1463 0092 00BF     		.section	.text.fix16_lerp16,"ax",%progbits
 1464              		.align	2
 1465              		.global	fix16_lerp16
 1466              		.thumb
 1467              		.thumb_func
 1469              	fix16_lerp16:
 1470              	.LFB15:
 230:../fixmath/fix16.c **** 
 231:../fixmath/fix16.c **** fix16_t fix16_lerp16(fix16_t inArg0, fix16_t inArg1, uint16_t inFract) {
 1471              		.loc 1 231 0
 1472              		.cfi_startproc
 1473              		@ args = 0, pretend = 0, frame = 24
 1474              		@ frame_needed = 1, uses_anonymous_args = 0
 1475              		@ link register save eliminated.
 1476 0000 B0B4     		push	{r4, r5, r7}
 1477              	.LCFI18:
 1478              		.cfi_def_cfa_offset 12
 1479 0002 87B0     		sub	sp, sp, #28
 1480              	.LCFI19:
 1481              		.cfi_def_cfa_offset 40
 1482 0004 00AF     		add	r7, sp, #0
 1483              		.cfi_offset 7, -4
 1484              		.cfi_offset 5, -8
 1485              		.cfi_offset 4, -12
 1486              	.LCFI20:
 1487              		.cfi_def_cfa_register 7
 1488 0006 F860     		str	r0, [r7, #12]
 1489 0008 B960     		str	r1, [r7, #8]
 1490 000a 1346     		mov	r3, r2
 1491 000c FB80     		strh	r3, [r7, #6]	@ movhi
 232:../fixmath/fix16.c **** 	int64_t tempOut;
 233:../fixmath/fix16.c **** 	tempOut   = ((int64_t)inArg0 * (fix16_one - inFract));
 1492              		.loc 1 233 0
 1493 000e FB68     		ldr	r3, [r7, #12]
 1494 0010 1846     		mov	r0, r3
 1495 0012 4FEAE371 		asr	r1, r3, #31
 1496 0016 40F20003 		movw	r3, #:lower16:fix16_one
 1497 001a C0F20003 		movt	r3, #:upper16:fix16_one
 1498 001e 1A68     		ldr	r2, [r3, #0]
 1499 0020 FB88     		ldrh	r3, [r7, #6]
 1500 0022 D31A     		subs	r3, r2, r3
 1501 0024 1A46     		mov	r2, r3
 1502 0026 4FEAE373 		asr	r3, r3, #31
 1503 002a 02FB01F4 		mul	r4, r2, r1
 1504 002e 00FB03F5 		mul	r5, r0, r3
 1505 0032 6419     		adds	r4, r4, r5
 1506 0034 A0FB0223 		umull	r2, r3, r0, r2
 1507 0038 E418     		adds	r4, r4, r3
 1508 003a 2346     		mov	r3, r4
 1509 003c C7E90423 		strd	r2, [r7, #16]
 1510 0040 C7E90423 		strd	r2, [r7, #16]
 234:../fixmath/fix16.c **** 	tempOut  += ((int64_t)inArg1 * inFract);
 1511              		.loc 1 234 0
 1512 0044 BB68     		ldr	r3, [r7, #8]
 1513 0046 1846     		mov	r0, r3
 1514 0048 4FEAE371 		asr	r1, r3, #31
 1515 004c FB88     		ldrh	r3, [r7, #6]
 1516 004e 1A46     		mov	r2, r3
 1517 0050 4FF00003 		mov	r3, #0
 1518 0054 02FB01F4 		mul	r4, r2, r1
 1519 0058 00FB03F5 		mul	r5, r0, r3
 1520 005c 6419     		adds	r4, r4, r5
 1521 005e A0FB0223 		umull	r2, r3, r0, r2
 1522 0062 E418     		adds	r4, r4, r3
 1523 0064 2346     		mov	r3, r4
 1524 0066 D7E90401 		ldrd	r0, [r7, #16]
 1525 006a 1218     		adds	r2, r2, r0
 1526 006c 43EB0103 		adc	r3, r3, r1
 1527 0070 C7E90423 		strd	r2, [r7, #16]
 235:../fixmath/fix16.c **** 	tempOut >>= 16;
 1528              		.loc 1 235 0
 1529 0074 7B69     		ldr	r3, [r7, #20]
 1530 0076 4FEA0343 		lsl	r3, r3, #16
 1531 007a 3A69     		ldr	r2, [r7, #16]
 1532 007c 4FEA1242 		lsr	r2, r2, #16
 1533 0080 42EA0303 		orr	r3, r2, r3
 1534 0084 3B61     		str	r3, [r7, #16]
 1535 0086 7B69     		ldr	r3, [r7, #20]
 1536 0088 4FEA2343 		asr	r3, r3, #16
 1537 008c 7B61     		str	r3, [r7, #20]
 236:../fixmath/fix16.c **** 	return (fix16_t)tempOut;
 1538              		.loc 1 236 0
 1539 008e 3B69     		ldr	r3, [r7, #16]
 237:../fixmath/fix16.c **** }
 1540              		.loc 1 237 0
 1541 0090 1846     		mov	r0, r3
 1542 0092 07F11C07 		add	r7, r7, #28
 1543 0096 BD46     		mov	sp, r7
 1544 0098 B0BC     		pop	{r4, r5, r7}
 1545 009a 7047     		bx	lr
 1546              		.cfi_endproc
 1547              	.LFE15:
 1549              		.section	.text.fix16_lerp32,"ax",%progbits
 1550              		.align	2
 1551              		.global	fix16_lerp32
 1552              		.thumb
 1553              		.thumb_func
 1555              	fix16_lerp32:
 1556              	.LFB16:
 238:../fixmath/fix16.c **** 
 239:../fixmath/fix16.c **** fix16_t fix16_lerp32(fix16_t inArg0, fix16_t inArg1, uint32_t inFract) {
 1557              		.loc 1 239 0
 1558              		.cfi_startproc
 1559              		@ args = 0, pretend = 0, frame = 24
 1560              		@ frame_needed = 1, uses_anonymous_args = 0
 1561              		@ link register save eliminated.
 1562 0000 B0B4     		push	{r4, r5, r7}
 1563              	.LCFI21:
 1564              		.cfi_def_cfa_offset 12
 1565 0002 87B0     		sub	sp, sp, #28
 1566              	.LCFI22:
 1567              		.cfi_def_cfa_offset 40
 1568 0004 00AF     		add	r7, sp, #0
 1569              		.cfi_offset 7, -4
 1570              		.cfi_offset 5, -8
 1571              		.cfi_offset 4, -12
 1572              	.LCFI23:
 1573              		.cfi_def_cfa_register 7
 1574 0006 F860     		str	r0, [r7, #12]
 1575 0008 B960     		str	r1, [r7, #8]
 1576 000a 7A60     		str	r2, [r7, #4]
 240:../fixmath/fix16.c **** 	int64_t tempOut;
 241:../fixmath/fix16.c **** 	tempOut   = ((int64_t)inArg0 * (0 - inFract));
 1577              		.loc 1 241 0
 1578 000c FB68     		ldr	r3, [r7, #12]
 1579 000e 1846     		mov	r0, r3
 1580 0010 4FEAE371 		asr	r1, r3, #31
 1581 0014 7B68     		ldr	r3, [r7, #4]
 1582 0016 C3F10003 		rsb	r3, r3, #0
 1583 001a 1A46     		mov	r2, r3
 1584 001c 4FF00003 		mov	r3, #0
 1585 0020 02FB01F4 		mul	r4, r2, r1
 1586 0024 00FB03F5 		mul	r5, r0, r3
 1587 0028 6419     		adds	r4, r4, r5
 1588 002a A0FB0223 		umull	r2, r3, r0, r2
 1589 002e E418     		adds	r4, r4, r3
 1590 0030 2346     		mov	r3, r4
 1591 0032 C7E90423 		strd	r2, [r7, #16]
 1592 0036 C7E90423 		strd	r2, [r7, #16]
 242:../fixmath/fix16.c **** 	tempOut  += ((int64_t)inArg1 * inFract);
 1593              		.loc 1 242 0
 1594 003a BB68     		ldr	r3, [r7, #8]
 1595 003c 1846     		mov	r0, r3
 1596 003e 4FEAE371 		asr	r1, r3, #31
 1597 0042 7B68     		ldr	r3, [r7, #4]
 1598 0044 1A46     		mov	r2, r3
 1599 0046 4FF00003 		mov	r3, #0
 1600 004a 02FB01F4 		mul	r4, r2, r1
 1601 004e 00FB03F5 		mul	r5, r0, r3
 1602 0052 6419     		adds	r4, r4, r5
 1603 0054 A0FB0223 		umull	r2, r3, r0, r2
 1604 0058 E418     		adds	r4, r4, r3
 1605 005a 2346     		mov	r3, r4
 1606 005c D7E90401 		ldrd	r0, [r7, #16]
 1607 0060 1218     		adds	r2, r2, r0
 1608 0062 43EB0103 		adc	r3, r3, r1
 1609 0066 C7E90423 		strd	r2, [r7, #16]
 243:../fixmath/fix16.c **** 	tempOut >>= 32;
 1610              		.loc 1 243 0
 1611 006a 7B69     		ldr	r3, [r7, #20]
 1612 006c 1B46     		mov	r3, r3
 1613 006e 3B61     		str	r3, [r7, #16]
 1614 0070 7B69     		ldr	r3, [r7, #20]
 1615 0072 4FEAE373 		asr	r3, r3, #31
 1616 0076 7B61     		str	r3, [r7, #20]
 244:../fixmath/fix16.c **** 	return (fix16_t)tempOut;
 1617              		.loc 1 244 0
 1618 0078 3B69     		ldr	r3, [r7, #16]
 245:../fixmath/fix16.c **** }
 1619              		.loc 1 245 0
 1620 007a 1846     		mov	r0, r3
 1621 007c 07F11C07 		add	r7, r7, #28
 1622 0080 BD46     		mov	sp, r7
 1623 0082 B0BC     		pop	{r4, r5, r7}
 1624 0084 7047     		bx	lr
 1625              		.cfi_endproc
 1626              	.LFE16:
 1628 0086 00BF     		.text
 1629              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 fix16.c
     /tmp/ccUR8LhY.s:905    .rodata.fix16_max:00000000 $d
     /tmp/ccUR8LhY.s:908    .rodata.fix16_max:00000000 fix16_max
     /tmp/ccUR8LhY.s:911    .rodata.fix16_min:00000000 $d
     /tmp/ccUR8LhY.s:914    .rodata.fix16_min:00000000 fix16_min
     /tmp/ccUR8LhY.s:917    .rodata.fix16_pi:00000000 $d
     /tmp/ccUR8LhY.s:920    .rodata.fix16_pi:00000000 fix16_pi
     /tmp/ccUR8LhY.s:923    .rodata.fix16_e:00000000 $d
     /tmp/ccUR8LhY.s:926    .rodata.fix16_e:00000000 fix16_e
     /tmp/ccUR8LhY.s:929    .rodata.fix16_one:00000000 $d
     /tmp/ccUR8LhY.s:932    .rodata.fix16_one:00000000 fix16_one
     /tmp/ccUR8LhY.s:935    .text.fix16_sadd:00000000 $t
     /tmp/ccUR8LhY.s:940    .text.fix16_sadd:00000000 fix16_sadd
     /tmp/ccUR8LhY.s:1011   .text.fix16_mul:00000000 $t
     /tmp/ccUR8LhY.s:1016   .text.fix16_mul:00000000 fix16_mul
     /tmp/ccUR8LhY.s:1085   .text.fix16_smul:00000000 $t
     /tmp/ccUR8LhY.s:1090   .text.fix16_smul:00000000 fix16_smul
     /tmp/ccUR8LhY.s:1193   .text.fix16_div:00000000 $t
     /tmp/ccUR8LhY.s:1198   .text.fix16_div:00000000 fix16_div
     /tmp/ccUR8LhY.s:1261   .text.fix16_sdiv:00000000 $t
     /tmp/ccUR8LhY.s:1266   .text.fix16_sdiv:00000000 fix16_sdiv
     /tmp/ccUR8LhY.s:1382   .text.fix16_lerp8:00000000 $t
     /tmp/ccUR8LhY.s:1387   .text.fix16_lerp8:00000000 fix16_lerp8
     /tmp/ccUR8LhY.s:1464   .text.fix16_lerp16:00000000 $t
     /tmp/ccUR8LhY.s:1469   .text.fix16_lerp16:00000000 fix16_lerp16
     /tmp/ccUR8LhY.s:1550   .text.fix16_lerp32:00000000 $t
     /tmp/ccUR8LhY.s:1555   .text.fix16_lerp32:00000000 fix16_lerp32
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_ldivmod
