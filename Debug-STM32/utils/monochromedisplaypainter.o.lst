   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"monochromedisplaypainter.cpp"
  23              	.Ltext0:
  24              		.file 1 "../utils/monochromedisplaypainter.cpp"
 3397              		.align	2
 3398              		.thumb
 3399              		.thumb_func
 3401              	_ZL20__gthread_key_deletei:
 3402              	.LFB328:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Threads compatibility routines for libgcc2 and libobjc.  */
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Compile this one with gcc.  */
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Copyright (C) 1997, 1999, 2000, 2004, 2008, 2009
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****    Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** This file is part of GCC.
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** GCC is free software; you can redistribute it and/or modify it under
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** the terms of the GNU General Public License as published by the Free
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** Software Foundation; either version 3, or (at your option) any later
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** version.
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** GCC is distributed in the hope that it will be useful, but WITHOUT ANY
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** WARRANTY; without even the implied warranty of MERCHANTABILITY or
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** for more details.
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** Under Section 7 of GPL version 3, you are granted additional
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** permissions described in the GCC Runtime Library Exception, version
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 3.1, as published by the Free Software Foundation.
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** You should have received a copy of the GNU General Public License and
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** a copy of the GCC Runtime Library Exception along with this program;
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** <http://www.gnu.org/licenses/>.  */
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #ifndef _GLIBCXX_GCC_GTHR_SINGLE_H
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define _GLIBCXX_GCC_GTHR_SINGLE_H
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Just provide compatibility for mutex handling.  */
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_key_t;
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_once_t;
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_mutex_t;
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** typedef int __gthread_recursive_mutex_t;
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_ONCE_INIT 0
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_MUTEX_INIT 0
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define __GTHREAD_RECURSIVE_MUTEX_INIT 0
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #define _GLIBCXX_UNUSED __attribute__((unused))
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #ifdef _LIBOBJC
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Thread local storage for a single thread */
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static void *thread_local_storage = NULL;
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend initialization functions */
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Initialize the threads subsystem.  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_init_thread_system (void)
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Close the threads subsystem.  */
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_close_thread_system (void)
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend thread functions */
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Create a new thread of execution.  */
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline objc_thread_t
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_detach (void (* func)(void *), void * arg _GLIBCXX_UNUSED)
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return NULL;
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Set the current thread's priority.  */
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_set_priority (int priority _GLIBCXX_UNUSED)
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Return the current thread's priority.  */
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_get_priority (void)
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return OBJC_THREAD_INTERACTIVE_PRIORITY;
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Yield our process time to another thread.  */
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline void
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_yield (void)
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return;
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Terminate the current thread.  */
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_exit (void)
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support available */
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* Should we really exit the program */
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* exit (&__objc_thread_exit_status); */
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return -1;
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Returns an integer value which uniquely describes a thread.  */
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline objc_thread_t
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_id (void)
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* No thread support, use 1.  */
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return (objc_thread_t) 1;
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Sets the thread's local storage pointer.  */
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_set_data (void *value)
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   thread_local_storage = value;
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Returns the thread's local storage pointer.  */
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline void *
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_thread_get_data (void)
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return thread_local_storage;
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend mutex functions */
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Allocate a mutex.  */
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_allocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Deallocate a mutex.  */
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_deallocate (objc_mutex_t mutex _GLIBCXX_UNUSED)
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Grab a lock on a mutex.  */
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_lock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* There can only be one thread, so we always get the lock */
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Try to grab a lock on a mutex.  */
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_trylock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   /* There can only be one thread, so we always get the lock */
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Unlock the mutex */
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_mutex_unlock (objc_mutex_t mutex _GLIBCXX_UNUSED)
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Backend condition mutex functions */
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Allocate a condition.  */
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_allocate (objc_condition_t condition _GLIBCXX_UNUSED)
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Deallocate a condition.  */
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_deallocate (objc_condition_t condition _GLIBCXX_UNUSED)
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wait on the condition */
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_wait (objc_condition_t condition _GLIBCXX_UNUSED,
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 			       objc_mutex_t mutex _GLIBCXX_UNUSED)
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wake up all threads waiting on this condition.  */
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_broadcast (objc_condition_t condition _GLIBCXX_UNUSED)
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** /* Wake up one thread waiting on this condition.  */
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_objc_condition_signal (objc_condition_t condition _GLIBCXX_UNUSED)
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** #else /* _LIBOBJC */
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_active_p (void)
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_once (__gthread_once_t *__once _GLIBCXX_UNUSED, void (*__func) (void) _GLIBCXX_UNUSED)
 218:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 219:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 220:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 221:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 222:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static inline int _GLIBCXX_UNUSED
 223:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_key_create (__gthread_key_t *__key _GLIBCXX_UNUSED, void (*__func) (void *) _GLIBCXX_UNUS
 224:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 225:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 226:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 227:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** 
 228:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** static int _GLIBCXX_UNUSED
 229:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** __gthread_key_delete (__gthread_key_t __key _GLIBCXX_UNUSED)
 230:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** {
 3403              		.loc 62 230 0
 3404              		.cfi_startproc
 3405              		@ args = 0, pretend = 0, frame = 8
 3406              		@ frame_needed = 1, uses_anonymous_args = 0
 3407              		@ link register save eliminated.
 3408 0000 80B4     		push	{r7}
 3409              	.LCFI0:
 3410              		.cfi_def_cfa_offset 4
 3411 0002 83B0     		sub	sp, sp, #12
 3412              	.LCFI1:
 3413              		.cfi_def_cfa_offset 16
 3414 0004 00AF     		add	r7, sp, #0
 3415              		.cfi_offset 7, -4
 3416              	.LCFI2:
 3417              		.cfi_def_cfa_register 7
 3418 0006 7860     		str	r0, [r7, #4]
 231:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h ****   return 0;
 3419              		.loc 62 231 0
 3420 0008 4FF00003 		mov	r3, #0
 232:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/arm-none-eabi/thumb/bits/gthr-single.h **** }
 3421              		.loc 62 232 0
 3422 000c 1846     		mov	r0, r3
 3423 000e 07F10C07 		add	r7, r7, #12
 3424 0012 BD46     		mov	sp, r7
 3425 0014 80BC     		pop	{r7}
 3426 0016 7047     		bx	lr
 3427              		.cfi_endproc
 3428              	.LFE328:
 3430              		.section	.text._ZN18IMonochromeDisplay5PointC2Eii,"axG",%progbits,_ZN18IMonochromeDisplay5PointC5E
 3431              		.align	2
 3432              		.weak	_ZN18IMonochromeDisplay5PointC2Eii
 3433              		.thumb
 3434              		.thumb_func
 3436              	_ZN18IMonochromeDisplay5PointC2Eii:
 3437              	.LFB532:
   1:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** #pragma once
   2:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** #include <stdint.h>
   3:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** #include <cstddef>
   4:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** #include <string>
   5:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 
   6:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** /**
   7:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * @ingroup interfaces
   8:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * @brief Abstracts a simple monochrome display, with either unaccelerated or accelerated drawing m
   9:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  *
  10:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * Note that if you need a common way to paint into displays with different accelerated features, u
  11:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * MonochromeDisplayPainter class, the class uses for each drawing instruction the  most effective 
  12:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  * draw into the display.
  13:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h ****  */
  14:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** class IMonochromeDisplay
  15:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** {
  16:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** public:
  17:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	/**
  18:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * @brief The definitions for the pixel colors. Quite a short list for monochrome displays...
  19:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 */
  20:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	enum PixelColor
  21:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	{
  22:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		Undefined 	=  0 ,	///< Undefined color, use if you want no stroke or no fill.
  23:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		White 		= -1 ,	///< White pixel value.
  24:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		Black 		=  1 	///< Black pixel value.
  25:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	};
  26:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 
  27:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	/**
  28:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * @brief A bit-mask defining the possible accelerated drawing operations a display can offer.
  29:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 *
  30:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * The MonochromeDisplayPainter class will use accelerated methods if available and will fall back
  31:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * to software based rendering methods if the display does not support the accelerated operations.
  32:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 */
  33:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	struct AcceleratedDrawingMethods
  34:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	{
  35:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned clearAccelerated : 1;					///< @brief The display supports to clear screen.
  36:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned memoryCopyAccelerated : 1;				///< @brief The display supports burst access to the displ
  37:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawLineAccelerated : 1;				///< @brief The display supports drawing simple lines.
  38:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawRectangleStrokeAccelerated : 1;	///< @brief The display supports drawing strokes of 
  39:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawRectangeFillAccelerated : 1;		///< @brief The display supports filling rectangles.
  40:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawEllipseStrokeAccelerated : 1;		///< @brief The display supports drawing ellipse stro
  41:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawEllipseFillAccelerated : 1;		///< @brief The display supports filling ellipses.
  42:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		unsigned drawTextAccelerated : 1;				///< @brief The display supports text drawing.
  43:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	};
  44:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 
  45:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	/**
  46:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 * @brief This class represents a point in a two-dimensional space and is used to draw into the di
  47:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	 */
  48:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	class Point
  49:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	{
  50:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 	public:
  51:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		/**
  52:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @brief Constructor, initializes the x and y coordinates of the point.
  53:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 *
  54:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @param x The X coordinate.
  55:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 * @param y The Y coordinate.
  56:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		 */
  57:/home/desem/workspace/desenet/interfaces/imonochromedisplay.h **** 		inline explicit Point( int x = 0 , int y = 0 ) : x( x ) , y( y ) {}
 3438              		.loc 5 57 0
 3439              		.cfi_startproc
 3440              		@ args = 0, pretend = 0, frame = 16
 3441              		@ frame_needed = 1, uses_anonymous_args = 0
 3442              		@ link register save eliminated.
 3443 0000 80B4     		push	{r7}
 3444              	.LCFI3:
 3445              		.cfi_def_cfa_offset 4
 3446 0002 85B0     		sub	sp, sp, #20
 3447              	.LCFI4:
 3448              		.cfi_def_cfa_offset 24
 3449 0004 00AF     		add	r7, sp, #0
 3450              		.cfi_offset 7, -4
 3451              	.LCFI5:
 3452              		.cfi_def_cfa_register 7
 3453 0006 F860     		str	r0, [r7, #12]
 3454 0008 B960     		str	r1, [r7, #8]
 3455 000a 7A60     		str	r2, [r7, #4]
 3456              	.LBB2:
 3457              		.loc 5 57 0
 3458 000c FB68     		ldr	r3, [r7, #12]
 3459 000e BA68     		ldr	r2, [r7, #8]
 3460 0010 1A60     		str	r2, [r3, #0]
 3461 0012 FB68     		ldr	r3, [r7, #12]
 3462 0014 7A68     		ldr	r2, [r7, #4]
 3463 0016 5A60     		str	r2, [r3, #4]
 3464              	.LBE2:
 3465 0018 FB68     		ldr	r3, [r7, #12]
 3466 001a 1846     		mov	r0, r3
 3467 001c 07F11407 		add	r7, r7, #20
 3468 0020 BD46     		mov	sp, r7
 3469 0022 80BC     		pop	{r7}
 3470 0024 7047     		bx	lr
 3471              		.cfi_endproc
 3472              	.LFE532:
 3474              		.weak	_ZN18IMonochromeDisplay5PointC1Eii
 3475              		.thumb_set _ZN18IMonochromeDisplay5PointC1Eii,_ZN18IMonochromeDisplay5PointC2Eii
 3476              		.global	__aeabi_dmul
 3477              		.global	__aeabi_dadd
 3478              		.global	__aeabi_d2iz
 3479 0026 00BF     		.section	.text.fix16_from_dbl,"ax",%progbits
 3480              		.align	2
 3481              		.thumb
 3482              		.thumb_func
 3484              	fix16_from_dbl:
 3485              	.LFB555:
   1:/home/desem/workspace/desenet/fixmath/fix16.h **** #ifndef __libfixmath_fix16_h__
   2:/home/desem/workspace/desenet/fixmath/fix16.h **** #define __libfixmath_fix16_h__
   3:/home/desem/workspace/desenet/fixmath/fix16.h **** #define FIXMATH_NO_CACHE
   4:/home/desem/workspace/desenet/fixmath/fix16.h **** #ifdef __cplusplus
   5:/home/desem/workspace/desenet/fixmath/fix16.h **** extern "C"
   6:/home/desem/workspace/desenet/fixmath/fix16.h **** {
   7:/home/desem/workspace/desenet/fixmath/fix16.h **** #endif
   8:/home/desem/workspace/desenet/fixmath/fix16.h **** 
   9:/home/desem/workspace/desenet/fixmath/fix16.h **** #include <stdint.h>
  10:/home/desem/workspace/desenet/fixmath/fix16.h **** 
  11:/home/desem/workspace/desenet/fixmath/fix16.h **** typedef int32_t fix16_t;
  12:/home/desem/workspace/desenet/fixmath/fix16.h **** 
  13:/home/desem/workspace/desenet/fixmath/fix16.h **** static const fix16_t fix16_max = 0x7FFFFFFF; /*!< the maximum value of fix16_t */
  14:/home/desem/workspace/desenet/fixmath/fix16.h **** static const fix16_t fix16_min = 0x80000000; /*!< the minimum value of fix16_t */
  15:/home/desem/workspace/desenet/fixmath/fix16.h **** 
  16:/home/desem/workspace/desenet/fixmath/fix16.h **** static const fix16_t fix16_pi  = 205887;     /*!< fix16_t value of pi */
  17:/home/desem/workspace/desenet/fixmath/fix16.h **** static const fix16_t fix16_e   = 178145;     /*!< fix16_t value of e */
  18:/home/desem/workspace/desenet/fixmath/fix16.h **** static const fix16_t fix16_one = 0x00010000; /*!< fix16_t value of 1 */
  19:/home/desem/workspace/desenet/fixmath/fix16.h **** 
  20:/home/desem/workspace/desenet/fixmath/fix16.h **** #ifdef FIXMATH_NO_ROUNDING
  21:/home/desem/workspace/desenet/fixmath/fix16.h **** /*! Converts a double to a fix16_t and returns the result. */
  22:/home/desem/workspace/desenet/fixmath/fix16.h **** static inline fix16_t fix16_from_dbl(const double inVal)  { return (fix16_t)(inVal * 65536.0); }
  23:/home/desem/workspace/desenet/fixmath/fix16.h **** /*! Converts a float to a fix16_t and returns the result. */
  24:/home/desem/workspace/desenet/fixmath/fix16.h **** static inline fix16_t fix16_from_float(const float inVal) { return (fix16_t)(inVal * 65536.0f); }
  25:/home/desem/workspace/desenet/fixmath/fix16.h **** #else
  26:/home/desem/workspace/desenet/fixmath/fix16.h **** /*! Converts a double to a fix16_t and returns the result. */
  27:/home/desem/workspace/desenet/fixmath/fix16.h **** static inline fix16_t fix16_from_dbl(const double inVal)  { return (fix16_t)((inVal * 65536.0) + 0.
 3486              		.loc 70 27 0
 3487              		.cfi_startproc
 3488              		@ args = 0, pretend = 0, frame = 8
 3489              		@ frame_needed = 1, uses_anonymous_args = 0
 3490 0000 80B5     		push	{r7, lr}
 3491              	.LCFI6:
 3492              		.cfi_def_cfa_offset 8
 3493 0002 82B0     		sub	sp, sp, #8
 3494              	.LCFI7:
 3495              		.cfi_def_cfa_offset 16
 3496 0004 00AF     		add	r7, sp, #0
 3497              		.cfi_offset 14, -4
 3498              		.cfi_offset 7, -8
 3499              	.LCFI8:
 3500              		.cfi_def_cfa_register 7
 3501 0006 C7E90001 		strd	r0, [r7]
 3502              		.loc 70 27 0
 3503 000a D7E90001 		ldrd	r0, [r7]
 3504 000e 4FF00002 		mov	r2, #0
 3505 0012 4FF08043 		mov	r3, #1073741824
 3506 0016 03F57003 		add	r3, r3, #15728640
 3507 001a FFF7FEFF 		bl	__aeabi_dmul
 3508 001e 0246     		mov	r2, r0
 3509 0020 0B46     		mov	r3, r1
 3510 0022 1046     		mov	r0, r2
 3511 0024 1946     		mov	r1, r3
 3512 0026 4FF00002 		mov	r2, #0
 3513 002a 4FF07E53 		mov	r3, #1065353216
 3514 002e 03F5C003 		add	r3, r3, #6291456
 3515 0032 FFF7FEFF 		bl	__aeabi_dadd
 3516 0036 0246     		mov	r2, r0
 3517 0038 0B46     		mov	r3, r1
 3518 003a 1046     		mov	r0, r2
 3519 003c 1946     		mov	r1, r3
 3520 003e FFF7FEFF 		bl	__aeabi_d2iz
 3521 0042 0346     		mov	r3, r0
 3522 0044 1846     		mov	r0, r3
 3523 0046 07F10807 		add	r7, r7, #8
 3524 004a BD46     		mov	sp, r7
 3525 004c 80BD     		pop	{r7, pc}
 3526              		.cfi_endproc
 3527              	.LFE555:
 3529 004e 00BF     		.section	.text.fix16_from_int,"ax",%progbits
 3530              		.align	2
 3531              		.thumb
 3532              		.thumb_func
 3534              	fix16_from_int:
 3535              	.LFB557:
  28:/home/desem/workspace/desenet/fixmath/fix16.h **** /*! Converts a float to a fix16_t and returns the result. */
  29:/home/desem/workspace/desenet/fixmath/fix16.h **** static inline fix16_t fix16_from_float(const float inVal) { return (fix16_t)((inVal * 65536.0f) + 0
  30:/home/desem/workspace/desenet/fixmath/fix16.h **** #endif
  31:/home/desem/workspace/desenet/fixmath/fix16.h **** /*! Converts a signed integer to a fix16_t and returns the result. */
  32:/home/desem/workspace/desenet/fixmath/fix16.h **** static inline fix16_t fix16_from_int(const int32_t inVal) { return (inVal << 16); }
 3536              		.loc 70 32 0
 3537              		.cfi_startproc
 3538              		@ args = 0, pretend = 0, frame = 8
 3539              		@ frame_needed = 1, uses_anonymous_args = 0
 3540              		@ link register save eliminated.
 3541 0000 80B4     		push	{r7}
 3542              	.LCFI9:
 3543              		.cfi_def_cfa_offset 4
 3544 0002 83B0     		sub	sp, sp, #12
 3545              	.LCFI10:
 3546              		.cfi_def_cfa_offset 16
 3547 0004 00AF     		add	r7, sp, #0
 3548              		.cfi_offset 7, -4
 3549              	.LCFI11:
 3550              		.cfi_def_cfa_register 7
 3551 0006 7860     		str	r0, [r7, #4]
 3552              		.loc 70 32 0
 3553 0008 7B68     		ldr	r3, [r7, #4]
 3554 000a 4FEA0343 		lsl	r3, r3, #16
 3555 000e 1846     		mov	r0, r3
 3556 0010 07F10C07 		add	r7, r7, #12
 3557 0014 BD46     		mov	sp, r7
 3558 0016 80BC     		pop	{r7}
 3559 0018 7047     		bx	lr
 3560              		.cfi_endproc
 3561              	.LFE557:
 3563 001a 00BF     		.section	.text.fix16_to_int,"ax",%progbits
 3564              		.align	2
 3565              		.thumb
 3566              		.thumb_func
 3568              	fix16_to_int:
 3569              	.LFB560:
  33:/home/desem/workspace/desenet/fixmath/fix16.h **** 
  34:/home/desem/workspace/desenet/fixmath/fix16.h **** /*! Coverts a fix16_t to a double and returns the result. */
  35:/home/desem/workspace/desenet/fixmath/fix16.h **** static inline double  fix16_to_dbl(const fix16_t inVal)   { return ((double)inVal / 65536.0); }
  36:/home/desem/workspace/desenet/fixmath/fix16.h **** /*! Converts a fix16_t to a float and returns the result. */
  37:/home/desem/workspace/desenet/fixmath/fix16.h **** static inline float   fix16_to_float(const fix16_t inVal) { return ((float)inVal / 65536.0f); }
  38:/home/desem/workspace/desenet/fixmath/fix16.h **** /*! Converts a fix16_t to a signed integer and returns the result. */
  39:/home/desem/workspace/desenet/fixmath/fix16.h **** static inline int32_t fix16_to_int(const fix16_t inVal)   { return ((inVal + 0x00008000) >> 16); }
 3570              		.loc 70 39 0
 3571              		.cfi_startproc
 3572              		@ args = 0, pretend = 0, frame = 8
 3573              		@ frame_needed = 1, uses_anonymous_args = 0
 3574              		@ link register save eliminated.
 3575 0000 80B4     		push	{r7}
 3576              	.LCFI12:
 3577              		.cfi_def_cfa_offset 4
 3578 0002 83B0     		sub	sp, sp, #12
 3579              	.LCFI13:
 3580              		.cfi_def_cfa_offset 16
 3581 0004 00AF     		add	r7, sp, #0
 3582              		.cfi_offset 7, -4
 3583              	.LCFI14:
 3584              		.cfi_def_cfa_register 7
 3585 0006 7860     		str	r0, [r7, #4]
 3586              		.loc 70 39 0
 3587 0008 7B68     		ldr	r3, [r7, #4]
 3588 000a 03F50043 		add	r3, r3, #32768
 3589 000e 4FEA2343 		asr	r3, r3, #16
 3590 0012 1846     		mov	r0, r3
 3591 0014 07F10C07 		add	r7, r7, #12
 3592 0018 BD46     		mov	sp, r7
 3593 001a 80BC     		pop	{r7}
 3594 001c 7047     		bx	lr
 3595              		.cfi_endproc
 3596              	.LFE560:
 3598 001e 00BF     		.section	.text._ZN5Fix16C2Ev,"axG",%progbits,_ZN5Fix16C5Ev,comdat
 3599              		.align	2
 3600              		.weak	_ZN5Fix16C2Ev
 3601              		.thumb
 3602              		.thumb_func
 3604              	_ZN5Fix16C2Ev:
 3605              	.LFB565:
   1:/home/desem/workspace/desenet/fixmath/fix16.hpp **** #ifndef __libfixmath_fix16_hpp__
   2:/home/desem/workspace/desenet/fixmath/fix16.hpp **** #define __libfixmath_fix16_hpp__
   3:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
   4:/home/desem/workspace/desenet/fixmath/fix16.hpp **** class Fix16 {
   5:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 	public:
   6:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		fix16_t value;
   7:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
   8:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16() 					 { value = 0; 						  }
 3606              		.loc 71 8 0
 3607              		.cfi_startproc
 3608              		@ args = 0, pretend = 0, frame = 8
 3609              		@ frame_needed = 1, uses_anonymous_args = 0
 3610              		@ link register save eliminated.
 3611 0000 80B4     		push	{r7}
 3612              	.LCFI15:
 3613              		.cfi_def_cfa_offset 4
 3614 0002 83B0     		sub	sp, sp, #12
 3615              	.LCFI16:
 3616              		.cfi_def_cfa_offset 16
 3617 0004 00AF     		add	r7, sp, #0
 3618              		.cfi_offset 7, -4
 3619              	.LCFI17:
 3620              		.cfi_def_cfa_register 7
 3621 0006 7860     		str	r0, [r7, #4]
 3622              	.LBB3:
 3623              		.loc 71 8 0
 3624 0008 7B68     		ldr	r3, [r7, #4]
 3625 000a 4FF00002 		mov	r2, #0
 3626 000e 1A60     		str	r2, [r3, #0]
 3627              	.LBE3:
 3628 0010 7B68     		ldr	r3, [r7, #4]
 3629 0012 1846     		mov	r0, r3
 3630 0014 07F10C07 		add	r7, r7, #12
 3631 0018 BD46     		mov	sp, r7
 3632 001a 80BC     		pop	{r7}
 3633 001c 7047     		bx	lr
 3634              		.cfi_endproc
 3635              	.LFE565:
 3637              		.weak	_ZN5Fix16C1Ev
 3638              		.thumb_set _ZN5Fix16C1Ev,_ZN5Fix16C2Ev
 3639 001e 00BF     		.section	.text._ZN5Fix16C2ERKS_,"axG",%progbits,_ZN5Fix16C5ERKS_,comdat
 3640              		.align	2
 3641              		.weak	_ZN5Fix16C2ERKS_
 3642              		.thumb
 3643              		.thumb_func
 3645              	_ZN5Fix16C2ERKS_:
 3646              	.LFB568:
   9:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16(const Fix16 &inValue)  { value = inValue.value;             }
 3647              		.loc 71 9 0
 3648              		.cfi_startproc
 3649              		@ args = 0, pretend = 0, frame = 8
 3650              		@ frame_needed = 1, uses_anonymous_args = 0
 3651              		@ link register save eliminated.
 3652 0000 80B4     		push	{r7}
 3653              	.LCFI18:
 3654              		.cfi_def_cfa_offset 4
 3655 0002 83B0     		sub	sp, sp, #12
 3656              	.LCFI19:
 3657              		.cfi_def_cfa_offset 16
 3658 0004 00AF     		add	r7, sp, #0
 3659              		.cfi_offset 7, -4
 3660              	.LCFI20:
 3661              		.cfi_def_cfa_register 7
 3662 0006 7860     		str	r0, [r7, #4]
 3663 0008 3960     		str	r1, [r7, #0]
 3664              	.LBB4:
 3665              		.loc 71 9 0
 3666 000a 3B68     		ldr	r3, [r7, #0]
 3667 000c 1A68     		ldr	r2, [r3, #0]
 3668 000e 7B68     		ldr	r3, [r7, #4]
 3669 0010 1A60     		str	r2, [r3, #0]
 3670              	.LBE4:
 3671 0012 7B68     		ldr	r3, [r7, #4]
 3672 0014 1846     		mov	r0, r3
 3673 0016 07F10C07 		add	r7, r7, #12
 3674 001a BD46     		mov	sp, r7
 3675 001c 80BC     		pop	{r7}
 3676 001e 7047     		bx	lr
 3677              		.cfi_endproc
 3678              	.LFE568:
 3680              		.weak	_ZN5Fix16C1ERKS_
 3681              		.thumb_set _ZN5Fix16C1ERKS_,_ZN5Fix16C2ERKS_
 3682              		.section	.text._ZN5Fix16C2Ei,"axG",%progbits,_ZN5Fix16C5Ei,comdat
 3683              		.align	2
 3684              		.weak	_ZN5Fix16C2Ei
 3685              		.thumb
 3686              		.thumb_func
 3688              	_ZN5Fix16C2Ei:
 3689              	.LFB580:
  10:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16(const float inValue)   { value = fix16_from_float(inValue); }
  11:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16(const double inValue)  { value = fix16_from_dbl(inValue);   }
  12:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16(const int16_t inValue) { value = fix16_from_int(inValue);   }
  13:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16(const int inValue)     { value = fix16_from_int(inValue);   }
 3690              		.loc 71 13 0
 3691              		.cfi_startproc
 3692              		@ args = 0, pretend = 0, frame = 8
 3693              		@ frame_needed = 1, uses_anonymous_args = 0
 3694 0000 80B5     		push	{r7, lr}
 3695              	.LCFI21:
 3696              		.cfi_def_cfa_offset 8
 3697 0002 82B0     		sub	sp, sp, #8
 3698              	.LCFI22:
 3699              		.cfi_def_cfa_offset 16
 3700 0004 00AF     		add	r7, sp, #0
 3701              		.cfi_offset 14, -4
 3702              		.cfi_offset 7, -8
 3703              	.LCFI23:
 3704              		.cfi_def_cfa_register 7
 3705 0006 7860     		str	r0, [r7, #4]
 3706 0008 3960     		str	r1, [r7, #0]
 3707              	.LBB5:
 3708              		.loc 71 13 0
 3709 000a 3868     		ldr	r0, [r7, #0]
 3710 000c FFF7FEFF 		bl	fix16_from_int
 3711 0010 0246     		mov	r2, r0
 3712 0012 7B68     		ldr	r3, [r7, #4]
 3713 0014 1A60     		str	r2, [r3, #0]
 3714              	.LBE5:
 3715 0016 7B68     		ldr	r3, [r7, #4]
 3716 0018 1846     		mov	r0, r3
 3717 001a 07F10807 		add	r7, r7, #8
 3718 001e BD46     		mov	sp, r7
 3719 0020 80BD     		pop	{r7, pc}
 3720              		.cfi_endproc
 3721              	.LFE580:
 3723              		.weak	_ZN5Fix16C1Ei
 3724              		.thumb_set _ZN5Fix16C1Ei,_ZN5Fix16C2Ei
 3725 0022 00BF     		.section	.text._ZN5Fix1611fromFix16_tEl,"axG",%progbits,_ZN5Fix1611fromFix16_tEl,comdat
 3726              		.align	2
 3727              		.weak	_ZN5Fix1611fromFix16_tEl
 3728              		.thumb
 3729              		.thumb_func
 3731              	_ZN5Fix1611fromFix16_tEl:
 3732              	.LFB582:
  14:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  15:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		static Fix16 fromFix16_t(const fix16_t inValue) { Fix16 f; f.value = inValue; return f; }
 3733              		.loc 71 15 0
 3734              		.cfi_startproc
 3735              		@ args = 0, pretend = 0, frame = 16
 3736              		@ frame_needed = 1, uses_anonymous_args = 0
 3737 0000 90B5     		push	{r4, r7, lr}
 3738              	.LCFI24:
 3739              		.cfi_def_cfa_offset 12
 3740 0002 85B0     		sub	sp, sp, #20
 3741              	.LCFI25:
 3742              		.cfi_def_cfa_offset 32
 3743 0004 00AF     		add	r7, sp, #0
 3744              		.cfi_offset 14, -4
 3745              		.cfi_offset 7, -8
 3746              		.cfi_offset 4, -12
 3747              	.LCFI26:
 3748              		.cfi_def_cfa_register 7
 3749 0006 0446     		mov	r4, r0
 3750 0008 7960     		str	r1, [r7, #4]
 3751              	.LBB6:
 3752              		.loc 71 15 0
 3753 000a 2346     		mov	r3, r4
 3754 000c 1846     		mov	r0, r3
 3755 000e FFF7FEFF 		bl	_ZN5Fix16C1Ev
 3756 0012 2346     		mov	r3, r4
 3757 0014 7A68     		ldr	r2, [r7, #4]
 3758 0016 1A60     		str	r2, [r3, #0]
 3759              	.LBE6:
 3760 0018 2046     		mov	r0, r4
 3761 001a 2046     		mov	r0, r4
 3762 001c 07F11407 		add	r7, r7, #20
 3763 0020 BD46     		mov	sp, r7
 3764 0022 90BD     		pop	{r4, r7, pc}
 3765              		.cfi_endproc
 3766              	.LFE582:
 3768              		.section	.text._ZN5Fix16cviEv,"axG",%progbits,_ZN5Fix16cviEv,comdat
 3769              		.align	2
 3770              		.weak	_ZN5Fix16cviEv
 3771              		.thumb
 3772              		.thumb_func
 3774              	_ZN5Fix16cviEv:
 3775              	.LFB586:
  16:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  17:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		operator double()  { return fix16_to_dbl(value);   }
  18:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		operator float()   { return fix16_to_float(value); }
  19:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		operator int16_t() { return fix16_to_int(value);   }
  20:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		operator int() 	   { return fix16_to_int(value);   }
 3776              		.loc 71 20 0
 3777              		.cfi_startproc
 3778              		@ args = 0, pretend = 0, frame = 8
 3779              		@ frame_needed = 1, uses_anonymous_args = 0
 3780 0000 80B5     		push	{r7, lr}
 3781              	.LCFI27:
 3782              		.cfi_def_cfa_offset 8
 3783 0002 82B0     		sub	sp, sp, #8
 3784              	.LCFI28:
 3785              		.cfi_def_cfa_offset 16
 3786 0004 00AF     		add	r7, sp, #0
 3787              		.cfi_offset 14, -4
 3788              		.cfi_offset 7, -8
 3789              	.LCFI29:
 3790              		.cfi_def_cfa_register 7
 3791 0006 7860     		str	r0, [r7, #4]
 3792              		.loc 71 20 0
 3793 0008 7B68     		ldr	r3, [r7, #4]
 3794 000a 1B68     		ldr	r3, [r3, #0]
 3795 000c 1846     		mov	r0, r3
 3796 000e FFF7FEFF 		bl	fix16_to_int
 3797 0012 0346     		mov	r3, r0
 3798 0014 1846     		mov	r0, r3
 3799 0016 07F10807 		add	r7, r7, #8
 3800 001a BD46     		mov	sp, r7
 3801 001c 80BD     		pop	{r7, pc}
 3802              		.cfi_endproc
 3803              	.LFE586:
 3805 001e 00BF     		.section	.text._ZN5Fix16aSERKS_,"axG",%progbits,_ZN5Fix16aSERKS_,comdat
 3806              		.align	2
 3807              		.weak	_ZN5Fix16aSERKS_
 3808              		.thumb
 3809              		.thumb_func
 3811              	_ZN5Fix16aSERKS_:
 3812              	.LFB587:
  21:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  22:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator=(const Fix16 &rhs)  { value = rhs.value;             return *this; }
 3813              		.loc 71 22 0
 3814              		.cfi_startproc
 3815              		@ args = 0, pretend = 0, frame = 8
 3816              		@ frame_needed = 1, uses_anonymous_args = 0
 3817              		@ link register save eliminated.
 3818 0000 80B4     		push	{r7}
 3819              	.LCFI30:
 3820              		.cfi_def_cfa_offset 4
 3821 0002 83B0     		sub	sp, sp, #12
 3822              	.LCFI31:
 3823              		.cfi_def_cfa_offset 16
 3824 0004 00AF     		add	r7, sp, #0
 3825              		.cfi_offset 7, -4
 3826              	.LCFI32:
 3827              		.cfi_def_cfa_register 7
 3828 0006 7860     		str	r0, [r7, #4]
 3829 0008 3960     		str	r1, [r7, #0]
 3830              		.loc 71 22 0
 3831 000a 3B68     		ldr	r3, [r7, #0]
 3832 000c 1A68     		ldr	r2, [r3, #0]
 3833 000e 7B68     		ldr	r3, [r7, #4]
 3834 0010 1A60     		str	r2, [r3, #0]
 3835 0012 7B68     		ldr	r3, [r7, #4]
 3836 0014 1846     		mov	r0, r3
 3837 0016 07F10C07 		add	r7, r7, #12
 3838 001a BD46     		mov	sp, r7
 3839 001c 80BC     		pop	{r7}
 3840 001e 7047     		bx	lr
 3841              		.cfi_endproc
 3842              	.LFE587:
 3844              		.section	.text._ZN5Fix16pLERKS_,"axG",%progbits,_ZN5Fix16pLERKS_,comdat
 3845              		.align	2
 3846              		.weak	_ZN5Fix16pLERKS_
 3847              		.thumb
 3848              		.thumb_func
 3850              	_ZN5Fix16pLERKS_:
 3851              	.LFB592:
  23:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator=(const double rhs)  { value = fix16_from_dbl(rhs);   return *this; }
  24:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator=(const float rhs)   { value = fix16_from_float(rhs); return *this; }
  25:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator=(const int16_t rhs) { value = fix16_from_int(rhs);   return *this; }
  26:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator=(const int rhs)     { value = fix16_from_int(rhs);   return *this; }
  27:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  28:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator+=(const Fix16 &rhs)  { value += rhs.value;             return *this; }
 3852              		.loc 71 28 0
 3853              		.cfi_startproc
 3854              		@ args = 0, pretend = 0, frame = 8
 3855              		@ frame_needed = 1, uses_anonymous_args = 0
 3856              		@ link register save eliminated.
 3857 0000 80B4     		push	{r7}
 3858              	.LCFI33:
 3859              		.cfi_def_cfa_offset 4
 3860 0002 83B0     		sub	sp, sp, #12
 3861              	.LCFI34:
 3862              		.cfi_def_cfa_offset 16
 3863 0004 00AF     		add	r7, sp, #0
 3864              		.cfi_offset 7, -4
 3865              	.LCFI35:
 3866              		.cfi_def_cfa_register 7
 3867 0006 7860     		str	r0, [r7, #4]
 3868 0008 3960     		str	r1, [r7, #0]
 3869              		.loc 71 28 0
 3870 000a 7B68     		ldr	r3, [r7, #4]
 3871 000c 1A68     		ldr	r2, [r3, #0]
 3872 000e 3B68     		ldr	r3, [r7, #0]
 3873 0010 1B68     		ldr	r3, [r3, #0]
 3874 0012 D218     		adds	r2, r2, r3
 3875 0014 7B68     		ldr	r3, [r7, #4]
 3876 0016 1A60     		str	r2, [r3, #0]
 3877 0018 7B68     		ldr	r3, [r7, #4]
 3878 001a 1846     		mov	r0, r3
 3879 001c 07F10C07 		add	r7, r7, #12
 3880 0020 BD46     		mov	sp, r7
 3881 0022 80BC     		pop	{r7}
 3882 0024 7047     		bx	lr
 3883              		.cfi_endproc
 3884              	.LFE592:
 3886 0026 00BF     		.section	.text._ZN5Fix16pLEd,"axG",%progbits,_ZN5Fix16pLEd,comdat
 3887              		.align	2
 3888              		.weak	_ZN5Fix16pLEd
 3889              		.thumb
 3890              		.thumb_func
 3892              	_ZN5Fix16pLEd:
 3893              	.LFB593:
  29:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator+=(const double rhs)  { value += fix16_from_dbl(rhs);   return *this; }
 3894              		.loc 71 29 0
 3895              		.cfi_startproc
 3896              		@ args = 0, pretend = 0, frame = 16
 3897              		@ frame_needed = 1, uses_anonymous_args = 0
 3898 0000 90B5     		push	{r4, r7, lr}
 3899              	.LCFI36:
 3900              		.cfi_def_cfa_offset 12
 3901 0002 85B0     		sub	sp, sp, #20
 3902              	.LCFI37:
 3903              		.cfi_def_cfa_offset 32
 3904 0004 00AF     		add	r7, sp, #0
 3905              		.cfi_offset 14, -4
 3906              		.cfi_offset 7, -8
 3907              		.cfi_offset 4, -12
 3908              	.LCFI38:
 3909              		.cfi_def_cfa_register 7
 3910 0006 F860     		str	r0, [r7, #12]
 3911 0008 C7E90023 		strd	r2, [r7]
 3912              		.loc 71 29 0
 3913 000c FB68     		ldr	r3, [r7, #12]
 3914 000e 1C68     		ldr	r4, [r3, #0]
 3915 0010 D7E90001 		ldrd	r0, [r7]
 3916 0014 FFF7FEFF 		bl	fix16_from_dbl
 3917 0018 0346     		mov	r3, r0
 3918 001a E218     		adds	r2, r4, r3
 3919 001c FB68     		ldr	r3, [r7, #12]
 3920 001e 1A60     		str	r2, [r3, #0]
 3921 0020 FB68     		ldr	r3, [r7, #12]
 3922 0022 1846     		mov	r0, r3
 3923 0024 07F11407 		add	r7, r7, #20
 3924 0028 BD46     		mov	sp, r7
 3925 002a 90BD     		pop	{r4, r7, pc}
 3926              		.cfi_endproc
 3927              	.LFE593:
 3929              		.section	.text._ZN5Fix16pLEi,"axG",%progbits,_ZN5Fix16pLEi,comdat
 3930              		.align	2
 3931              		.weak	_ZN5Fix16pLEi
 3932              		.thumb
 3933              		.thumb_func
 3935              	_ZN5Fix16pLEi:
 3936              	.LFB596:
  30:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator+=(const float rhs)   { value += fix16_from_float(rhs); return *this; }
  31:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator+=(const int16_t rhs) { value += fix16_from_int(rhs);   return *this; }
  32:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator+=(const int rhs)     { value += fix16_from_int(rhs);   return *this; }
 3937              		.loc 71 32 0
 3938              		.cfi_startproc
 3939              		@ args = 0, pretend = 0, frame = 8
 3940              		@ frame_needed = 1, uses_anonymous_args = 0
 3941 0000 90B5     		push	{r4, r7, lr}
 3942              	.LCFI39:
 3943              		.cfi_def_cfa_offset 12
 3944 0002 83B0     		sub	sp, sp, #12
 3945              	.LCFI40:
 3946              		.cfi_def_cfa_offset 24
 3947 0004 00AF     		add	r7, sp, #0
 3948              		.cfi_offset 14, -4
 3949              		.cfi_offset 7, -8
 3950              		.cfi_offset 4, -12
 3951              	.LCFI41:
 3952              		.cfi_def_cfa_register 7
 3953 0006 7860     		str	r0, [r7, #4]
 3954 0008 3960     		str	r1, [r7, #0]
 3955              		.loc 71 32 0
 3956 000a 7B68     		ldr	r3, [r7, #4]
 3957 000c 1C68     		ldr	r4, [r3, #0]
 3958 000e 3868     		ldr	r0, [r7, #0]
 3959 0010 FFF7FEFF 		bl	fix16_from_int
 3960 0014 0346     		mov	r3, r0
 3961 0016 E218     		adds	r2, r4, r3
 3962 0018 7B68     		ldr	r3, [r7, #4]
 3963 001a 1A60     		str	r2, [r3, #0]
 3964 001c 7B68     		ldr	r3, [r7, #4]
 3965 001e 1846     		mov	r0, r3
 3966 0020 07F10C07 		add	r7, r7, #12
 3967 0024 BD46     		mov	sp, r7
 3968 0026 90BD     		pop	{r4, r7, pc}
 3969              		.cfi_endproc
 3970              	.LFE596:
 3972              		.section	.text._ZN5Fix16mIERKS_,"axG",%progbits,_ZN5Fix16mIERKS_,comdat
 3973              		.align	2
 3974              		.weak	_ZN5Fix16mIERKS_
 3975              		.thumb
 3976              		.thumb_func
 3978              	_ZN5Fix16mIERKS_:
 3979              	.LFB597:
  33:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  34:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator-=(const Fix16 &rhs)  { value -= rhs.value; return *this; 				}
 3980              		.loc 71 34 0
 3981              		.cfi_startproc
 3982              		@ args = 0, pretend = 0, frame = 8
 3983              		@ frame_needed = 1, uses_anonymous_args = 0
 3984              		@ link register save eliminated.
 3985 0000 80B4     		push	{r7}
 3986              	.LCFI42:
 3987              		.cfi_def_cfa_offset 4
 3988 0002 83B0     		sub	sp, sp, #12
 3989              	.LCFI43:
 3990              		.cfi_def_cfa_offset 16
 3991 0004 00AF     		add	r7, sp, #0
 3992              		.cfi_offset 7, -4
 3993              	.LCFI44:
 3994              		.cfi_def_cfa_register 7
 3995 0006 7860     		str	r0, [r7, #4]
 3996 0008 3960     		str	r1, [r7, #0]
 3997              		.loc 71 34 0
 3998 000a 7B68     		ldr	r3, [r7, #4]
 3999 000c 1A68     		ldr	r2, [r3, #0]
 4000 000e 3B68     		ldr	r3, [r7, #0]
 4001 0010 1B68     		ldr	r3, [r3, #0]
 4002 0012 D21A     		subs	r2, r2, r3
 4003 0014 7B68     		ldr	r3, [r7, #4]
 4004 0016 1A60     		str	r2, [r3, #0]
 4005 0018 7B68     		ldr	r3, [r7, #4]
 4006 001a 1846     		mov	r0, r3
 4007 001c 07F10C07 		add	r7, r7, #12
 4008 0020 BD46     		mov	sp, r7
 4009 0022 80BC     		pop	{r7}
 4010 0024 7047     		bx	lr
 4011              		.cfi_endproc
 4012              	.LFE597:
 4014 0026 00BF     		.section	.text._ZN5Fix16mLERKS_,"axG",%progbits,_ZN5Fix16mLERKS_,comdat
 4015              		.align	2
 4016              		.weak	_ZN5Fix16mLERKS_
 4017              		.thumb
 4018              		.thumb_func
 4020              	_ZN5Fix16mLERKS_:
 4021              	.LFB602:
  35:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator-=(const double rhs)  { value -= fix16_from_dbl(rhs); return *this; 	}
  36:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator-=(const float rhs)   { value -= fix16_from_float(rhs); return *this; 	}
  37:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator-=(const int16_t rhs) { value -= fix16_from_int(rhs); return *this; 	}
  38:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator-=(const int rhs) 	  { value -= fix16_from_int(rhs); return *this; 	}
  39:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  40:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator*=(const Fix16 &rhs)  { value = fix16_mul(value, rhs.value); return *this; 				}
 4022              		.loc 71 40 0
 4023              		.cfi_startproc
 4024              		@ args = 0, pretend = 0, frame = 8
 4025              		@ frame_needed = 1, uses_anonymous_args = 0
 4026 0000 80B5     		push	{r7, lr}
 4027              	.LCFI45:
 4028              		.cfi_def_cfa_offset 8
 4029 0002 82B0     		sub	sp, sp, #8
 4030              	.LCFI46:
 4031              		.cfi_def_cfa_offset 16
 4032 0004 00AF     		add	r7, sp, #0
 4033              		.cfi_offset 14, -4
 4034              		.cfi_offset 7, -8
 4035              	.LCFI47:
 4036              		.cfi_def_cfa_register 7
 4037 0006 7860     		str	r0, [r7, #4]
 4038 0008 3960     		str	r1, [r7, #0]
 4039              		.loc 71 40 0
 4040 000a 7B68     		ldr	r3, [r7, #4]
 4041 000c 1A68     		ldr	r2, [r3, #0]
 4042 000e 3B68     		ldr	r3, [r7, #0]
 4043 0010 1B68     		ldr	r3, [r3, #0]
 4044 0012 1046     		mov	r0, r2
 4045 0014 1946     		mov	r1, r3
 4046 0016 FFF7FEFF 		bl	fix16_mul
 4047 001a 0246     		mov	r2, r0
 4048 001c 7B68     		ldr	r3, [r7, #4]
 4049 001e 1A60     		str	r2, [r3, #0]
 4050 0020 7B68     		ldr	r3, [r7, #4]
 4051 0022 1846     		mov	r0, r3
 4052 0024 07F10807 		add	r7, r7, #8
 4053 0028 BD46     		mov	sp, r7
 4054 002a 80BD     		pop	{r7, pc}
 4055              		.cfi_endproc
 4056              	.LFE602:
 4058              		.section	.text._ZN5Fix16dVERKS_,"axG",%progbits,_ZN5Fix16dVERKS_,comdat
 4059              		.align	2
 4060              		.weak	_ZN5Fix16dVERKS_
 4061              		.thumb
 4062              		.thumb_func
 4064              	_ZN5Fix16dVERKS_:
 4065              	.LFB607:
  41:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator*=(const double rhs)  { value = fix16_mul(value, fix16_from_dbl(rhs)); return *th
  42:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator*=(const float rhs)   { value = fix16_mul(value, fix16_from_float(rhs)); return *
  43:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator*=(const int16_t rhs) { value *= rhs; return *this; 									}
  44:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator*=(const int rhs)     { value *= rhs; return *this; 									}
  45:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  46:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator/=(const Fix16 &rhs)  { value = fix16_div(value, rhs.value); return *this; 				}
 4066              		.loc 71 46 0
 4067              		.cfi_startproc
 4068              		@ args = 0, pretend = 0, frame = 8
 4069              		@ frame_needed = 1, uses_anonymous_args = 0
 4070 0000 80B5     		push	{r7, lr}
 4071              	.LCFI48:
 4072              		.cfi_def_cfa_offset 8
 4073 0002 82B0     		sub	sp, sp, #8
 4074              	.LCFI49:
 4075              		.cfi_def_cfa_offset 16
 4076 0004 00AF     		add	r7, sp, #0
 4077              		.cfi_offset 14, -4
 4078              		.cfi_offset 7, -8
 4079              	.LCFI50:
 4080              		.cfi_def_cfa_register 7
 4081 0006 7860     		str	r0, [r7, #4]
 4082 0008 3960     		str	r1, [r7, #0]
 4083              		.loc 71 46 0
 4084 000a 7B68     		ldr	r3, [r7, #4]
 4085 000c 1A68     		ldr	r2, [r3, #0]
 4086 000e 3B68     		ldr	r3, [r7, #0]
 4087 0010 1B68     		ldr	r3, [r3, #0]
 4088 0012 1046     		mov	r0, r2
 4089 0014 1946     		mov	r1, r3
 4090 0016 FFF7FEFF 		bl	fix16_div
 4091 001a 0246     		mov	r2, r0
 4092 001c 7B68     		ldr	r3, [r7, #4]
 4093 001e 1A60     		str	r2, [r3, #0]
 4094 0020 7B68     		ldr	r3, [r7, #4]
 4095 0022 1846     		mov	r0, r3
 4096 0024 07F10807 		add	r7, r7, #8
 4097 0028 BD46     		mov	sp, r7
 4098 002a 80BD     		pop	{r7, pc}
 4099              		.cfi_endproc
 4100              	.LFE607:
 4102              		.section	.text._ZN5Fix16dVEi,"axG",%progbits,_ZN5Fix16dVEi,comdat
 4103              		.align	2
 4104              		.weak	_ZN5Fix16dVEi
 4105              		.thumb
 4106              		.thumb_func
 4108              	_ZN5Fix16dVEi:
 4109              	.LFB611:
  47:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator/=(const double rhs)  { value = fix16_div(value, fix16_from_dbl(rhs)); return *th
  48:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator/=(const float rhs)   { value = fix16_div(value, fix16_from_float(rhs)); return *
  49:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator/=(const int16_t rhs) { value /= rhs; return *this; 									}
  50:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16 & operator/=(const int rhs)     { value /= rhs; return *this; 									}
 4110              		.loc 71 50 0
 4111              		.cfi_startproc
 4112              		@ args = 0, pretend = 0, frame = 8
 4113              		@ frame_needed = 1, uses_anonymous_args = 0
 4114              		@ link register save eliminated.
 4115 0000 80B4     		push	{r7}
 4116              	.LCFI51:
 4117              		.cfi_def_cfa_offset 4
 4118 0002 83B0     		sub	sp, sp, #12
 4119              	.LCFI52:
 4120              		.cfi_def_cfa_offset 16
 4121 0004 00AF     		add	r7, sp, #0
 4122              		.cfi_offset 7, -4
 4123              	.LCFI53:
 4124              		.cfi_def_cfa_register 7
 4125 0006 7860     		str	r0, [r7, #4]
 4126 0008 3960     		str	r1, [r7, #0]
 4127              		.loc 71 50 0
 4128 000a 7B68     		ldr	r3, [r7, #4]
 4129 000c 1A68     		ldr	r2, [r3, #0]
 4130 000e 3B68     		ldr	r3, [r7, #0]
 4131 0010 92FBF3F2 		sdiv	r2, r2, r3
 4132 0014 7B68     		ldr	r3, [r7, #4]
 4133 0016 1A60     		str	r2, [r3, #0]
 4134 0018 7B68     		ldr	r3, [r7, #4]
 4135 001a 1846     		mov	r0, r3
 4136 001c 07F10C07 		add	r7, r7, #12
 4137 0020 BD46     		mov	sp, r7
 4138 0022 80BC     		pop	{r7}
 4139 0024 7047     		bx	lr
 4140              		.cfi_endproc
 4141              	.LFE611:
 4143 0026 00BF     		.section	.text._ZNK5Fix16plERKS_,"axG",%progbits,_ZNK5Fix16plERKS_,comdat
 4144              		.align	2
 4145              		.weak	_ZNK5Fix16plERKS_
 4146              		.thumb
 4147              		.thumb_func
 4149              	_ZNK5Fix16plERKS_:
 4150              	.LFB612:
  51:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  52:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator+(const Fix16 &other) const  { Fix16 ret = *this; ret += other; return ret; }
 4151              		.loc 71 52 0
 4152              		.cfi_startproc
 4153              		@ args = 0, pretend = 0, frame = 16
 4154              		@ frame_needed = 1, uses_anonymous_args = 0
 4155 0000 90B5     		push	{r4, r7, lr}
 4156              	.LCFI54:
 4157              		.cfi_def_cfa_offset 12
 4158 0002 85B0     		sub	sp, sp, #20
 4159              	.LCFI55:
 4160              		.cfi_def_cfa_offset 32
 4161 0004 00AF     		add	r7, sp, #0
 4162              		.cfi_offset 14, -4
 4163              		.cfi_offset 7, -8
 4164              		.cfi_offset 4, -12
 4165              	.LCFI56:
 4166              		.cfi_def_cfa_register 7
 4167 0006 0446     		mov	r4, r0
 4168 0008 7960     		str	r1, [r7, #4]
 4169 000a 3A60     		str	r2, [r7, #0]
 4170              	.LBB7:
 4171              		.loc 71 52 0
 4172 000c 2346     		mov	r3, r4
 4173 000e 1846     		mov	r0, r3
 4174 0010 7968     		ldr	r1, [r7, #4]
 4175 0012 FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 4176 0016 2346     		mov	r3, r4
 4177 0018 1846     		mov	r0, r3
 4178 001a 3968     		ldr	r1, [r7, #0]
 4179 001c FFF7FEFF 		bl	_ZN5Fix16pLERKS_
 4180              	.LBE7:
 4181 0020 2046     		mov	r0, r4
 4182 0022 2046     		mov	r0, r4
 4183 0024 07F11407 		add	r7, r7, #20
 4184 0028 BD46     		mov	sp, r7
 4185 002a 90BD     		pop	{r4, r7, pc}
 4186              		.cfi_endproc
 4187              	.LFE612:
 4189              		.section	.text._ZNK5Fix16plEd,"axG",%progbits,_ZNK5Fix16plEd,comdat
 4190              		.align	2
 4191              		.weak	_ZNK5Fix16plEd
 4192              		.thumb
 4193              		.thumb_func
 4195              	_ZNK5Fix16plEd:
 4196              	.LFB613:
  53:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator+(const double other) const  { Fix16 ret = *this; ret += other; return ret; }
 4197              		.loc 71 53 0
 4198              		.cfi_startproc
 4199              		@ args = 0, pretend = 0, frame = 24
 4200              		@ frame_needed = 1, uses_anonymous_args = 0
 4201 0000 90B5     		push	{r4, r7, lr}
 4202              	.LCFI57:
 4203              		.cfi_def_cfa_offset 12
 4204 0002 87B0     		sub	sp, sp, #28
 4205              	.LCFI58:
 4206              		.cfi_def_cfa_offset 40
 4207 0004 00AF     		add	r7, sp, #0
 4208              		.cfi_offset 14, -4
 4209              		.cfi_offset 7, -8
 4210              		.cfi_offset 4, -12
 4211              	.LCFI59:
 4212              		.cfi_def_cfa_register 7
 4213 0006 0446     		mov	r4, r0
 4214 0008 F960     		str	r1, [r7, #12]
 4215 000a C7E90023 		strd	r2, [r7]
 4216              	.LBB8:
 4217              		.loc 71 53 0
 4218 000e 2346     		mov	r3, r4
 4219 0010 1846     		mov	r0, r3
 4220 0012 F968     		ldr	r1, [r7, #12]
 4221 0014 FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 4222 0018 2346     		mov	r3, r4
 4223 001a 1846     		mov	r0, r3
 4224 001c D7E90023 		ldrd	r2, [r7]
 4225 0020 FFF7FEFF 		bl	_ZN5Fix16pLEd
 4226              	.LBE8:
 4227 0024 2046     		mov	r0, r4
 4228 0026 2046     		mov	r0, r4
 4229 0028 07F11C07 		add	r7, r7, #28
 4230 002c BD46     		mov	sp, r7
 4231 002e 90BD     		pop	{r4, r7, pc}
 4232              		.cfi_endproc
 4233              	.LFE613:
 4235              		.section	.text._ZNK5Fix16plEi,"axG",%progbits,_ZNK5Fix16plEi,comdat
 4236              		.align	2
 4237              		.weak	_ZNK5Fix16plEi
 4238              		.thumb
 4239              		.thumb_func
 4241              	_ZNK5Fix16plEi:
 4242              	.LFB616:
  54:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator+(const float other) const   { Fix16 ret = *this; ret += other; return ret; }
  55:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator+(const int16_t other) const { Fix16 ret = *this; ret += other; return ret; }
  56:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator+(const int other) const     { Fix16 ret = *this; ret += other; return ret; }
 4243              		.loc 71 56 0
 4244              		.cfi_startproc
 4245              		@ args = 0, pretend = 0, frame = 16
 4246              		@ frame_needed = 1, uses_anonymous_args = 0
 4247 0000 90B5     		push	{r4, r7, lr}
 4248              	.LCFI60:
 4249              		.cfi_def_cfa_offset 12
 4250 0002 85B0     		sub	sp, sp, #20
 4251              	.LCFI61:
 4252              		.cfi_def_cfa_offset 32
 4253 0004 00AF     		add	r7, sp, #0
 4254              		.cfi_offset 14, -4
 4255              		.cfi_offset 7, -8
 4256              		.cfi_offset 4, -12
 4257              	.LCFI62:
 4258              		.cfi_def_cfa_register 7
 4259 0006 0446     		mov	r4, r0
 4260 0008 7960     		str	r1, [r7, #4]
 4261 000a 3A60     		str	r2, [r7, #0]
 4262              	.LBB9:
 4263              		.loc 71 56 0
 4264 000c 2346     		mov	r3, r4
 4265 000e 1846     		mov	r0, r3
 4266 0010 7968     		ldr	r1, [r7, #4]
 4267 0012 FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 4268 0016 2346     		mov	r3, r4
 4269 0018 1846     		mov	r0, r3
 4270 001a 3968     		ldr	r1, [r7, #0]
 4271 001c FFF7FEFF 		bl	_ZN5Fix16pLEi
 4272              	.LBE9:
 4273 0020 2046     		mov	r0, r4
 4274 0022 2046     		mov	r0, r4
 4275 0024 07F11407 		add	r7, r7, #20
 4276 0028 BD46     		mov	sp, r7
 4277 002a 90BD     		pop	{r4, r7, pc}
 4278              		.cfi_endproc
 4279              	.LFE616:
 4281              		.section	.text._ZNK5Fix16miERKS_,"axG",%progbits,_ZNK5Fix16miERKS_,comdat
 4282              		.align	2
 4283              		.weak	_ZNK5Fix16miERKS_
 4284              		.thumb
 4285              		.thumb_func
 4287              	_ZNK5Fix16miERKS_:
 4288              	.LFB622:
  57:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  58:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sadd(const Fix16 &other)  const { return fromFix16_t( fix16_sadd(value, other.value) 
  59:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sadd(const double other)  const { return fromFix16_t( fix16_sadd(value, fix16_from_db
  60:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sadd(const float other)   const { return fromFix16_t( fix16_sadd(value, fix16_from_fl
  61:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sadd(const int16_t other) const { return fromFix16_t( fix16_sadd(value, fix16_from_in
  62:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sadd(const int other) const     { return fromFix16_t( fix16_sadd(value, fix16_from_in
  63:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  64:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator-(const Fix16 &other) const  { Fix16 ret = *this; ret -= other; return ret; }
 4289              		.loc 71 64 0
 4290              		.cfi_startproc
 4291              		@ args = 0, pretend = 0, frame = 16
 4292              		@ frame_needed = 1, uses_anonymous_args = 0
 4293 0000 90B5     		push	{r4, r7, lr}
 4294              	.LCFI63:
 4295              		.cfi_def_cfa_offset 12
 4296 0002 85B0     		sub	sp, sp, #20
 4297              	.LCFI64:
 4298              		.cfi_def_cfa_offset 32
 4299 0004 00AF     		add	r7, sp, #0
 4300              		.cfi_offset 14, -4
 4301              		.cfi_offset 7, -8
 4302              		.cfi_offset 4, -12
 4303              	.LCFI65:
 4304              		.cfi_def_cfa_register 7
 4305 0006 0446     		mov	r4, r0
 4306 0008 7960     		str	r1, [r7, #4]
 4307 000a 3A60     		str	r2, [r7, #0]
 4308              	.LBB10:
 4309              		.loc 71 64 0
 4310 000c 2346     		mov	r3, r4
 4311 000e 1846     		mov	r0, r3
 4312 0010 7968     		ldr	r1, [r7, #4]
 4313 0012 FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 4314 0016 2346     		mov	r3, r4
 4315 0018 1846     		mov	r0, r3
 4316 001a 3968     		ldr	r1, [r7, #0]
 4317 001c FFF7FEFF 		bl	_ZN5Fix16mIERKS_
 4318              	.LBE10:
 4319 0020 2046     		mov	r0, r4
 4320 0022 2046     		mov	r0, r4
 4321 0024 07F11407 		add	r7, r7, #20
 4322 0028 BD46     		mov	sp, r7
 4323 002a 90BD     		pop	{r4, r7, pc}
 4324              		.cfi_endproc
 4325              	.LFE622:
 4327              		.section	.text._ZNK5Fix16mlERKS_,"axG",%progbits,_ZNK5Fix16mlERKS_,comdat
 4328              		.align	2
 4329              		.weak	_ZNK5Fix16mlERKS_
 4330              		.thumb
 4331              		.thumb_func
 4333              	_ZNK5Fix16mlERKS_:
 4334              	.LFB632:
  65:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator-(const double other) const  { Fix16 ret = *this; ret -= other; return ret; }
  66:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator-(const float other) const   { Fix16 ret = *this; ret -= other; return ret; }
  67:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator-(const int16_t other) const { Fix16 ret = *this; ret -= other; return ret; }
  68:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator-(const int other) const     { Fix16 ret = *this; ret -= other; return ret; }
  69:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  70:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 ssub(const Fix16 &other)  const { return fromFix16_t( fix16_sadd(value, -other.value)
  71:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 ssub(const double other)  const { return fromFix16_t( fix16_sadd(value, -fix16_from_d
  72:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 ssub(const float other)   const { return fromFix16_t( fix16_sadd(value, -fix16_from_f
  73:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 ssub(const int16_t other) const { return fromFix16_t( fix16_sadd(value, -fix16_from_i
  74:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 ssub(const int other) const     { return fromFix16_t( fix16_sadd(value, -fix16_from_i
  75:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  76:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator*(const Fix16 &other) const  { Fix16 ret = *this; ret *= other; return ret; 	
 4335              		.loc 71 76 0
 4336              		.cfi_startproc
 4337              		@ args = 0, pretend = 0, frame = 16
 4338              		@ frame_needed = 1, uses_anonymous_args = 0
 4339 0000 90B5     		push	{r4, r7, lr}
 4340              	.LCFI66:
 4341              		.cfi_def_cfa_offset 12
 4342 0002 85B0     		sub	sp, sp, #20
 4343              	.LCFI67:
 4344              		.cfi_def_cfa_offset 32
 4345 0004 00AF     		add	r7, sp, #0
 4346              		.cfi_offset 14, -4
 4347              		.cfi_offset 7, -8
 4348              		.cfi_offset 4, -12
 4349              	.LCFI68:
 4350              		.cfi_def_cfa_register 7
 4351 0006 0446     		mov	r4, r0
 4352 0008 7960     		str	r1, [r7, #4]
 4353 000a 3A60     		str	r2, [r7, #0]
 4354              	.LBB11:
 4355              		.loc 71 76 0
 4356 000c 2346     		mov	r3, r4
 4357 000e 1846     		mov	r0, r3
 4358 0010 7968     		ldr	r1, [r7, #4]
 4359 0012 FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 4360 0016 2346     		mov	r3, r4
 4361 0018 1846     		mov	r0, r3
 4362 001a 3968     		ldr	r1, [r7, #0]
 4363 001c FFF7FEFF 		bl	_ZN5Fix16mLERKS_
 4364              	.LBE11:
 4365 0020 2046     		mov	r0, r4
 4366 0022 2046     		mov	r0, r4
 4367 0024 07F11407 		add	r7, r7, #20
 4368 0028 BD46     		mov	sp, r7
 4369 002a 90BD     		pop	{r4, r7, pc}
 4370              		.cfi_endproc
 4371              	.LFE632:
 4373              		.section	.text._ZNK5Fix16dvERKS_,"axG",%progbits,_ZNK5Fix16dvERKS_,comdat
 4374              		.align	2
 4375              		.weak	_ZNK5Fix16dvERKS_
 4376              		.thumb
 4377              		.thumb_func
 4379              	_ZNK5Fix16dvERKS_:
 4380              	.LFB642:
  77:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator*(const double other) const  { Fix16 ret = *this; ret *= other; return ret; 	
  78:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator*(const float other) const   { Fix16 ret = *this; ret *= other; return ret; 	
  79:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator*(const int16_t other) const { Fix16 ret = *this; ret *= other; return ret; 	
  80:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator*(const int other) const     { Fix16 ret = *this; ret *= other; return ret; 	
  81:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  82:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 smul(const Fix16 &other)  const { return fromFix16_t( fix16_smul(value, other.value) 
  83:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 smul(const double other)  const { return fromFix16_t( fix16_smul(value, fix16_from_db
  84:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 smul(const float other)   const { return fromFix16_t( fix16_smul(value, fix16_from_fl
  85:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 smul(const int16_t other) const { return fromFix16_t( fix16_smul(value, fix16_from_in
  86:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 smul(const int other) const     { return fromFix16_t( fix16_smul(value, fix16_from_in
  87:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  88:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator/(const Fix16 &other) const  { Fix16 ret = *this; ret /= other; return ret; }
 4381              		.loc 71 88 0
 4382              		.cfi_startproc
 4383              		@ args = 0, pretend = 0, frame = 16
 4384              		@ frame_needed = 1, uses_anonymous_args = 0
 4385 0000 90B5     		push	{r4, r7, lr}
 4386              	.LCFI69:
 4387              		.cfi_def_cfa_offset 12
 4388 0002 85B0     		sub	sp, sp, #20
 4389              	.LCFI70:
 4390              		.cfi_def_cfa_offset 32
 4391 0004 00AF     		add	r7, sp, #0
 4392              		.cfi_offset 14, -4
 4393              		.cfi_offset 7, -8
 4394              		.cfi_offset 4, -12
 4395              	.LCFI71:
 4396              		.cfi_def_cfa_register 7
 4397 0006 0446     		mov	r4, r0
 4398 0008 7960     		str	r1, [r7, #4]
 4399 000a 3A60     		str	r2, [r7, #0]
 4400              	.LBB12:
 4401              		.loc 71 88 0
 4402 000c 2346     		mov	r3, r4
 4403 000e 1846     		mov	r0, r3
 4404 0010 7968     		ldr	r1, [r7, #4]
 4405 0012 FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 4406 0016 2346     		mov	r3, r4
 4407 0018 1846     		mov	r0, r3
 4408 001a 3968     		ldr	r1, [r7, #0]
 4409 001c FFF7FEFF 		bl	_ZN5Fix16dVERKS_
 4410              	.LBE12:
 4411 0020 2046     		mov	r0, r4
 4412 0022 2046     		mov	r0, r4
 4413 0024 07F11407 		add	r7, r7, #20
 4414 0028 BD46     		mov	sp, r7
 4415 002a 90BD     		pop	{r4, r7, pc}
 4416              		.cfi_endproc
 4417              	.LFE642:
 4419              		.section	.text._ZNK5Fix16dvEi,"axG",%progbits,_ZNK5Fix16dvEi,comdat
 4420              		.align	2
 4421              		.weak	_ZNK5Fix16dvEi
 4422              		.thumb
 4423              		.thumb_func
 4425              	_ZNK5Fix16dvEi:
 4426              	.LFB646:
  89:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator/(const double other) const  { Fix16 ret = *this; ret /= other; return ret; }
  90:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator/(const float other) const   { Fix16 ret = *this; ret /= other; return ret; }
  91:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator/(const int16_t other) const { Fix16 ret = *this; ret /= other; return ret; }
  92:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 operator/(const int other) const     { Fix16 ret = *this; ret /= other; return ret; }
 4427              		.loc 71 92 0
 4428              		.cfi_startproc
 4429              		@ args = 0, pretend = 0, frame = 16
 4430              		@ frame_needed = 1, uses_anonymous_args = 0
 4431 0000 90B5     		push	{r4, r7, lr}
 4432              	.LCFI72:
 4433              		.cfi_def_cfa_offset 12
 4434 0002 85B0     		sub	sp, sp, #20
 4435              	.LCFI73:
 4436              		.cfi_def_cfa_offset 32
 4437 0004 00AF     		add	r7, sp, #0
 4438              		.cfi_offset 14, -4
 4439              		.cfi_offset 7, -8
 4440              		.cfi_offset 4, -12
 4441              	.LCFI74:
 4442              		.cfi_def_cfa_register 7
 4443 0006 0446     		mov	r4, r0
 4444 0008 7960     		str	r1, [r7, #4]
 4445 000a 3A60     		str	r2, [r7, #0]
 4446              	.LBB13:
 4447              		.loc 71 92 0
 4448 000c 2346     		mov	r3, r4
 4449 000e 1846     		mov	r0, r3
 4450 0010 7968     		ldr	r1, [r7, #4]
 4451 0012 FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 4452 0016 2346     		mov	r3, r4
 4453 0018 1846     		mov	r0, r3
 4454 001a 3968     		ldr	r1, [r7, #0]
 4455 001c FFF7FEFF 		bl	_ZN5Fix16dVEi
 4456              	.LBE13:
 4457 0020 2046     		mov	r0, r4
 4458 0022 2046     		mov	r0, r4
 4459 0024 07F11407 		add	r7, r7, #20
 4460 0028 BD46     		mov	sp, r7
 4461 002a 90BD     		pop	{r4, r7, pc}
 4462              		.cfi_endproc
 4463              	.LFE646:
 4465              		.section	.text._ZNK5Fix16leERKS_,"axG",%progbits,_ZNK5Fix16leERKS_,comdat
 4466              		.align	2
 4467              		.weak	_ZNK5Fix16leERKS_
 4468              		.thumb
 4469              		.thumb_func
 4471              	_ZNK5Fix16leERKS_:
 4472              	.LFB662:
  93:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
  94:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sdiv(const Fix16 &other)  const { return fromFix16_t( fix16_sdiv(value, other.value) 
  95:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sdiv(const double other)  const { return fromFix16_t( fix16_sdiv(value, fix16_from_db
  96:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sdiv(const float other)   const { return fromFix16_t( fix16_sdiv(value, fix16_from_fl
  97:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sdiv(const int16_t other) const { return fromFix16_t( fix16_sdiv(value, fix16_from_in
  98:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const Fix16 sdiv(const int other) const     { return fromFix16_t( fix16_sdiv(value, fix16_from_in
  99:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
 100:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator==(const Fix16 &other)  const { return (value == other.value);             }
 101:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator==(const double other)  const { return (value == fix16_from_dbl(other));   }
 102:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator==(const float other)   const { return (value == fix16_from_float(other)); }
 103:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator==(const int16_t other) const { return (value == fix16_from_int(other));   }
 104:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator==(const int other) const     { return (value == fix16_from_int(other));   }
 105:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
 106:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator!=(const Fix16 &other)  const { return (value != other.value);             }
 107:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator!=(const double other)  const { return (value != fix16_from_dbl(other));   }
 108:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator!=(const float other)   const { return (value != fix16_from_float(other)); }
 109:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator!=(const int16_t other) const { return (value != fix16_from_int(other));   }
 110:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator!=(const int other) const 	{ return (value != fix16_from_int(other));   }
 111:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
 112:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator<=(const Fix16 &other)  const { return (value <= other.value);             }
 4473              		.loc 71 112 0
 4474              		.cfi_startproc
 4475              		@ args = 0, pretend = 0, frame = 8
 4476              		@ frame_needed = 1, uses_anonymous_args = 0
 4477              		@ link register save eliminated.
 4478 0000 80B4     		push	{r7}
 4479              	.LCFI75:
 4480              		.cfi_def_cfa_offset 4
 4481 0002 83B0     		sub	sp, sp, #12
 4482              	.LCFI76:
 4483              		.cfi_def_cfa_offset 16
 4484 0004 00AF     		add	r7, sp, #0
 4485              		.cfi_offset 7, -4
 4486              	.LCFI77:
 4487              		.cfi_def_cfa_register 7
 4488 0006 7860     		str	r0, [r7, #4]
 4489 0008 3960     		str	r1, [r7, #0]
 4490              		.loc 71 112 0
 4491 000a 7B68     		ldr	r3, [r7, #4]
 4492 000c 1A68     		ldr	r2, [r3, #0]
 4493 000e 3B68     		ldr	r3, [r7, #0]
 4494 0010 1B68     		ldr	r3, [r3, #0]
 4495 0012 9A42     		cmp	r2, r3
 4496 0014 CCBF     		ite	gt
 4497 0016 0023     		movgt	r3, #0
 4498 0018 0123     		movle	r3, #1
 4499 001a 1846     		mov	r0, r3
 4500 001c 07F10C07 		add	r7, r7, #12
 4501 0020 BD46     		mov	sp, r7
 4502 0022 80BC     		pop	{r7}
 4503 0024 7047     		bx	lr
 4504              		.cfi_endproc
 4505              	.LFE662:
 4507 0026 00BF     		.section	.text._ZNK5Fix16ltEi,"axG",%progbits,_ZNK5Fix16ltEi,comdat
 4508              		.align	2
 4509              		.weak	_ZNK5Fix16ltEi
 4510              		.thumb
 4511              		.thumb_func
 4513              	_ZNK5Fix16ltEi:
 4514              	.LFB676:
 113:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator<=(const double other)  const { return (value <= fix16_from_dbl(other));   }
 114:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator<=(const float other)   const { return (value <= fix16_from_float(other)); }
 115:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator<=(const int16_t other) const { return (value <= fix16_from_int(other));   }
 116:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator<=(const int other) const 	{ return (value <= fix16_from_int(other));   }
 117:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
 118:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator>=(const Fix16 &other)  const { return (value >= other.value);             }
 119:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator>=(const double other)  const { return (value >= fix16_from_dbl(other));   }
 120:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator>=(const float other)   const { return (value >= fix16_from_float(other)); }
 121:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator>=(const int16_t other) const { return (value >= fix16_from_int(other));   }
 122:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator>=(const int other) const 	{ return (value >= fix16_from_int(other));   }
 123:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
 124:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator< (const Fix16 &other)  const { return (value <  other.value);             }
 125:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator< (const double other)  const { return (value <  fix16_from_dbl(other));   }
 126:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator< (const float other)   const { return (value <  fix16_from_float(other)); }
 127:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator< (const int16_t other) const { return (value <  fix16_from_int(other));   }
 128:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator< (const int other) const 	{ return (value <  fix16_from_int(other));   }
 4515              		.loc 71 128 0
 4516              		.cfi_startproc
 4517              		@ args = 0, pretend = 0, frame = 8
 4518              		@ frame_needed = 1, uses_anonymous_args = 0
 4519 0000 90B5     		push	{r4, r7, lr}
 4520              	.LCFI78:
 4521              		.cfi_def_cfa_offset 12
 4522 0002 83B0     		sub	sp, sp, #12
 4523              	.LCFI79:
 4524              		.cfi_def_cfa_offset 24
 4525 0004 00AF     		add	r7, sp, #0
 4526              		.cfi_offset 14, -4
 4527              		.cfi_offset 7, -8
 4528              		.cfi_offset 4, -12
 4529              	.LCFI80:
 4530              		.cfi_def_cfa_register 7
 4531 0006 7860     		str	r0, [r7, #4]
 4532 0008 3960     		str	r1, [r7, #0]
 4533              		.loc 71 128 0
 4534 000a 7B68     		ldr	r3, [r7, #4]
 4535 000c 1C68     		ldr	r4, [r3, #0]
 4536 000e 3868     		ldr	r0, [r7, #0]
 4537 0010 FFF7FEFF 		bl	fix16_from_int
 4538 0014 0346     		mov	r3, r0
 4539 0016 9C42     		cmp	r4, r3
 4540 0018 ACBF     		ite	ge
 4541 001a 0023     		movge	r3, #0
 4542 001c 0123     		movlt	r3, #1
 4543 001e 1846     		mov	r0, r3
 4544 0020 07F10C07 		add	r7, r7, #12
 4545 0024 BD46     		mov	sp, r7
 4546 0026 90BD     		pop	{r4, r7, pc}
 4547              		.cfi_endproc
 4548              	.LFE676:
 4550              		.section	.text._ZN5Fix163sinEv,"axG",%progbits,_ZN5Fix163sinEv,comdat
 4551              		.align	2
 4552              		.weak	_ZN5Fix163sinEv
 4553              		.thumb
 4554              		.thumb_func
 4556              	_ZN5Fix163sinEv:
 4557              	.LFB682:
 129:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
 130:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator> (const Fix16 &other)  const { return (value >  other.value);             }
 131:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator> (const double other)  const { return (value >  fix16_from_dbl(other));   }
 132:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator> (const float other)   const { return (value >  fix16_from_float(other)); }
 133:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator> (const int16_t other) const { return (value >  fix16_from_int(other));   }
 134:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		const int operator> (const int other) const		{ return (value >  fix16_from_int(other));   }
 135:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 
 136:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16  sin() { return fromFix16_t(fix16_sin(value));  }
 4558              		.loc 71 136 0
 4559              		.cfi_startproc
 4560              		@ args = 0, pretend = 0, frame = 8
 4561              		@ frame_needed = 1, uses_anonymous_args = 0
 4562 0000 B0B5     		push	{r4, r5, r7, lr}
 4563              	.LCFI81:
 4564              		.cfi_def_cfa_offset 16
 4565 0002 82B0     		sub	sp, sp, #8
 4566              	.LCFI82:
 4567              		.cfi_def_cfa_offset 24
 4568 0004 00AF     		add	r7, sp, #0
 4569              		.cfi_offset 14, -4
 4570              		.cfi_offset 7, -8
 4571              		.cfi_offset 5, -12
 4572              		.cfi_offset 4, -16
 4573              	.LCFI83:
 4574              		.cfi_def_cfa_register 7
 4575 0006 0446     		mov	r4, r0
 4576 0008 7960     		str	r1, [r7, #4]
 4577              		.loc 71 136 0
 4578 000a 2546     		mov	r5, r4
 4579 000c 7B68     		ldr	r3, [r7, #4]
 4580 000e 1B68     		ldr	r3, [r3, #0]
 4581 0010 1846     		mov	r0, r3
 4582 0012 FFF7FEFF 		bl	fix16_sin
 4583 0016 0346     		mov	r3, r0
 4584 0018 2846     		mov	r0, r5
 4585 001a 1946     		mov	r1, r3
 4586 001c FFF7FEFF 		bl	_ZN5Fix1611fromFix16_tEl
 4587 0020 2046     		mov	r0, r4
 4588 0022 2046     		mov	r0, r4
 4589 0024 07F10807 		add	r7, r7, #8
 4590 0028 BD46     		mov	sp, r7
 4591 002a B0BD     		pop	{r4, r5, r7, pc}
 4592              		.cfi_endproc
 4593              	.LFE682:
 4595              		.section	.text._ZN5Fix163cosEv,"axG",%progbits,_ZN5Fix163cosEv,comdat
 4596              		.align	2
 4597              		.weak	_ZN5Fix163cosEv
 4598              		.thumb
 4599              		.thumb_func
 4601              	_ZN5Fix163cosEv:
 4602              	.LFB683:
 137:/home/desem/workspace/desenet/fixmath/fix16.hpp **** 		Fix16  cos() { return fromFix16_t(fix16_cos(value));  }
 4603              		.loc 71 137 0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 8
 4606              		@ frame_needed = 1, uses_anonymous_args = 0
 4607 0000 B0B5     		push	{r4, r5, r7, lr}
 4608              	.LCFI84:
 4609              		.cfi_def_cfa_offset 16
 4610 0002 82B0     		sub	sp, sp, #8
 4611              	.LCFI85:
 4612              		.cfi_def_cfa_offset 24
 4613 0004 00AF     		add	r7, sp, #0
 4614              		.cfi_offset 14, -4
 4615              		.cfi_offset 7, -8
 4616              		.cfi_offset 5, -12
 4617              		.cfi_offset 4, -16
 4618              	.LCFI86:
 4619              		.cfi_def_cfa_register 7
 4620 0006 0446     		mov	r4, r0
 4621 0008 7960     		str	r1, [r7, #4]
 4622              		.loc 71 137 0
 4623 000a 2546     		mov	r5, r4
 4624 000c 7B68     		ldr	r3, [r7, #4]
 4625 000e 1B68     		ldr	r3, [r3, #0]
 4626 0010 1846     		mov	r0, r3
 4627 0012 FFF7FEFF 		bl	fix16_cos
 4628 0016 0346     		mov	r3, r0
 4629 0018 2846     		mov	r0, r5
 4630 001a 1946     		mov	r1, r3
 4631 001c FFF7FEFF 		bl	_ZN5Fix1611fromFix16_tEl
 4632 0020 2046     		mov	r0, r4
 4633 0022 2046     		mov	r0, r4
 4634 0024 07F10807 		add	r7, r7, #8
 4635 0028 BD46     		mov	sp, r7
 4636 002a B0BD     		pop	{r4, r5, r7, pc}
 4637              		.cfi_endproc
 4638              	.LFE683:
 4640              		.section	.text._ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb,"ax",%progbits
 4641              		.align	2
 4642              		.global	_ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb
 4643              		.thumb
 4644              		.thumb_func
 4646              	_ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb:
 4647              	.LFB895:
   1:../utils/monochromedisplaypainter.cpp **** #include "MonochromeDisplayPainter"
   2:../utils/monochromedisplaypainter.cpp **** #include <fixmath/fix16.h>
   3:../utils/monochromedisplaypainter.cpp **** #include <fixmath/fix16.hpp>
   4:../utils/monochromedisplaypainter.cpp **** #include <cstring>
   5:../utils/monochromedisplaypainter.cpp **** #include <algorithm>
   6:../utils/monochromedisplaypainter.cpp **** #include <assert.h>
   7:../utils/monochromedisplaypainter.cpp **** 
   8:../utils/monochromedisplaypainter.cpp **** MonochromeDisplayPainter::MonochromeDisplayPainter( IMonochromeDisplay * display , bool autoUpdate 
 4648              		.loc 1 8 0
 4649              		.cfi_startproc
 4650              		@ args = 0, pretend = 0, frame = 16
 4651              		@ frame_needed = 1, uses_anonymous_args = 0
 4652 0000 90B5     		push	{r4, r7, lr}
 4653              	.LCFI87:
 4654              		.cfi_def_cfa_offset 12
 4655 0002 85B0     		sub	sp, sp, #20
 4656              	.LCFI88:
 4657              		.cfi_def_cfa_offset 32
 4658 0004 00AF     		add	r7, sp, #0
 4659              		.cfi_offset 14, -4
 4660              		.cfi_offset 7, -8
 4661              		.cfi_offset 4, -12
 4662              	.LCFI89:
 4663              		.cfi_def_cfa_register 7
 4664 0006 F860     		str	r0, [r7, #12]
 4665 0008 B960     		str	r1, [r7, #8]
 4666 000a 1346     		mov	r3, r2
 4667 000c FB71     		strb	r3, [r7, #7]
 4668              	.LBB14:
   9:../utils/monochromedisplaypainter.cpp **** 	: _display( display ) , _offscreenBitmap( NULL ) , _disableSync( false ) , _autoUpdate( autoUpdate
 4669              		.loc 1 9 0
 4670 000e FB68     		ldr	r3, [r7, #12]
 4671 0010 104A     		ldr	r2, .L36
 4672 0012 1A60     		str	r2, [r3, #0]
 4673 0014 FB68     		ldr	r3, [r7, #12]
 4674 0016 BA68     		ldr	r2, [r7, #8]
 4675 0018 5A60     		str	r2, [r3, #4]
 4676 001a FB68     		ldr	r3, [r7, #12]
 4677 001c 4FF00002 		mov	r2, #0
 4678 0020 DA60     		str	r2, [r3, #12]
 4679 0022 FB68     		ldr	r3, [r7, #12]
 4680 0024 4FF00002 		mov	r2, #0
 4681 0028 1A74     		strb	r2, [r3, #16]
 4682 002a FB68     		ldr	r3, [r7, #12]
 4683 002c FA79     		ldrb	r2, [r7, #7]
 4684 002e 5A74     		strb	r2, [r3, #17]
  10:../utils/monochromedisplaypainter.cpp **** {
  11:../utils/monochromedisplaypainter.cpp **** 	// Ask the display for his accelerated drawing methods.
  12:../utils/monochromedisplaypainter.cpp **** 	if ( display ) _accelMethods = display->acceleratedDrawingMethods();
 4685              		.loc 1 12 0
 4686 0030 BB68     		ldr	r3, [r7, #8]
 4687 0032 002B     		cmp	r3, #0
 4688 0034 08D0     		beq	.L35
 4689              		.loc 1 12 0 is_stmt 0 discriminator 1
 4690 0036 BB68     		ldr	r3, [r7, #8]
 4691 0038 1B68     		ldr	r3, [r3, #0]
 4692 003a 03F10C03 		add	r3, r3, #12
 4693 003e 1B68     		ldr	r3, [r3, #0]
 4694 0040 FC68     		ldr	r4, [r7, #12]
 4695 0042 B868     		ldr	r0, [r7, #8]
 4696 0044 9847     		blx	r3
 4697 0046 A060     		str	r0, [r4, #8]
 4698              	.L35:
 4699              	.LBE14:
  13:../utils/monochromedisplaypainter.cpp **** }
 4700              		.loc 1 13 0 is_stmt 1
 4701 0048 FB68     		ldr	r3, [r7, #12]
 4702 004a 1846     		mov	r0, r3
 4703 004c 07F11407 		add	r7, r7, #20
 4704 0050 BD46     		mov	sp, r7
 4705 0052 90BD     		pop	{r4, r7, pc}
 4706              	.L37:
 4707              		.align	2
 4708              	.L36:
 4709 0054 08000000 		.word	_ZTV24MonochromeDisplayPainter+8
 4710              		.cfi_endproc
 4711              	.LFE895:
 4713              		.global	_ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb
 4714              		.thumb_set _ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb,_ZN24MonochromeDisplayPainterC2E
 4715              		.section	.text._ZN24MonochromeDisplayPainterD2Ev,"ax",%progbits
 4716              		.align	2
 4717              		.global	_ZN24MonochromeDisplayPainterD2Ev
 4718              		.thumb
 4719              		.thumb_func
 4721              	_ZN24MonochromeDisplayPainterD2Ev:
 4722              	.LFB898:
  14:../utils/monochromedisplaypainter.cpp **** 
  15:../utils/monochromedisplaypainter.cpp **** MonochromeDisplayPainter::~MonochromeDisplayPainter()
 4723              		.loc 1 15 0
 4724              		.cfi_startproc
 4725              		@ args = 0, pretend = 0, frame = 8
 4726              		@ frame_needed = 1, uses_anonymous_args = 0
 4727 0000 80B5     		push	{r7, lr}
 4728              	.LCFI90:
 4729              		.cfi_def_cfa_offset 8
 4730 0002 82B0     		sub	sp, sp, #8
 4731              	.LCFI91:
 4732              		.cfi_def_cfa_offset 16
 4733 0004 00AF     		add	r7, sp, #0
 4734              		.cfi_offset 14, -4
 4735              		.cfi_offset 7, -8
 4736              	.LCFI92:
 4737              		.cfi_def_cfa_register 7
 4738 0006 7860     		str	r0, [r7, #4]
 4739              	.LBB15:
 4740              		.loc 1 15 0
 4741 0008 7B68     		ldr	r3, [r7, #4]
 4742 000a 0A4A     		ldr	r2, .L41
 4743 000c 1A60     		str	r2, [r3, #0]
  16:../utils/monochromedisplaypainter.cpp **** {
  17:../utils/monochromedisplaypainter.cpp **** 	// End painting.
  18:../utils/monochromedisplaypainter.cpp **** 	end();
 4744              		.loc 1 18 0
 4745 000e 7868     		ldr	r0, [r7, #4]
 4746 0010 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter3endEv
 4747              	.LBE15:
  19:../utils/monochromedisplaypainter.cpp **** }
 4748              		.loc 1 19 0
 4749 0014 4FF00003 		mov	r3, #0
 4750 0018 03F00103 		and	r3, r3, #1
 4751 001c DBB2     		uxtb	r3, r3
 4752 001e 002B     		cmp	r3, #0
 4753 0020 02D0     		beq	.L40
 4754              		.loc 1 19 0 is_stmt 0 discriminator 1
 4755 0022 7868     		ldr	r0, [r7, #4]
 4756 0024 FFF7FEFF 		bl	_ZdlPv
 4757              	.L40:
 4758              		.loc 1 19 0 discriminator 2
 4759 0028 7B68     		ldr	r3, [r7, #4]
 4760 002a 1846     		mov	r0, r3
 4761 002c 07F10807 		add	r7, r7, #8
 4762 0030 BD46     		mov	sp, r7
 4763 0032 80BD     		pop	{r7, pc}
 4764              	.L42:
 4765              		.align	2
 4766              	.L41:
 4767 0034 08000000 		.word	_ZTV24MonochromeDisplayPainter+8
 4768              		.cfi_endproc
 4769              	.LFE898:
 4771              		.global	_ZN24MonochromeDisplayPainterD1Ev
 4772              		.thumb_set _ZN24MonochromeDisplayPainterD1Ev,_ZN24MonochromeDisplayPainterD2Ev
 4773              		.section	.text._ZN24MonochromeDisplayPainterD0Ev,"ax",%progbits
 4774              		.align	2
 4775              		.global	_ZN24MonochromeDisplayPainterD0Ev
 4776              		.thumb
 4777              		.thumb_func
 4779              	_ZN24MonochromeDisplayPainterD0Ev:
 4780              	.LFB900:
  15:../utils/monochromedisplaypainter.cpp **** MonochromeDisplayPainter::~MonochromeDisplayPainter()
 4781              		.loc 1 15 0 is_stmt 1
 4782              		.cfi_startproc
 4783              		@ args = 0, pretend = 0, frame = 8
 4784              		@ frame_needed = 1, uses_anonymous_args = 0
 4785 0000 80B5     		push	{r7, lr}
 4786              	.LCFI93:
 4787              		.cfi_def_cfa_offset 8
 4788 0002 82B0     		sub	sp, sp, #8
 4789              	.LCFI94:
 4790              		.cfi_def_cfa_offset 16
 4791 0004 00AF     		add	r7, sp, #0
 4792              		.cfi_offset 14, -4
 4793              		.cfi_offset 7, -8
 4794              	.LCFI95:
 4795              		.cfi_def_cfa_register 7
 4796 0006 7860     		str	r0, [r7, #4]
 4797              		.loc 1 19 0
 4798 0008 7868     		ldr	r0, [r7, #4]
 4799 000a FFF7FEFF 		bl	_ZN24MonochromeDisplayPainterD1Ev
 4800 000e 7868     		ldr	r0, [r7, #4]
 4801 0010 FFF7FEFF 		bl	_ZdlPv
 4802 0014 7B68     		ldr	r3, [r7, #4]
 4803 0016 1846     		mov	r0, r3
 4804 0018 07F10807 		add	r7, r7, #8
 4805 001c BD46     		mov	sp, r7
 4806 001e 80BD     		pop	{r7, pc}
 4807              		.cfi_endproc
 4808              	.LFE900:
 4810              		.section	.text._ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay,"ax",%progbits
 4811              		.align	2
 4812              		.global	_ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay
 4813              		.thumb
 4814              		.thumb_func
 4816              	_ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay:
 4817              	.LFB901:
  20:../utils/monochromedisplaypainter.cpp **** 
  21:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::begin( IMonochromeDisplay * display )
  22:../utils/monochromedisplaypainter.cpp **** {
 4818              		.loc 1 22 0
 4819              		.cfi_startproc
 4820              		@ args = 0, pretend = 0, frame = 8
 4821              		@ frame_needed = 1, uses_anonymous_args = 0
 4822 0000 90B5     		push	{r4, r7, lr}
 4823              	.LCFI96:
 4824              		.cfi_def_cfa_offset 12
 4825 0002 83B0     		sub	sp, sp, #12
 4826              	.LCFI97:
 4827              		.cfi_def_cfa_offset 24
 4828 0004 00AF     		add	r7, sp, #0
 4829              		.cfi_offset 14, -4
 4830              		.cfi_offset 7, -8
 4831              		.cfi_offset 4, -12
 4832              	.LCFI98:
 4833              		.cfi_def_cfa_register 7
 4834 0006 7860     		str	r0, [r7, #4]
 4835 0008 3960     		str	r1, [r7, #0]
  23:../utils/monochromedisplaypainter.cpp **** 	// End the work relationship with the old display if there was any.
  24:../utils/monochromedisplaypainter.cpp **** 	end();
 4836              		.loc 1 24 0
 4837 000a 7868     		ldr	r0, [r7, #4]
 4838 000c FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter3endEv
  25:../utils/monochromedisplaypainter.cpp **** 
  26:../utils/monochromedisplaypainter.cpp **** 	// Set display pointer and ask the device for his capabilities.
  27:../utils/monochromedisplaypainter.cpp **** 	_display = display;
 4839              		.loc 1 27 0
 4840 0010 7B68     		ldr	r3, [r7, #4]
 4841 0012 3A68     		ldr	r2, [r7, #0]
 4842 0014 5A60     		str	r2, [r3, #4]
  28:../utils/monochromedisplaypainter.cpp **** 	if ( display ) _accelMethods = display->acceleratedDrawingMethods();
 4843              		.loc 1 28 0
 4844 0016 3B68     		ldr	r3, [r7, #0]
 4845 0018 002B     		cmp	r3, #0
 4846 001a 08D0     		beq	.L45
 4847              		.loc 1 28 0 is_stmt 0 discriminator 1
 4848 001c 3B68     		ldr	r3, [r7, #0]
 4849 001e 1B68     		ldr	r3, [r3, #0]
 4850 0020 03F10C03 		add	r3, r3, #12
 4851 0024 1B68     		ldr	r3, [r3, #0]
 4852 0026 7C68     		ldr	r4, [r7, #4]
 4853 0028 3868     		ldr	r0, [r7, #0]
 4854 002a 9847     		blx	r3
 4855 002c A060     		str	r0, [r4, #8]
 4856              	.L45:
  29:../utils/monochromedisplaypainter.cpp **** }
 4857              		.loc 1 29 0 is_stmt 1
 4858 002e 07F10C07 		add	r7, r7, #12
 4859 0032 BD46     		mov	sp, r7
 4860 0034 90BD     		pop	{r4, r7, pc}
 4861              		.cfi_endproc
 4862              	.LFE901:
 4864 0036 00BF     		.section	.text._ZN24MonochromeDisplayPainter3endEv,"ax",%progbits
 4865              		.align	2
 4866              		.global	_ZN24MonochromeDisplayPainter3endEv
 4867              		.thumb
 4868              		.thumb_func
 4870              	_ZN24MonochromeDisplayPainter3endEv:
 4871              	.LFB902:
  30:../utils/monochromedisplaypainter.cpp **** 
  31:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::end()
  32:../utils/monochromedisplaypainter.cpp **** {
 4872              		.loc 1 32 0
 4873              		.cfi_startproc
 4874              		@ args = 0, pretend = 0, frame = 8
 4875              		@ frame_needed = 1, uses_anonymous_args = 0
 4876 0000 80B5     		push	{r7, lr}
 4877              	.LCFI99:
 4878              		.cfi_def_cfa_offset 8
 4879 0002 82B0     		sub	sp, sp, #8
 4880              	.LCFI100:
 4881              		.cfi_def_cfa_offset 16
 4882 0004 00AF     		add	r7, sp, #0
 4883              		.cfi_offset 14, -4
 4884              		.cfi_offset 7, -8
 4885              	.LCFI101:
 4886              		.cfi_def_cfa_register 7
 4887 0006 7860     		str	r0, [r7, #4]
  33:../utils/monochromedisplaypainter.cpp **** 	// Commit changes if the display exists.
  34:../utils/monochromedisplaypainter.cpp **** 	if ( _display && !_autoUpdate )
 4888              		.loc 1 34 0
 4889 0008 7B68     		ldr	r3, [r7, #4]
 4890 000a 5B68     		ldr	r3, [r3, #4]
 4891 000c 002B     		cmp	r3, #0
 4892 000e 09D0     		beq	.L48
 4893              		.loc 1 34 0 is_stmt 0 discriminator 1
 4894 0010 7B68     		ldr	r3, [r7, #4]
 4895 0012 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 4896 0014 83F00103 		eor	r3, r3, #1
 4897 0018 DBB2     		uxtb	r3, r3
 4898 001a 002B     		cmp	r3, #0
 4899 001c 02D0     		beq	.L48
  35:../utils/monochromedisplaypainter.cpp **** 		update();
 4900              		.loc 1 35 0 is_stmt 1
 4901 001e 7868     		ldr	r0, [r7, #4]
 4902 0020 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter6updateEv
 4903              	.L48:
  36:../utils/monochromedisplaypainter.cpp **** 
  37:../utils/monochromedisplaypainter.cpp **** 	// We can not work anymore with the recent display object.
  38:../utils/monochromedisplaypainter.cpp **** 	_display = NULL;
 4904              		.loc 1 38 0
 4905 0024 7B68     		ldr	r3, [r7, #4]
 4906 0026 4FF00002 		mov	r2, #0
 4907 002a 5A60     		str	r2, [r3, #4]
  39:../utils/monochromedisplaypainter.cpp **** 
  40:../utils/monochromedisplaypainter.cpp **** 	// If we used an off-screen bitmap, we have to remove it.
  41:../utils/monochromedisplaypainter.cpp **** 	if ( _offscreenBitmap )
 4908              		.loc 1 41 0
 4909 002c 7B68     		ldr	r3, [r7, #4]
 4910 002e DB68     		ldr	r3, [r3, #12]
 4911 0030 002B     		cmp	r3, #0
 4912 0032 0CD0     		beq	.L47
  42:../utils/monochromedisplaypainter.cpp **** 	{
  43:../utils/monochromedisplaypainter.cpp **** 		delete[] _offscreenBitmap;
 4913              		.loc 1 43 0
 4914 0034 7B68     		ldr	r3, [r7, #4]
 4915 0036 DB68     		ldr	r3, [r3, #12]
 4916 0038 002B     		cmp	r3, #0
 4917 003a 04D0     		beq	.L50
 4918              		.loc 1 43 0 is_stmt 0 discriminator 1
 4919 003c 7B68     		ldr	r3, [r7, #4]
 4920 003e DB68     		ldr	r3, [r3, #12]
 4921 0040 1846     		mov	r0, r3
 4922 0042 FFF7FEFF 		bl	_ZdaPv
 4923              	.L50:
  44:../utils/monochromedisplaypainter.cpp **** 		_offscreenBitmap = NULL;
 4924              		.loc 1 44 0 is_stmt 1
 4925 0046 7B68     		ldr	r3, [r7, #4]
 4926 0048 4FF00002 		mov	r2, #0
 4927 004c DA60     		str	r2, [r3, #12]
 4928              	.L47:
  45:../utils/monochromedisplaypainter.cpp **** 	}
  46:../utils/monochromedisplaypainter.cpp **** }
 4929              		.loc 1 46 0
 4930 004e 07F10807 		add	r7, r7, #8
 4931 0052 BD46     		mov	sp, r7
 4932 0054 80BD     		pop	{r7, pc}
 4933              		.cfi_endproc
 4934              	.LFE902:
 4936 0056 00BF     		.section	.rodata
 4937              		.align	2
 4938              	.LC0:
 4939 0000 2E2E2F75 		.ascii	"../utils/monochromedisplaypainter.cpp\000"
 4939      74696C73 
 4939      2F6D6F6E 
 4939      6F636872 
 4939      6F6D6564 
 4940 0026 0000     		.align	2
 4941              	.LC1:
 4942 0028 5F646973 		.ascii	"_display\000"
 4942      706C6179 
 4942      00
 4943 0031 000000   		.section	.text._ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE,"ax",%progbi
 4944              		.align	2
 4945              		.global	_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE
 4946              		.thumb
 4947              		.thumb_func
 4949              	_ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE:
 4950              	.LFB903:
  47:../utils/monochromedisplaypainter.cpp **** 
  48:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::clear( IMonochromeDisplay::PixelColor color )
  49:../utils/monochromedisplaypainter.cpp **** {
 4951              		.loc 1 49 0
 4952              		.cfi_startproc
 4953              		@ args = 0, pretend = 0, frame = 64
 4954              		@ frame_needed = 1, uses_anonymous_args = 0
 4955 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 4956              	.LCFI102:
 4957              		.cfi_def_cfa_offset 20
 4958 0002 93B0     		sub	sp, sp, #76
 4959              	.LCFI103:
 4960              		.cfi_def_cfa_offset 96
 4961 0004 02AF     		add	r7, sp, #8
 4962              		.cfi_offset 14, -4
 4963              		.cfi_offset 7, -8
 4964              		.cfi_offset 6, -12
 4965              		.cfi_offset 5, -16
 4966              		.cfi_offset 4, -20
 4967              	.LCFI104:
 4968              		.cfi_def_cfa 7, 88
 4969 0006 7860     		str	r0, [r7, #4]
 4970 0008 0B46     		mov	r3, r1
 4971 000a FB70     		strb	r3, [r7, #3]
 4972              	.LBB16:
  50:../utils/monochromedisplaypainter.cpp **** 	assert( _display );
 4973              		.loc 1 50 0
 4974 000c 7B68     		ldr	r3, [r7, #4]
 4975 000e 5B68     		ldr	r3, [r3, #4]
 4976 0010 002B     		cmp	r3, #0
 4977 0012 0FD1     		bne	.L52
 4978              		.loc 1 50 0 is_stmt 0 discriminator 1
 4979 0014 40F20000 		movw	r0, #:lower16:.LC0
 4980 0018 C0F20000 		movt	r0, #:upper16:.LC0
 4981 001c 4FF03201 		mov	r1, #50
 4982 0020 40F20002 		movw	r2, #:lower16:_ZZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorEE19__PRE
 4983 0024 C0F20002 		movt	r2, #:upper16:_ZZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorEE19__PRE
 4984 0028 40F20003 		movw	r3, #:lower16:.LC1
 4985 002c C0F20003 		movt	r3, #:upper16:.LC1
 4986 0030 FFF7FEFF 		bl	__assert_func
 4987              	.L52:
  51:../utils/monochromedisplaypainter.cpp **** 	if ( _display )
 4988              		.loc 1 51 0 is_stmt 1
 4989 0034 7B68     		ldr	r3, [r7, #4]
 4990 0036 5B68     		ldr	r3, [r3, #4]
 4991 0038 002B     		cmp	r3, #0
 4992 003a 00F0D380 		beq	.L51
  52:../utils/monochromedisplaypainter.cpp **** 	{
  53:../utils/monochromedisplaypainter.cpp **** 		// Try first the accelerated clear method.
  54:../utils/monochromedisplaypainter.cpp **** 		if ( _accelMethods.clearAccelerated )
 4993              		.loc 1 54 0
 4994 003e 7B68     		ldr	r3, [r7, #4]
 4995 0040 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 4996 0042 03F00103 		and	r3, r3, #1
 4997 0046 DBB2     		uxtb	r3, r3
 4998 0048 002B     		cmp	r3, #0
 4999 004a 4AD0     		beq	.L54
  55:../utils/monochromedisplaypainter.cpp **** 		{
  56:../utils/monochromedisplaypainter.cpp **** 			_display->clear( color );
 5000              		.loc 1 56 0
 5001 004c 7B68     		ldr	r3, [r7, #4]
 5002 004e 5B68     		ldr	r3, [r3, #4]
 5003 0050 1B68     		ldr	r3, [r3, #0]
 5004 0052 03F12403 		add	r3, r3, #36
 5005 0056 1B68     		ldr	r3, [r3, #0]
 5006 0058 7A68     		ldr	r2, [r7, #4]
 5007 005a 5168     		ldr	r1, [r2, #4]
 5008 005c 97F90320 		ldrsb	r2, [r7, #3]
 5009 0060 0846     		mov	r0, r1
 5010 0062 1146     		mov	r1, r2
 5011 0064 9847     		blx	r3
  57:../utils/monochromedisplaypainter.cpp **** 
  58:../utils/monochromedisplaypainter.cpp **** 			if ( _offscreenBitmap )
 5012              		.loc 1 58 0
 5013 0066 7B68     		ldr	r3, [r7, #4]
 5014 0068 DB68     		ldr	r3, [r3, #12]
 5015 006a 002B     		cmp	r3, #0
 5016 006c 00F0BA80 		beq	.L51
  59:../utils/monochromedisplaypainter.cpp **** 			{
  60:../utils/monochromedisplaypainter.cpp **** 				memset( _offscreenBitmap , color == IMonochromeDisplay::White ? 0x00 : 0xFF ,
  61:../utils/monochromedisplaypainter.cpp **** 						( ( _display->resolution().width * _display->resolution().height ) + 7 ) / 8 );
 5017              		.loc 1 61 0
 5018 0070 7B68     		ldr	r3, [r7, #4]
 5019 0072 DD68     		ldr	r5, [r3, #12]
 5020 0074 97F90330 		ldrsb	r3, [r7, #3]
 5021 0078 B3F1FF3F 		cmp	r3, #-1
 5022 007c 02D1     		bne	.L55
 5023              		.loc 1 61 0 is_stmt 0 discriminator 1
 5024 007e 4FF00004 		mov	r4, #0
 5025 0082 01E0     		b	.L56
 5026              	.L55:
 5027              		.loc 1 61 0 discriminator 2
 5028 0084 4FF0FF04 		mov	r4, #255
 5029              	.L56:
 5030              		.loc 1 61 0 discriminator 3
 5031 0088 7B68     		ldr	r3, [r7, #4]
 5032 008a 5B68     		ldr	r3, [r3, #4]
 5033 008c 1B68     		ldr	r3, [r3, #0]
 5034 008e 03F10803 		add	r3, r3, #8
 5035 0092 1B68     		ldr	r3, [r3, #0]
 5036 0094 7A68     		ldr	r2, [r7, #4]
 5037 0096 5268     		ldr	r2, [r2, #4]
 5038 0098 07F10801 		add	r1, r7, #8
 5039 009c 0846     		mov	r0, r1
 5040 009e 1146     		mov	r1, r2
 5041 00a0 9847     		blx	r3
 5042 00a2 BE68     		ldr	r6, [r7, #8]
 5043 00a4 7B68     		ldr	r3, [r7, #4]
 5044 00a6 5B68     		ldr	r3, [r3, #4]
 5045 00a8 1B68     		ldr	r3, [r3, #0]
 5046 00aa 03F10803 		add	r3, r3, #8
 5047 00ae 1B68     		ldr	r3, [r3, #0]
 5048 00b0 7A68     		ldr	r2, [r7, #4]
 5049 00b2 5268     		ldr	r2, [r2, #4]
 5050 00b4 07F11001 		add	r1, r7, #16
 5051 00b8 0846     		mov	r0, r1
 5052 00ba 1146     		mov	r1, r2
 5053 00bc 9847     		blx	r3
 5054 00be 7B69     		ldr	r3, [r7, #20]
 5055 00c0 03FB06F3 		mul	r3, r3, r6
 5056 00c4 03F10703 		add	r3, r3, #7
 5057 00c8 03F10702 		add	r2, r3, #7
 5058 00cc 002B     		cmp	r3, #0
 5059 00ce B8BF     		it	lt
 5060 00d0 1346     		movlt	r3, r2
 5061 00d2 4FEAE303 		asr	r3, r3, #3
 5062 00d6 2846     		mov	r0, r5
 5063 00d8 2146     		mov	r1, r4
 5064 00da 1A46     		mov	r2, r3
 5065 00dc FFF7FEFF 		bl	memset
 5066 00e0 80E0     		b	.L51
 5067              	.L54:
  62:../utils/monochromedisplaypainter.cpp **** 			}
  63:../utils/monochromedisplaypainter.cpp **** 		}
  64:../utils/monochromedisplaypainter.cpp **** 
  65:../utils/monochromedisplaypainter.cpp **** 		// Try buffer copy method.
  66:../utils/monochromedisplaypainter.cpp **** 		else if ( _accelMethods.memoryCopyAccelerated )
 5068              		.loc 1 66 0 is_stmt 1
 5069 00e2 7B68     		ldr	r3, [r7, #4]
 5070 00e4 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5071 00e6 03F00203 		and	r3, r3, #2
 5072 00ea DBB2     		uxtb	r3, r3
 5073 00ec 002B     		cmp	r3, #0
 5074 00ee 55D0     		beq	.L57
  67:../utils/monochromedisplaypainter.cpp **** 		{
  68:../utils/monochromedisplaypainter.cpp **** 			// Create the off-screen buffer if it exists not already without sync from display.
  69:../utils/monochromedisplaypainter.cpp **** 			_createOffsetBitmap();
 5075              		.loc 1 69 0
 5076 00f0 7868     		ldr	r0, [r7, #4]
 5077 00f2 4FF00001 		mov	r1, #0
 5078 00f6 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
  70:../utils/monochromedisplaypainter.cpp **** 
  71:../utils/monochromedisplaypainter.cpp **** 			// Initialize the bitmask.
  72:../utils/monochromedisplaypainter.cpp **** 			memset( _offscreenBitmap , color == IMonochromeDisplay::White ? 0x00 : 0xFF ,
  73:../utils/monochromedisplaypainter.cpp **** 					( ( _display->resolution().width * _display->resolution().height ) + 7 ) / 8 );
 5079              		.loc 1 73 0
 5080 00fa 7B68     		ldr	r3, [r7, #4]
 5081 00fc DD68     		ldr	r5, [r3, #12]
 5082 00fe 97F90330 		ldrsb	r3, [r7, #3]
 5083 0102 B3F1FF3F 		cmp	r3, #-1
 5084 0106 02D1     		bne	.L58
 5085              		.loc 1 73 0 is_stmt 0 discriminator 1
 5086 0108 4FF00004 		mov	r4, #0
 5087 010c 01E0     		b	.L59
 5088              	.L58:
 5089              		.loc 1 73 0 discriminator 2
 5090 010e 4FF0FF04 		mov	r4, #255
 5091              	.L59:
 5092              		.loc 1 73 0 discriminator 3
 5093 0112 7B68     		ldr	r3, [r7, #4]
 5094 0114 5B68     		ldr	r3, [r3, #4]
 5095 0116 1B68     		ldr	r3, [r3, #0]
 5096 0118 03F10803 		add	r3, r3, #8
 5097 011c 1B68     		ldr	r3, [r3, #0]
 5098 011e 7A68     		ldr	r2, [r7, #4]
 5099 0120 5268     		ldr	r2, [r2, #4]
 5100 0122 07F11801 		add	r1, r7, #24
 5101 0126 0846     		mov	r0, r1
 5102 0128 1146     		mov	r1, r2
 5103 012a 9847     		blx	r3
 5104 012c BE69     		ldr	r6, [r7, #24]
 5105 012e 7B68     		ldr	r3, [r7, #4]
 5106 0130 5B68     		ldr	r3, [r3, #4]
 5107 0132 1B68     		ldr	r3, [r3, #0]
 5108 0134 03F10803 		add	r3, r3, #8
 5109 0138 1B68     		ldr	r3, [r3, #0]
 5110 013a 7A68     		ldr	r2, [r7, #4]
 5111 013c 5268     		ldr	r2, [r2, #4]
 5112 013e 07F12001 		add	r1, r7, #32
 5113 0142 0846     		mov	r0, r1
 5114 0144 1146     		mov	r1, r2
 5115 0146 9847     		blx	r3
 5116 0148 7B6A     		ldr	r3, [r7, #36]
 5117 014a 03FB06F3 		mul	r3, r3, r6
 5118 014e 03F10703 		add	r3, r3, #7
 5119 0152 03F10702 		add	r2, r3, #7
 5120 0156 002B     		cmp	r3, #0
 5121 0158 B8BF     		it	lt
 5122 015a 1346     		movlt	r3, r2
 5123 015c 4FEAE303 		asr	r3, r3, #3
 5124 0160 2846     		mov	r0, r5
 5125 0162 2146     		mov	r1, r4
 5126 0164 1A46     		mov	r2, r3
 5127 0166 FFF7FEFF 		bl	memset
  74:../utils/monochromedisplaypainter.cpp **** 
  75:../utils/monochromedisplaypainter.cpp **** 			// Sync the off-screen buffer to the real display.
  76:../utils/monochromedisplaypainter.cpp **** 			if ( _autoUpdate )
 5128              		.loc 1 76 0 is_stmt 1 discriminator 3
 5129 016a 7B68     		ldr	r3, [r7, #4]
 5130 016c 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 5131 016e 002B     		cmp	r3, #0
 5132 0170 38D0     		beq	.L51
  77:../utils/monochromedisplaypainter.cpp **** 				_syncDisplay( 0 , _display->resolution().height );
 5133              		.loc 1 77 0
 5134 0172 7B68     		ldr	r3, [r7, #4]
 5135 0174 5B68     		ldr	r3, [r3, #4]
 5136 0176 1B68     		ldr	r3, [r3, #0]
 5137 0178 03F10803 		add	r3, r3, #8
 5138 017c 1B68     		ldr	r3, [r3, #0]
 5139 017e 7A68     		ldr	r2, [r7, #4]
 5140 0180 5268     		ldr	r2, [r2, #4]
 5141 0182 07F12801 		add	r1, r7, #40
 5142 0186 0846     		mov	r0, r1
 5143 0188 1146     		mov	r1, r2
 5144 018a 9847     		blx	r3
 5145 018c FB6A     		ldr	r3, [r7, #44]
 5146 018e 7868     		ldr	r0, [r7, #4]
 5147 0190 4FF00001 		mov	r1, #0
 5148 0194 1A46     		mov	r2, r3
 5149 0196 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter12_syncDisplayEii
 5150 019a 23E0     		b	.L51
 5151              	.L57:
  78:../utils/monochromedisplaypainter.cpp **** 		}
  79:../utils/monochromedisplaypainter.cpp **** 
  80:../utils/monochromedisplaypainter.cpp **** 		// Fall back to software rendered method at the worst case.
  81:../utils/monochromedisplaypainter.cpp **** 		else
  82:../utils/monochromedisplaypainter.cpp **** 		{
  83:../utils/monochromedisplaypainter.cpp **** 			drawRectangle( IMonochromeDisplay::Point( 0 , 0 ) , _display->resolution() ,
  84:../utils/monochromedisplaypainter.cpp **** 					       IMonochromeDisplay::Undefined , color );
 5152              		.loc 1 84 0
 5153 019c 07F13003 		add	r3, r7, #48
 5154 01a0 1846     		mov	r0, r3
 5155 01a2 4FF00001 		mov	r1, #0
 5156 01a6 4FF00002 		mov	r2, #0
 5157 01aa FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
  83:../utils/monochromedisplaypainter.cpp **** 			drawRectangle( IMonochromeDisplay::Point( 0 , 0 ) , _display->resolution() ,
 5158              		.loc 1 83 0
 5159 01ae 7B68     		ldr	r3, [r7, #4]
 5160 01b0 5B68     		ldr	r3, [r3, #4]
 5161 01b2 1B68     		ldr	r3, [r3, #0]
 5162 01b4 03F10803 		add	r3, r3, #8
 5163 01b8 1B68     		ldr	r3, [r3, #0]
 5164 01ba 7A68     		ldr	r2, [r7, #4]
 5165 01bc 5268     		ldr	r2, [r2, #4]
 5166              		.loc 1 84 0
 5167 01be 07F13801 		add	r1, r7, #56
 5168 01c2 0846     		mov	r0, r1
 5169 01c4 1146     		mov	r1, r2
 5170 01c6 9847     		blx	r3
 5171 01c8 07F13002 		add	r2, r7, #48
 5172 01cc 07F13803 		add	r3, r7, #56
 5173 01d0 97F90310 		ldrsb	r1, [r7, #3]
 5174 01d4 0091     		str	r1, [sp, #0]
 5175 01d6 7868     		ldr	r0, [r7, #4]
 5176 01d8 1146     		mov	r1, r2
 5177 01da 1A46     		mov	r2, r3
 5178 01dc 4FF00003 		mov	r3, #0
 5179 01e0 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10Pi
 5180              	.L51:
 5181              	.LBE16:
  85:../utils/monochromedisplaypainter.cpp **** 		}
  86:../utils/monochromedisplaypainter.cpp **** 	}
  87:../utils/monochromedisplaypainter.cpp **** }
 5182              		.loc 1 87 0
 5183 01e4 07F14407 		add	r7, r7, #68
 5184 01e8 BD46     		mov	sp, r7
 5185 01ea F0BD     		pop	{r4, r5, r6, r7, pc}
 5186              		.cfi_endproc
 5187              	.LFE903:
 5189              		.section	.text._ZNK24MonochromeDisplayPainter10autoUpdateEv,"ax",%progbits
 5190              		.align	2
 5191              		.global	_ZNK24MonochromeDisplayPainter10autoUpdateEv
 5192              		.thumb
 5193              		.thumb_func
 5195              	_ZNK24MonochromeDisplayPainter10autoUpdateEv:
 5196              	.LFB904:
  88:../utils/monochromedisplaypainter.cpp **** 
  89:../utils/monochromedisplaypainter.cpp **** bool MonochromeDisplayPainter::autoUpdate() const
  90:../utils/monochromedisplaypainter.cpp **** {
 5197              		.loc 1 90 0
 5198              		.cfi_startproc
 5199              		@ args = 0, pretend = 0, frame = 8
 5200              		@ frame_needed = 1, uses_anonymous_args = 0
 5201              		@ link register save eliminated.
 5202 0000 80B4     		push	{r7}
 5203              	.LCFI105:
 5204              		.cfi_def_cfa_offset 4
 5205 0002 83B0     		sub	sp, sp, #12
 5206              	.LCFI106:
 5207              		.cfi_def_cfa_offset 16
 5208 0004 00AF     		add	r7, sp, #0
 5209              		.cfi_offset 7, -4
 5210              	.LCFI107:
 5211              		.cfi_def_cfa_register 7
 5212 0006 7860     		str	r0, [r7, #4]
  91:../utils/monochromedisplaypainter.cpp **** 	return _autoUpdate;
 5213              		.loc 1 91 0
 5214 0008 7B68     		ldr	r3, [r7, #4]
 5215 000a 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
  92:../utils/monochromedisplaypainter.cpp **** }
 5216              		.loc 1 92 0
 5217 000c 1846     		mov	r0, r3
 5218 000e 07F10C07 		add	r7, r7, #12
 5219 0012 BD46     		mov	sp, r7
 5220 0014 80BC     		pop	{r7}
 5221 0016 7047     		bx	lr
 5222              		.cfi_endproc
 5223              	.LFE904:
 5225              		.section	.text._ZN24MonochromeDisplayPainter13setAutoUpdateEb,"ax",%progbits
 5226              		.align	2
 5227              		.global	_ZN24MonochromeDisplayPainter13setAutoUpdateEb
 5228              		.thumb
 5229              		.thumb_func
 5231              	_ZN24MonochromeDisplayPainter13setAutoUpdateEb:
 5232              	.LFB905:
  93:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::setAutoUpdate( bool autoUpdate )
  94:../utils/monochromedisplaypainter.cpp **** {
 5233              		.loc 1 94 0
 5234              		.cfi_startproc
 5235              		@ args = 0, pretend = 0, frame = 8
 5236              		@ frame_needed = 1, uses_anonymous_args = 0
 5237              		@ link register save eliminated.
 5238 0000 80B4     		push	{r7}
 5239              	.LCFI108:
 5240              		.cfi_def_cfa_offset 4
 5241 0002 83B0     		sub	sp, sp, #12
 5242              	.LCFI109:
 5243              		.cfi_def_cfa_offset 16
 5244 0004 00AF     		add	r7, sp, #0
 5245              		.cfi_offset 7, -4
 5246              	.LCFI110:
 5247              		.cfi_def_cfa_register 7
 5248 0006 7860     		str	r0, [r7, #4]
 5249 0008 0B46     		mov	r3, r1
 5250 000a FB70     		strb	r3, [r7, #3]
  95:../utils/monochromedisplaypainter.cpp **** 	_autoUpdate = autoUpdate;
 5251              		.loc 1 95 0
 5252 000c 7B68     		ldr	r3, [r7, #4]
 5253 000e FA78     		ldrb	r2, [r7, #3]
 5254 0010 5A74     		strb	r2, [r3, #17]
  96:../utils/monochromedisplaypainter.cpp **** }
 5255              		.loc 1 96 0
 5256 0012 07F10C07 		add	r7, r7, #12
 5257 0016 BD46     		mov	sp, r7
 5258 0018 80BC     		pop	{r7}
 5259 001a 7047     		bx	lr
 5260              		.cfi_endproc
 5261              	.LFE905:
 5263              		.section	.text._ZN24MonochromeDisplayPainter6updateEv,"ax",%progbits
 5264              		.align	2
 5265              		.global	_ZN24MonochromeDisplayPainter6updateEv
 5266              		.thumb
 5267              		.thumb_func
 5269              	_ZN24MonochromeDisplayPainter6updateEv:
 5270              	.LFB906:
  97:../utils/monochromedisplaypainter.cpp **** 
  98:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::update()
  99:../utils/monochromedisplaypainter.cpp **** {
 5271              		.loc 1 99 0
 5272              		.cfi_startproc
 5273              		@ args = 0, pretend = 0, frame = 16
 5274              		@ frame_needed = 1, uses_anonymous_args = 0
 5275 0000 80B5     		push	{r7, lr}
 5276              	.LCFI111:
 5277              		.cfi_def_cfa_offset 8
 5278 0002 84B0     		sub	sp, sp, #16
 5279              	.LCFI112:
 5280              		.cfi_def_cfa_offset 24
 5281 0004 00AF     		add	r7, sp, #0
 5282              		.cfi_offset 14, -4
 5283              		.cfi_offset 7, -8
 5284              	.LCFI113:
 5285              		.cfi_def_cfa_register 7
 5286 0006 7860     		str	r0, [r7, #4]
 100:../utils/monochromedisplaypainter.cpp **** 	_syncDisplay( 0 , _display->resolution().height );
 5287              		.loc 1 100 0
 5288 0008 7B68     		ldr	r3, [r7, #4]
 5289 000a 5B68     		ldr	r3, [r3, #4]
 5290 000c 1B68     		ldr	r3, [r3, #0]
 5291 000e 03F10803 		add	r3, r3, #8
 5292 0012 1B68     		ldr	r3, [r3, #0]
 5293 0014 7A68     		ldr	r2, [r7, #4]
 5294 0016 5268     		ldr	r2, [r2, #4]
 5295 0018 07F10801 		add	r1, r7, #8
 5296 001c 0846     		mov	r0, r1
 5297 001e 1146     		mov	r1, r2
 5298 0020 9847     		blx	r3
 5299 0022 FB68     		ldr	r3, [r7, #12]
 5300 0024 7868     		ldr	r0, [r7, #4]
 5301 0026 4FF00001 		mov	r1, #0
 5302 002a 1A46     		mov	r2, r3
 5303 002c FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter12_syncDisplayEii
 101:../utils/monochromedisplaypainter.cpp **** }
 5304              		.loc 1 101 0
 5305 0030 07F11007 		add	r7, r7, #16
 5306 0034 BD46     		mov	sp, r7
 5307 0036 80BD     		pop	{r7, pc}
 5308              		.cfi_endproc
 5309              	.LFE906:
 5311              		.section	.text._ZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelCo
 5312              		.align	2
 5313              		.global	_ZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 5314              		.thumb
 5315              		.thumb_func
 5317              	_ZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE:
 5318              	.LFB907:
 102:../utils/monochromedisplaypainter.cpp **** 
 103:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::drawPixel( const IMonochromeDisplay::Point & point ,
 104:../utils/monochromedisplaypainter.cpp **** 										  IMonochromeDisplay::PixelColor color )
 105:../utils/monochromedisplaypainter.cpp **** {
 5319              		.loc 1 105 0
 5320              		.cfi_startproc
 5321              		@ args = 0, pretend = 0, frame = 16
 5322              		@ frame_needed = 1, uses_anonymous_args = 0
 5323 0000 80B5     		push	{r7, lr}
 5324              	.LCFI114:
 5325              		.cfi_def_cfa_offset 8
 5326 0002 84B0     		sub	sp, sp, #16
 5327              	.LCFI115:
 5328              		.cfi_def_cfa_offset 24
 5329 0004 00AF     		add	r7, sp, #0
 5330              		.cfi_offset 14, -4
 5331              		.cfi_offset 7, -8
 5332              	.LCFI116:
 5333              		.cfi_def_cfa_register 7
 5334 0006 F860     		str	r0, [r7, #12]
 5335 0008 B960     		str	r1, [r7, #8]
 5336 000a 1346     		mov	r3, r2
 5337 000c FB71     		strb	r3, [r7, #7]
 5338              	.LBB17:
 106:../utils/monochromedisplaypainter.cpp **** 	assert( _display );
 5339              		.loc 1 106 0
 5340 000e FB68     		ldr	r3, [r7, #12]
 5341 0010 5B68     		ldr	r3, [r3, #4]
 5342 0012 002B     		cmp	r3, #0
 5343 0014 0FD1     		bne	.L64
 5344              		.loc 1 106 0 is_stmt 0 discriminator 1
 5345 0016 40F20000 		movw	r0, #:lower16:.LC0
 5346 001a C0F20000 		movt	r0, #:upper16:.LC0
 5347 001e 4FF06A01 		mov	r1, #106
 5348 0022 40F20002 		movw	r2, #:lower16:_ZZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10Pi
 5349 0026 C0F20002 		movt	r2, #:upper16:_ZZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10Pi
 5350 002a 40F20003 		movw	r3, #:lower16:.LC1
 5351 002e C0F20003 		movt	r3, #:upper16:.LC1
 5352 0032 FFF7FEFF 		bl	__assert_func
 5353              	.L64:
 107:../utils/monochromedisplaypainter.cpp **** 	if ( _display )
 5354              		.loc 1 107 0 is_stmt 1
 5355 0036 FB68     		ldr	r3, [r7, #12]
 5356 0038 5B68     		ldr	r3, [r3, #4]
 5357 003a 002B     		cmp	r3, #0
 5358 003c 32D0     		beq	.L63
 108:../utils/monochromedisplaypainter.cpp **** 	{
 109:../utils/monochromedisplaypainter.cpp **** 		// Try first buffer copy method if auto update is disabled.
 110:../utils/monochromedisplaypainter.cpp **** 		if ( !_autoUpdate && _accelMethods.memoryCopyAccelerated )
 5359              		.loc 1 110 0
 5360 003e FB68     		ldr	r3, [r7, #12]
 5361 0040 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 5362 0042 83F00103 		eor	r3, r3, #1
 5363 0046 DBB2     		uxtb	r3, r3
 5364 0048 002B     		cmp	r3, #0
 5365 004a 13D0     		beq	.L66
 5366              		.loc 1 110 0 is_stmt 0 discriminator 1
 5367 004c FB68     		ldr	r3, [r7, #12]
 5368 004e 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5369 0050 03F00203 		and	r3, r3, #2
 5370 0054 DBB2     		uxtb	r3, r3
 5371 0056 002B     		cmp	r3, #0
 5372 0058 0CD0     		beq	.L66
 111:../utils/monochromedisplaypainter.cpp **** 		{
 112:../utils/monochromedisplaypainter.cpp **** 			_createOffsetBitmap( true );
 5373              		.loc 1 112 0 is_stmt 1
 5374 005a F868     		ldr	r0, [r7, #12]
 5375 005c 4FF00101 		mov	r1, #1
 5376 0060 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 113:../utils/monochromedisplaypainter.cpp **** 			_setPixel( point , color );
 5377              		.loc 1 113 0
 5378 0064 97F90730 		ldrsb	r3, [r7, #7]
 5379 0068 F868     		ldr	r0, [r7, #12]
 5380 006a B968     		ldr	r1, [r7, #8]
 5381 006c 1A46     		mov	r2, r3
 5382 006e FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 5383 0072 17E0     		b	.L63
 5384              	.L66:
 114:../utils/monochromedisplaypainter.cpp **** 		}
 115:../utils/monochromedisplaypainter.cpp **** 
 116:../utils/monochromedisplaypainter.cpp **** 		// Set the pixel directly on the display screen.
 117:../utils/monochromedisplaypainter.cpp **** 		else
 118:../utils/monochromedisplaypainter.cpp **** 		{
 119:../utils/monochromedisplaypainter.cpp **** 			_display->setPixel( point , color );
 5385              		.loc 1 119 0
 5386 0074 FB68     		ldr	r3, [r7, #12]
 5387 0076 5B68     		ldr	r3, [r3, #4]
 5388 0078 1B68     		ldr	r3, [r3, #0]
 5389 007a 03F12003 		add	r3, r3, #32
 5390 007e 1B68     		ldr	r3, [r3, #0]
 5391 0080 FA68     		ldr	r2, [r7, #12]
 5392 0082 5168     		ldr	r1, [r2, #4]
 5393 0084 97F90720 		ldrsb	r2, [r7, #7]
 5394 0088 0846     		mov	r0, r1
 5395 008a B968     		ldr	r1, [r7, #8]
 5396 008c 9847     		blx	r3
 120:../utils/monochromedisplaypainter.cpp **** 
 121:../utils/monochromedisplaypainter.cpp **** 			// Draw it to the off-screen buffer too if needed to be in sync with the two.
 122:../utils/monochromedisplaypainter.cpp **** 			if ( _offscreenBitmap ) _setPixel( point , color );
 5397              		.loc 1 122 0
 5398 008e FB68     		ldr	r3, [r7, #12]
 5399 0090 DB68     		ldr	r3, [r3, #12]
 5400 0092 002B     		cmp	r3, #0
 5401 0094 06D0     		beq	.L63
 5402              		.loc 1 122 0 is_stmt 0 discriminator 1
 5403 0096 97F90730 		ldrsb	r3, [r7, #7]
 5404 009a F868     		ldr	r0, [r7, #12]
 5405 009c B968     		ldr	r1, [r7, #8]
 5406 009e 1A46     		mov	r2, r3
 5407 00a0 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 5408              	.L63:
 5409              	.LBE17:
 123:../utils/monochromedisplaypainter.cpp **** 		}
 124:../utils/monochromedisplaypainter.cpp **** 	}
 125:../utils/monochromedisplaypainter.cpp **** }
 5410              		.loc 1 125 0 is_stmt 1
 5411 00a4 07F11007 		add	r7, r7, #16
 5412 00a8 BD46     		mov	sp, r7
 5413 00aa 80BD     		pop	{r7, pc}
 5414              		.cfi_endproc
 5415              	.LFE907:
 5417              		.section	.text._ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10Pixel
 5418              		.align	2
 5419              		.global	_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE
 5420              		.thumb
 5421              		.thumb_func
 5423              	_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE:
 5424              	.LFB908:
 126:../utils/monochromedisplaypainter.cpp **** 
 127:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::drawLine( const IMonochromeDisplay::Point & begin ,
 128:../utils/monochromedisplaypainter.cpp **** 										 const IMonochromeDisplay::Point & end ,
 129:../utils/monochromedisplaypainter.cpp **** 										 IMonochromeDisplay::PixelColor color )
 130:../utils/monochromedisplaypainter.cpp **** {
 5425              		.loc 1 130 0
 5426              		.cfi_startproc
 5427              		@ args = 0, pretend = 0, frame = 48
 5428              		@ frame_needed = 1, uses_anonymous_args = 0
 5429 0000 90B5     		push	{r4, r7, lr}
 5430              	.LCFI117:
 5431              		.cfi_def_cfa_offset 12
 5432 0002 8DB0     		sub	sp, sp, #52
 5433              	.LCFI118:
 5434              		.cfi_def_cfa_offset 64
 5435 0004 00AF     		add	r7, sp, #0
 5436              		.cfi_offset 14, -4
 5437              		.cfi_offset 7, -8
 5438              		.cfi_offset 4, -12
 5439              	.LCFI119:
 5440              		.cfi_def_cfa_register 7
 5441 0006 F860     		str	r0, [r7, #12]
 5442 0008 B960     		str	r1, [r7, #8]
 5443 000a 7A60     		str	r2, [r7, #4]
 5444 000c FB70     		strb	r3, [r7, #3]
 5445              	.LBB18:
 131:../utils/monochromedisplaypainter.cpp **** 	assert( _display );
 5446              		.loc 1 131 0
 5447 000e FB68     		ldr	r3, [r7, #12]
 5448 0010 5B68     		ldr	r3, [r3, #4]
 5449 0012 002B     		cmp	r3, #0
 5450 0014 0FD1     		bne	.L69
 5451              		.loc 1 131 0 is_stmt 0 discriminator 1
 5452 0016 40F20000 		movw	r0, #:lower16:.LC0
 5453 001a C0F20000 		movt	r0, #:upper16:.LC0
 5454 001e 4FF08301 		mov	r1, #131
 5455 0022 40F20002 		movw	r2, #:lower16:_ZZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10
 5456 0026 C0F20002 		movt	r2, #:upper16:_ZZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10
 5457 002a 40F20003 		movw	r3, #:lower16:.LC1
 5458 002e C0F20003 		movt	r3, #:upper16:.LC1
 5459 0032 FFF7FEFF 		bl	__assert_func
 5460              	.L69:
 5461              	.LBB19:
 132:../utils/monochromedisplaypainter.cpp **** 	if ( _display )
 5462              		.loc 1 132 0 is_stmt 1
 5463 0036 FB68     		ldr	r3, [r7, #12]
 5464 0038 5B68     		ldr	r3, [r3, #4]
 5465 003a 002B     		cmp	r3, #0
 5466 003c 00F0F580 		beq	.L68
 5467              	.LBB20:
 5468              	.LBB21:
 133:../utils/monochromedisplaypainter.cpp **** 	{
 134:../utils/monochromedisplaypainter.cpp **** 		// Try first the accelerated method.
 135:../utils/monochromedisplaypainter.cpp **** 		if ( _accelMethods.drawLineAccelerated && !_offscreenBitmap )
 5469              		.loc 1 135 0
 5470 0040 FB68     		ldr	r3, [r7, #12]
 5471 0042 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5472 0044 03F00403 		and	r3, r3, #4
 5473 0048 DBB2     		uxtb	r3, r3
 5474 004a 002B     		cmp	r3, #0
 5475 004c 12D0     		beq	.L71
 5476              		.loc 1 135 0 is_stmt 0 discriminator 1
 5477 004e FB68     		ldr	r3, [r7, #12]
 5478 0050 DB68     		ldr	r3, [r3, #12]
 5479 0052 002B     		cmp	r3, #0
 5480 0054 0ED1     		bne	.L71
 136:../utils/monochromedisplaypainter.cpp **** 		{
 137:../utils/monochromedisplaypainter.cpp **** 			_display->drawLine( begin , end , color );
 5481              		.loc 1 137 0 is_stmt 1
 5482 0056 FB68     		ldr	r3, [r7, #12]
 5483 0058 5B68     		ldr	r3, [r3, #4]
 5484 005a 1B68     		ldr	r3, [r3, #0]
 5485 005c 03F13003 		add	r3, r3, #48
 5486 0060 1C68     		ldr	r4, [r3, #0]
 5487 0062 FB68     		ldr	r3, [r7, #12]
 5488 0064 5A68     		ldr	r2, [r3, #4]
 5489 0066 97F90330 		ldrsb	r3, [r7, #3]
 5490 006a 1046     		mov	r0, r2
 5491 006c B968     		ldr	r1, [r7, #8]
 5492 006e 7A68     		ldr	r2, [r7, #4]
 5493 0070 A047     		blx	r4
 5494 0072 DAE0     		b	.L68
 5495              	.L71:
 5496              	.LBB22:
 138:../utils/monochromedisplaypainter.cpp **** 		}
 139:../utils/monochromedisplaypainter.cpp **** 
 140:../utils/monochromedisplaypainter.cpp **** 		// Fall back to either memory copy or direct pixel rendering method.
 141:../utils/monochromedisplaypainter.cpp **** 		else
 142:../utils/monochromedisplaypainter.cpp **** 		{
 143:../utils/monochromedisplaypainter.cpp **** 			// If memory copy acceleration is supported, ensure that the local buffer is ready.
 144:../utils/monochromedisplaypainter.cpp **** 			if ( _accelMethods.memoryCopyAccelerated )
 5497              		.loc 1 144 0
 5498 0074 FB68     		ldr	r3, [r7, #12]
 5499 0076 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5500 0078 03F00203 		and	r3, r3, #2
 5501 007c DBB2     		uxtb	r3, r3
 5502 007e 002B     		cmp	r3, #0
 5503 0080 04D0     		beq	.L73
 145:../utils/monochromedisplaypainter.cpp **** 				_createOffsetBitmap( true );
 5504              		.loc 1 145 0
 5505 0082 F868     		ldr	r0, [r7, #12]
 5506 0084 4FF00101 		mov	r1, #1
 5507 0088 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 5508              	.L73:
 146:../utils/monochromedisplaypainter.cpp **** 
 147:../utils/monochromedisplaypainter.cpp **** 			// Values used for line calculations.
 148:../utils/monochromedisplaypainter.cpp **** 			int dx , dy , ix , iy  , err , i;
 149:../utils/monochromedisplaypainter.cpp **** 			IMonochromeDisplay::Point p = begin;
 5509              		.loc 1 149 0
 5510 008c BA68     		ldr	r2, [r7, #8]
 5511 008e 07F11003 		add	r3, r7, #16
 5512 0092 92E80300 		ldmia	r2, {r0, r1}
 5513 0096 83E80300 		stmia	r3, {r0, r1}
 150:../utils/monochromedisplaypainter.cpp **** 
 151:../utils/monochromedisplaypainter.cpp **** 			// Calculate deltas.
 152:../utils/monochromedisplaypainter.cpp **** 			dx = end.x - begin.x;
 5514              		.loc 1 152 0
 5515 009a 7B68     		ldr	r3, [r7, #4]
 5516 009c 1A68     		ldr	r2, [r3, #0]
 5517 009e BB68     		ldr	r3, [r7, #8]
 5518 00a0 1B68     		ldr	r3, [r3, #0]
 5519 00a2 D31A     		subs	r3, r2, r3
 5520 00a4 FB62     		str	r3, [r7, #44]
 153:../utils/monochromedisplaypainter.cpp **** 			dy = end.y - begin.y;
 5521              		.loc 1 153 0
 5522 00a6 7B68     		ldr	r3, [r7, #4]
 5523 00a8 5A68     		ldr	r2, [r3, #4]
 5524 00aa BB68     		ldr	r3, [r7, #8]
 5525 00ac 5B68     		ldr	r3, [r3, #4]
 5526 00ae D31A     		subs	r3, r2, r3
 5527 00b0 BB62     		str	r3, [r7, #40]
 154:../utils/monochromedisplaypainter.cpp **** 
 155:../utils/monochromedisplaypainter.cpp **** 			// Detect direction.
 156:../utils/monochromedisplaypainter.cpp **** 			if ( dx >= 0 ) ix = 1;
 5528              		.loc 1 156 0
 5529 00b2 FB6A     		ldr	r3, [r7, #44]
 5530 00b4 002B     		cmp	r3, #0
 5531 00b6 03DB     		blt	.L74
 5532              		.loc 1 156 0 is_stmt 0 discriminator 1
 5533 00b8 4FF00103 		mov	r3, #1
 5534 00bc 7B62     		str	r3, [r7, #36]
 5535 00be 07E0     		b	.L75
 5536              	.L74:
 157:../utils/monochromedisplaypainter.cpp **** 			else
 158:../utils/monochromedisplaypainter.cpp **** 			{
 159:../utils/monochromedisplaypainter.cpp **** 				ix = -1;
 5537              		.loc 1 159 0 is_stmt 1
 5538 00c0 4FF0FF33 		mov	r3, #-1
 5539 00c4 7B62     		str	r3, [r7, #36]
 160:../utils/monochromedisplaypainter.cpp **** 				dx = abs( dx );
 5540              		.loc 1 160 0
 5541 00c6 FB6A     		ldr	r3, [r7, #44]
 5542 00c8 002B     		cmp	r3, #0
 5543 00ca B8BF     		it	lt
 5544 00cc 5B42     		rsblt	r3, r3, #0
 5545 00ce FB62     		str	r3, [r7, #44]
 5546              	.L75:
 161:../utils/monochromedisplaypainter.cpp **** 			}
 162:../utils/monochromedisplaypainter.cpp **** 
 163:../utils/monochromedisplaypainter.cpp **** 			if ( dy >= 0 ) iy = 1;
 5547              		.loc 1 163 0
 5548 00d0 BB6A     		ldr	r3, [r7, #40]
 5549 00d2 002B     		cmp	r3, #0
 5550 00d4 03DB     		blt	.L76
 5551              		.loc 1 163 0 is_stmt 0 discriminator 1
 5552 00d6 4FF00103 		mov	r3, #1
 5553 00da 3B62     		str	r3, [r7, #32]
 5554 00dc 07E0     		b	.L77
 5555              	.L76:
 164:../utils/monochromedisplaypainter.cpp **** 			else
 165:../utils/monochromedisplaypainter.cpp **** 			{
 166:../utils/monochromedisplaypainter.cpp **** 				iy = -1;
 5556              		.loc 1 166 0 is_stmt 1
 5557 00de 4FF0FF33 		mov	r3, #-1
 5558 00e2 3B62     		str	r3, [r7, #32]
 167:../utils/monochromedisplaypainter.cpp **** 				dy = abs( dy );
 5559              		.loc 1 167 0
 5560 00e4 BB6A     		ldr	r3, [r7, #40]
 5561 00e6 002B     		cmp	r3, #0
 5562 00e8 B8BF     		it	lt
 5563 00ea 5B42     		rsblt	r3, r3, #0
 5564 00ec BB62     		str	r3, [r7, #40]
 5565              	.L77:
 168:../utils/monochromedisplaypainter.cpp **** 			}
 169:../utils/monochromedisplaypainter.cpp **** 
 170:../utils/monochromedisplaypainter.cpp **** 			// Draw line for the case that the X axis delta dominates.
 171:../utils/monochromedisplaypainter.cpp **** 			if ( dx > dy )
 5566              		.loc 1 171 0
 5567 00ee FA6A     		ldr	r2, [r7, #44]
 5568 00f0 BB6A     		ldr	r3, [r7, #40]
 5569 00f2 9A42     		cmp	r2, r3
 5570 00f4 3BDD     		ble	.L78
 172:../utils/monochromedisplaypainter.cpp **** 			{
 173:../utils/monochromedisplaypainter.cpp **** 				err = 2 * dy - dx;
 5571              		.loc 1 173 0
 5572 00f6 BB6A     		ldr	r3, [r7, #40]
 5573 00f8 4FEA4302 		lsl	r2, r3, #1
 5574 00fc FB6A     		ldr	r3, [r7, #44]
 5575 00fe D31A     		subs	r3, r2, r3
 5576 0100 FB61     		str	r3, [r7, #28]
 174:../utils/monochromedisplaypainter.cpp **** 
 175:../utils/monochromedisplaypainter.cpp **** 				for ( i = 0 ; i <= dx ; i++ )
 5577              		.loc 1 175 0
 5578 0102 4FF00003 		mov	r3, #0
 5579 0106 BB61     		str	r3, [r7, #24]
 5580 0108 27E0     		b	.L79
 5581              	.L81:
 176:../utils/monochromedisplaypainter.cpp **** 				{
 177:../utils/monochromedisplaypainter.cpp **** 					_setPixel( p , color );
 5582              		.loc 1 177 0
 5583 010a 07F11002 		add	r2, r7, #16
 5584 010e 97F90330 		ldrsb	r3, [r7, #3]
 5585 0112 F868     		ldr	r0, [r7, #12]
 5586 0114 1146     		mov	r1, r2
 5587 0116 1A46     		mov	r2, r3
 5588 0118 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 178:../utils/monochromedisplaypainter.cpp **** 					if ( err >= 0 )
 5589              		.loc 1 178 0
 5590 011c FB69     		ldr	r3, [r7, #28]
 5591 011e 002B     		cmp	r3, #0
 5592 0120 0DDB     		blt	.L80
 179:../utils/monochromedisplaypainter.cpp **** 					{
 180:../utils/monochromedisplaypainter.cpp **** 						err -= 2 * dx;
 5593              		.loc 1 180 0
 5594 0122 FA6A     		ldr	r2, [r7, #44]
 5595 0124 1346     		mov	r3, r2
 5596 0126 4FEAC373 		lsl	r3, r3, #31
 5597 012a 9B1A     		subs	r3, r3, r2
 5598 012c 4FEA4303 		lsl	r3, r3, #1
 5599 0130 FA69     		ldr	r2, [r7, #28]
 5600 0132 D318     		adds	r3, r2, r3
 5601 0134 FB61     		str	r3, [r7, #28]
 181:../utils/monochromedisplaypainter.cpp **** 						p.y += iy;
 5602              		.loc 1 181 0
 5603 0136 7A69     		ldr	r2, [r7, #20]
 5604 0138 3B6A     		ldr	r3, [r7, #32]
 5605 013a D318     		adds	r3, r2, r3
 5606 013c 7B61     		str	r3, [r7, #20]
 5607              	.L80:
 182:../utils/monochromedisplaypainter.cpp **** 					}
 183:../utils/monochromedisplaypainter.cpp **** 					err += 2 * dy;
 5608              		.loc 1 183 0
 5609 013e BB6A     		ldr	r3, [r7, #40]
 5610 0140 4FEA4303 		lsl	r3, r3, #1
 5611 0144 FA69     		ldr	r2, [r7, #28]
 5612 0146 D318     		adds	r3, r2, r3
 5613 0148 FB61     		str	r3, [r7, #28]
 184:../utils/monochromedisplaypainter.cpp **** 					p.x += ix;
 5614              		.loc 1 184 0
 5615 014a 3A69     		ldr	r2, [r7, #16]
 5616 014c 7B6A     		ldr	r3, [r7, #36]
 5617 014e D318     		adds	r3, r2, r3
 5618 0150 3B61     		str	r3, [r7, #16]
 175:../utils/monochromedisplaypainter.cpp **** 				for ( i = 0 ; i <= dx ; i++ )
 5619              		.loc 1 175 0
 5620 0152 BB69     		ldr	r3, [r7, #24]
 5621 0154 03F10103 		add	r3, r3, #1
 5622 0158 BB61     		str	r3, [r7, #24]
 5623              	.L79:
 175:../utils/monochromedisplaypainter.cpp **** 				for ( i = 0 ; i <= dx ; i++ )
 5624              		.loc 1 175 0 is_stmt 0 discriminator 1
 5625 015a BA69     		ldr	r2, [r7, #24]
 5626 015c FB6A     		ldr	r3, [r7, #44]
 5627 015e 9A42     		cmp	r2, r3
 5628 0160 CCBF     		ite	gt
 5629 0162 0023     		movgt	r3, #0
 5630 0164 0123     		movle	r3, #1
 5631 0166 DBB2     		uxtb	r3, r3
 5632 0168 002B     		cmp	r3, #0
 5633 016a CED1     		bne	.L81
 175:../utils/monochromedisplaypainter.cpp **** 				for ( i = 0 ; i <= dx ; i++ )
 5634              		.loc 1 175 0
 5635 016c 3AE0     		b	.L82
 5636              	.L78:
 185:../utils/monochromedisplaypainter.cpp **** 				}
 186:../utils/monochromedisplaypainter.cpp **** 			}
 187:../utils/monochromedisplaypainter.cpp **** 
 188:../utils/monochromedisplaypainter.cpp **** 			// Draw line for the case that the Y axis delta dominates.
 189:../utils/monochromedisplaypainter.cpp **** 			else
 190:../utils/monochromedisplaypainter.cpp **** 			{
 191:../utils/monochromedisplaypainter.cpp **** 				err = 2 * dx - dy;
 5637              		.loc 1 191 0 is_stmt 1
 5638 016e FB6A     		ldr	r3, [r7, #44]
 5639 0170 4FEA4302 		lsl	r2, r3, #1
 5640 0174 BB6A     		ldr	r3, [r7, #40]
 5641 0176 D31A     		subs	r3, r2, r3
 5642 0178 FB61     		str	r3, [r7, #28]
 192:../utils/monochromedisplaypainter.cpp **** 
 193:../utils/monochromedisplaypainter.cpp **** 				for ( i = 0 ; i <= dy ; i++ )
 5643              		.loc 1 193 0
 5644 017a 4FF00003 		mov	r3, #0
 5645 017e BB61     		str	r3, [r7, #24]
 5646 0180 27E0     		b	.L83
 5647              	.L85:
 194:../utils/monochromedisplaypainter.cpp **** 				{
 195:../utils/monochromedisplaypainter.cpp **** 					_setPixel( p , color );
 5648              		.loc 1 195 0
 5649 0182 07F11002 		add	r2, r7, #16
 5650 0186 97F90330 		ldrsb	r3, [r7, #3]
 5651 018a F868     		ldr	r0, [r7, #12]
 5652 018c 1146     		mov	r1, r2
 5653 018e 1A46     		mov	r2, r3
 5654 0190 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 196:../utils/monochromedisplaypainter.cpp **** 					if (err >= 0)
 5655              		.loc 1 196 0
 5656 0194 FB69     		ldr	r3, [r7, #28]
 5657 0196 002B     		cmp	r3, #0
 5658 0198 0DDB     		blt	.L84
 197:../utils/monochromedisplaypainter.cpp **** 					{
 198:../utils/monochromedisplaypainter.cpp **** 						err -= 2 * dy;
 5659              		.loc 1 198 0
 5660 019a BA6A     		ldr	r2, [r7, #40]
 5661 019c 1346     		mov	r3, r2
 5662 019e 4FEAC373 		lsl	r3, r3, #31
 5663 01a2 9B1A     		subs	r3, r3, r2
 5664 01a4 4FEA4303 		lsl	r3, r3, #1
 5665 01a8 FA69     		ldr	r2, [r7, #28]
 5666 01aa D318     		adds	r3, r2, r3
 5667 01ac FB61     		str	r3, [r7, #28]
 199:../utils/monochromedisplaypainter.cpp **** 						p.x += ix;
 5668              		.loc 1 199 0
 5669 01ae 3A69     		ldr	r2, [r7, #16]
 5670 01b0 7B6A     		ldr	r3, [r7, #36]
 5671 01b2 D318     		adds	r3, r2, r3
 5672 01b4 3B61     		str	r3, [r7, #16]
 5673              	.L84:
 200:../utils/monochromedisplaypainter.cpp **** 					}
 201:../utils/monochromedisplaypainter.cpp **** 					err += 2 * dx;
 5674              		.loc 1 201 0
 5675 01b6 FB6A     		ldr	r3, [r7, #44]
 5676 01b8 4FEA4303 		lsl	r3, r3, #1
 5677 01bc FA69     		ldr	r2, [r7, #28]
 5678 01be D318     		adds	r3, r2, r3
 5679 01c0 FB61     		str	r3, [r7, #28]
 202:../utils/monochromedisplaypainter.cpp **** 					p.y += iy;
 5680              		.loc 1 202 0
 5681 01c2 7A69     		ldr	r2, [r7, #20]
 5682 01c4 3B6A     		ldr	r3, [r7, #32]
 5683 01c6 D318     		adds	r3, r2, r3
 5684 01c8 7B61     		str	r3, [r7, #20]
 193:../utils/monochromedisplaypainter.cpp **** 				for ( i = 0 ; i <= dy ; i++ )
 5685              		.loc 1 193 0
 5686 01ca BB69     		ldr	r3, [r7, #24]
 5687 01cc 03F10103 		add	r3, r3, #1
 5688 01d0 BB61     		str	r3, [r7, #24]
 5689              	.L83:
 193:../utils/monochromedisplaypainter.cpp **** 				for ( i = 0 ; i <= dy ; i++ )
 5690              		.loc 1 193 0 is_stmt 0 discriminator 1
 5691 01d2 BA69     		ldr	r2, [r7, #24]
 5692 01d4 BB6A     		ldr	r3, [r7, #40]
 5693 01d6 9A42     		cmp	r2, r3
 5694 01d8 CCBF     		ite	gt
 5695 01da 0023     		movgt	r3, #0
 5696 01dc 0123     		movle	r3, #1
 5697 01de DBB2     		uxtb	r3, r3
 5698 01e0 002B     		cmp	r3, #0
 5699 01e2 CED1     		bne	.L85
 5700              	.L82:
 203:../utils/monochromedisplaypainter.cpp **** 				}
 204:../utils/monochromedisplaypainter.cpp **** 			}
 205:../utils/monochromedisplaypainter.cpp **** 
 206:../utils/monochromedisplaypainter.cpp **** 			// Sync affected lines with hardware screen.
 207:../utils/monochromedisplaypainter.cpp **** 			if ( _autoUpdate )
 5701              		.loc 1 207 0 is_stmt 1
 5702 01e4 FB68     		ldr	r3, [r7, #12]
 5703 01e6 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 5704 01e8 002B     		cmp	r3, #0
 5705 01ea 1ED0     		beq	.L68
 208:../utils/monochromedisplaypainter.cpp **** 				_syncDisplay( std::min( begin.y , end.y ) , std::max( begin.y , end.y ) + 1 );
 5706              		.loc 1 208 0
 5707 01ec BB68     		ldr	r3, [r7, #8]
 5708 01ee 03F10402 		add	r2, r3, #4
 5709 01f2 7B68     		ldr	r3, [r7, #4]
 5710 01f4 03F10403 		add	r3, r3, #4
 5711 01f8 1046     		mov	r0, r2
 5712 01fa 1946     		mov	r1, r3
 5713 01fc FFF7FEFF 		bl	_ZSt3minIiERKT_S2_S2_
 5714 0200 0346     		mov	r3, r0
 5715 0202 1C68     		ldr	r4, [r3, #0]
 5716 0204 BB68     		ldr	r3, [r7, #8]
 5717 0206 03F10402 		add	r2, r3, #4
 5718 020a 7B68     		ldr	r3, [r7, #4]
 5719 020c 03F10403 		add	r3, r3, #4
 5720 0210 1046     		mov	r0, r2
 5721 0212 1946     		mov	r1, r3
 5722 0214 FFF7FEFF 		bl	_ZSt3maxIiERKT_S2_S2_
 5723 0218 0346     		mov	r3, r0
 5724 021a 1B68     		ldr	r3, [r3, #0]
 5725 021c 03F10103 		add	r3, r3, #1
 5726 0220 F868     		ldr	r0, [r7, #12]
 5727 0222 2146     		mov	r1, r4
 5728 0224 1A46     		mov	r2, r3
 5729 0226 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter12_syncDisplayEii
 5730              	.L68:
 5731              	.LBE22:
 5732              	.LBE21:
 5733              	.LBE20:
 5734              	.LBE19:
 5735              	.LBE18:
 209:../utils/monochromedisplaypainter.cpp **** 		}
 210:../utils/monochromedisplaypainter.cpp **** 	}
 211:../utils/monochromedisplaypainter.cpp **** }
 5736              		.loc 1 211 0
 5737 022a 07F13407 		add	r7, r7, #52
 5738 022e BD46     		mov	sp, r7
 5739 0230 90BD     		pop	{r4, r7, pc}
 5740              		.cfi_endproc
 5741              	.LFE908:
 5743 0232 00BF     		.section	.text._ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4S
 5744              		.align	2
 5745              		.global	_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0
 5746              		.thumb
 5747              		.thumb_func
 5749              	_ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelC
 5750              	.LFB909:
 212:../utils/monochromedisplaypainter.cpp **** 
 213:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::drawRectangle( const IMonochromeDisplay::Point & topLeft ,
 214:../utils/monochromedisplaypainter.cpp **** 											  const IMonochromeDisplay::Size & size ,
 215:../utils/monochromedisplaypainter.cpp **** 											  IMonochromeDisplay::PixelColor stroke ,
 216:../utils/monochromedisplaypainter.cpp **** 											  IMonochromeDisplay::PixelColor fill )
 217:../utils/monochromedisplaypainter.cpp **** {
 5751              		.loc 1 217 0
 5752              		.cfi_startproc
 5753              		@ args = 4, pretend = 0, frame = 96
 5754              		@ frame_needed = 1, uses_anonymous_args = 0
 5755 0000 90B5     		push	{r4, r7, lr}
 5756              	.LCFI120:
 5757              		.cfi_def_cfa_offset 12
 5758 0002 99B0     		sub	sp, sp, #100
 5759              	.LCFI121:
 5760              		.cfi_def_cfa_offset 112
 5761 0004 00AF     		add	r7, sp, #0
 5762              		.cfi_offset 14, -4
 5763              		.cfi_offset 7, -8
 5764              		.cfi_offset 4, -12
 5765              	.LCFI122:
 5766              		.cfi_def_cfa_register 7
 5767 0006 F860     		str	r0, [r7, #12]
 5768 0008 B960     		str	r1, [r7, #8]
 5769 000a 7A60     		str	r2, [r7, #4]
 5770 000c FB70     		strb	r3, [r7, #3]
 5771              	.LBB23:
 218:../utils/monochromedisplaypainter.cpp **** 	assert( _display );
 5772              		.loc 1 218 0
 5773 000e FB68     		ldr	r3, [r7, #12]
 5774 0010 5B68     		ldr	r3, [r3, #4]
 5775 0012 002B     		cmp	r3, #0
 5776 0014 0FD1     		bne	.L87
 5777              		.loc 1 218 0 is_stmt 0 discriminator 1
 5778 0016 40F20000 		movw	r0, #:lower16:.LC0
 5779 001a C0F20000 		movt	r0, #:upper16:.LC0
 5780 001e 4FF0DA01 		mov	r1, #218
 5781 0022 40F20002 		movw	r2, #:lower16:_ZZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKN
 5782 0026 C0F20002 		movt	r2, #:upper16:_ZZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKN
 5783 002a 40F20003 		movw	r3, #:lower16:.LC1
 5784 002e C0F20003 		movt	r3, #:upper16:.LC1
 5785 0032 FFF7FEFF 		bl	__assert_func
 5786              	.L87:
 5787              	.LBB24:
 219:../utils/monochromedisplaypainter.cpp **** 	if ( _display )
 5788              		.loc 1 219 0 is_stmt 1
 5789 0036 FB68     		ldr	r3, [r7, #12]
 5790 0038 5B68     		ldr	r3, [r3, #4]
 5791 003a 002B     		cmp	r3, #0
 5792 003c 00F05B81 		beq	.L86
 5793              	.LBB25:
 5794              	.LBB26:
 220:../utils/monochromedisplaypainter.cpp **** 	{
 221:../utils/monochromedisplaypainter.cpp **** 		// Do we need to fill the rectangle?
 222:../utils/monochromedisplaypainter.cpp **** 		if ( fill != IMonochromeDisplay::Undefined )
 5795              		.loc 1 222 0
 5796 0040 97F97030 		ldrsb	r3, [r7, #112]
 5797 0044 002B     		cmp	r3, #0
 5798 0046 00F08680 		beq	.L89
 5799              	.LBB27:
 5800              	.LBB28:
 223:../utils/monochromedisplaypainter.cpp **** 		{
 224:../utils/monochromedisplaypainter.cpp **** 			// Try first the accelerated method.
 225:../utils/monochromedisplaypainter.cpp **** 			if ( _accelMethods.drawRectangeFillAccelerated && !_offscreenBitmap )
 5801              		.loc 1 225 0
 5802 004a FB68     		ldr	r3, [r7, #12]
 5803 004c 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5804 004e 03F01003 		and	r3, r3, #16
 5805 0052 DBB2     		uxtb	r3, r3
 5806 0054 002B     		cmp	r3, #0
 5807 0056 12D0     		beq	.L90
 5808              		.loc 1 225 0 is_stmt 0 discriminator 1
 5809 0058 FB68     		ldr	r3, [r7, #12]
 5810 005a DB68     		ldr	r3, [r3, #12]
 5811 005c 002B     		cmp	r3, #0
 5812 005e 0ED1     		bne	.L90
 226:../utils/monochromedisplaypainter.cpp **** 			{
 227:../utils/monochromedisplaypainter.cpp **** 				_display->fillRectangle( topLeft , size , fill );
 5813              		.loc 1 227 0 is_stmt 1
 5814 0060 FB68     		ldr	r3, [r7, #12]
 5815 0062 5B68     		ldr	r3, [r3, #4]
 5816 0064 1B68     		ldr	r3, [r3, #0]
 5817 0066 03F13803 		add	r3, r3, #56
 5818 006a 1C68     		ldr	r4, [r3, #0]
 5819 006c FB68     		ldr	r3, [r7, #12]
 5820 006e 5A68     		ldr	r2, [r3, #4]
 5821 0070 97F97030 		ldrsb	r3, [r7, #112]
 5822 0074 1046     		mov	r0, r2
 5823 0076 B968     		ldr	r1, [r7, #8]
 5824 0078 7A68     		ldr	r2, [r7, #4]
 5825 007a A047     		blx	r4
 5826 007c 6BE0     		b	.L89
 5827              	.L90:
 5828              	.LBB29:
 228:../utils/monochromedisplaypainter.cpp **** 			}
 229:../utils/monochromedisplaypainter.cpp **** 
 230:../utils/monochromedisplaypainter.cpp **** 			// Fall back to software rendered method by either buffer copy or direct pixel access.
 231:../utils/monochromedisplaypainter.cpp **** 			else
 232:../utils/monochromedisplaypainter.cpp **** 			{
 233:../utils/monochromedisplaypainter.cpp **** 				// If memory copy acceleration is supported, ensure that the local buffer is ready.
 234:../utils/monochromedisplaypainter.cpp **** 				if ( _accelMethods.memoryCopyAccelerated )
 5829              		.loc 1 234 0
 5830 007e FB68     		ldr	r3, [r7, #12]
 5831 0080 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5832 0082 03F00203 		and	r3, r3, #2
 5833 0086 DBB2     		uxtb	r3, r3
 5834 0088 002B     		cmp	r3, #0
 5835 008a 04D0     		beq	.L92
 235:../utils/monochromedisplaypainter.cpp **** 					_createOffsetBitmap( true );
 5836              		.loc 1 235 0
 5837 008c F868     		ldr	r0, [r7, #12]
 5838 008e 4FF00101 		mov	r1, #1
 5839 0092 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 5840              	.L92:
 236:../utils/monochromedisplaypainter.cpp **** 
 237:../utils/monochromedisplaypainter.cpp **** 				// Calculate fill surface.
 238:../utils/monochromedisplaypainter.cpp **** 				IMonochromeDisplay::Point start = topLeft;
 5841              		.loc 1 238 0
 5842 0096 BA68     		ldr	r2, [r7, #8]
 5843 0098 07F11803 		add	r3, r7, #24
 5844 009c 92E80300 		ldmia	r2, {r0, r1}
 5845 00a0 83E80300 		stmia	r3, {r0, r1}
 239:../utils/monochromedisplaypainter.cpp **** 				IMonochromeDisplay::Point end( topLeft.x + size.width - 1 , topLeft.y + size.height - 1 );
 5846              		.loc 1 239 0
 5847 00a4 BB68     		ldr	r3, [r7, #8]
 5848 00a6 1A68     		ldr	r2, [r3, #0]
 5849 00a8 7B68     		ldr	r3, [r7, #4]
 5850 00aa 1B68     		ldr	r3, [r3, #0]
 5851 00ac D318     		adds	r3, r2, r3
 5852 00ae 03F1FF32 		add	r2, r3, #-1
 5853 00b2 BB68     		ldr	r3, [r7, #8]
 5854 00b4 5968     		ldr	r1, [r3, #4]
 5855 00b6 7B68     		ldr	r3, [r7, #4]
 5856 00b8 5B68     		ldr	r3, [r3, #4]
 5857 00ba CB18     		adds	r3, r1, r3
 5858 00bc 03F1FF33 		add	r3, r3, #-1
 5859 00c0 07F11001 		add	r1, r7, #16
 5860 00c4 0846     		mov	r0, r1
 5861 00c6 1146     		mov	r1, r2
 5862 00c8 1A46     		mov	r2, r3
 5863 00ca FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 240:../utils/monochromedisplaypainter.cpp **** 
 241:../utils/monochromedisplaypainter.cpp **** 				// If there is a stroke, we can fill less points.
 242:../utils/monochromedisplaypainter.cpp **** 				if ( stroke != IMonochromeDisplay::Undefined )
 5864              		.loc 1 242 0
 5865 00ce 97F90330 		ldrsb	r3, [r7, #3]
 5866 00d2 002B     		cmp	r3, #0
 5867 00d4 0FD0     		beq	.L93
 243:../utils/monochromedisplaypainter.cpp **** 				{
 244:../utils/monochromedisplaypainter.cpp **** 					start.x++;
 5868              		.loc 1 244 0
 5869 00d6 BB69     		ldr	r3, [r7, #24]
 5870 00d8 03F10103 		add	r3, r3, #1
 5871 00dc BB61     		str	r3, [r7, #24]
 245:../utils/monochromedisplaypainter.cpp **** 					start.y++;
 5872              		.loc 1 245 0
 5873 00de FB69     		ldr	r3, [r7, #28]
 5874 00e0 03F10103 		add	r3, r3, #1
 5875 00e4 FB61     		str	r3, [r7, #28]
 246:../utils/monochromedisplaypainter.cpp **** 					end.x--;
 5876              		.loc 1 246 0
 5877 00e6 3B69     		ldr	r3, [r7, #16]
 5878 00e8 03F1FF33 		add	r3, r3, #-1
 5879 00ec 3B61     		str	r3, [r7, #16]
 247:../utils/monochromedisplaypainter.cpp **** 					end.y--;
 5880              		.loc 1 247 0
 5881 00ee 7B69     		ldr	r3, [r7, #20]
 5882 00f0 03F1FF33 		add	r3, r3, #-1
 5883 00f4 7B61     		str	r3, [r7, #20]
 5884              	.L93:
 5885              	.LBB30:
 248:../utils/monochromedisplaypainter.cpp **** 				}
 249:../utils/monochromedisplaypainter.cpp **** 
 250:../utils/monochromedisplaypainter.cpp **** 				// Fill the rectangle.
 251:../utils/monochromedisplaypainter.cpp **** 				for ( int x =start.x ; x <= end.x ; ++x )
 5886              		.loc 1 251 0
 5887 00f6 BB69     		ldr	r3, [r7, #24]
 5888 00f8 FB65     		str	r3, [r7, #92]
 5889 00fa 23E0     		b	.L94
 5890              	.L97:
 5891              	.LBB31:
 5892              	.LBB32:
 252:../utils/monochromedisplaypainter.cpp **** 					for ( int y = start.y ; y <= end.y ; ++y )
 5893              		.loc 1 252 0
 5894 00fc FB69     		ldr	r3, [r7, #28]
 5895 00fe BB65     		str	r3, [r7, #88]
 5896 0100 13E0     		b	.L95
 5897              	.L96:
 253:../utils/monochromedisplaypainter.cpp **** 						_setPixel( IMonochromeDisplay::Point( x , y ) , fill );
 5898              		.loc 1 253 0 discriminator 2
 5899 0102 07F12003 		add	r3, r7, #32
 5900 0106 1846     		mov	r0, r3
 5901 0108 F96D     		ldr	r1, [r7, #92]
 5902 010a BA6D     		ldr	r2, [r7, #88]
 5903 010c FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 5904 0110 07F12002 		add	r2, r7, #32
 5905 0114 97F97030 		ldrsb	r3, [r7, #112]
 5906 0118 F868     		ldr	r0, [r7, #12]
 5907 011a 1146     		mov	r1, r2
 5908 011c 1A46     		mov	r2, r3
 5909 011e FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 252:../utils/monochromedisplaypainter.cpp **** 					for ( int y = start.y ; y <= end.y ; ++y )
 5910              		.loc 1 252 0 discriminator 2
 5911 0122 BB6D     		ldr	r3, [r7, #88]
 5912 0124 03F10103 		add	r3, r3, #1
 5913 0128 BB65     		str	r3, [r7, #88]
 5914              	.L95:
 252:../utils/monochromedisplaypainter.cpp **** 					for ( int y = start.y ; y <= end.y ; ++y )
 5915              		.loc 1 252 0 is_stmt 0 discriminator 1
 5916 012a 7A69     		ldr	r2, [r7, #20]
 5917 012c BB6D     		ldr	r3, [r7, #88]
 5918 012e 9A42     		cmp	r2, r3
 5919 0130 B4BF     		ite	lt
 5920 0132 0023     		movlt	r3, #0
 5921 0134 0123     		movge	r3, #1
 5922 0136 DBB2     		uxtb	r3, r3
 5923 0138 002B     		cmp	r3, #0
 5924 013a E2D1     		bne	.L96
 5925              	.LBE32:
 5926              	.LBE31:
 251:../utils/monochromedisplaypainter.cpp **** 				for ( int x =start.x ; x <= end.x ; ++x )
 5927              		.loc 1 251 0 is_stmt 1
 5928 013c FB6D     		ldr	r3, [r7, #92]
 5929 013e 03F10103 		add	r3, r3, #1
 5930 0142 FB65     		str	r3, [r7, #92]
 5931              	.L94:
 251:../utils/monochromedisplaypainter.cpp **** 				for ( int x =start.x ; x <= end.x ; ++x )
 5932              		.loc 1 251 0 is_stmt 0 discriminator 1
 5933 0144 3A69     		ldr	r2, [r7, #16]
 5934 0146 FB6D     		ldr	r3, [r7, #92]
 5935 0148 9A42     		cmp	r2, r3
 5936 014a B4BF     		ite	lt
 5937 014c 0023     		movlt	r3, #0
 5938 014e 0123     		movge	r3, #1
 5939 0150 DBB2     		uxtb	r3, r3
 5940 0152 002B     		cmp	r3, #0
 5941 0154 D2D1     		bne	.L97
 5942              	.L89:
 5943              	.LBE30:
 5944              	.LBE29:
 5945              	.LBE28:
 5946              	.LBE27:
 5947              	.LBE26:
 254:../utils/monochromedisplaypainter.cpp **** 			}
 255:../utils/monochromedisplaypainter.cpp **** 		}
 256:../utils/monochromedisplaypainter.cpp **** 
 257:../utils/monochromedisplaypainter.cpp **** 		// Draw border if needed.
 258:../utils/monochromedisplaypainter.cpp **** 		if ( stroke != IMonochromeDisplay::Undefined )
 5948              		.loc 1 258 0 is_stmt 1
 5949 0156 97F90330 		ldrsb	r3, [r7, #3]
 5950 015a 002B     		cmp	r3, #0
 5951 015c 00F0B780 		beq	.L98
 259:../utils/monochromedisplaypainter.cpp **** 		{
 260:../utils/monochromedisplaypainter.cpp **** 			// Try first the accelerated method.
 261:../utils/monochromedisplaypainter.cpp **** 			if ( _accelMethods.drawRectangleStrokeAccelerated && !_offscreenBitmap )
 5952              		.loc 1 261 0
 5953 0160 FB68     		ldr	r3, [r7, #12]
 5954 0162 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5955 0164 03F00803 		and	r3, r3, #8
 5956 0168 DBB2     		uxtb	r3, r3
 5957 016a 002B     		cmp	r3, #0
 5958 016c 12D0     		beq	.L99
 5959              		.loc 1 261 0 is_stmt 0 discriminator 1
 5960 016e FB68     		ldr	r3, [r7, #12]
 5961 0170 DB68     		ldr	r3, [r3, #12]
 5962 0172 002B     		cmp	r3, #0
 5963 0174 0ED1     		bne	.L99
 262:../utils/monochromedisplaypainter.cpp **** 			{
 263:../utils/monochromedisplaypainter.cpp **** 				_display->drawRectangle( topLeft , size , stroke );
 5964              		.loc 1 263 0 is_stmt 1
 5965 0176 FB68     		ldr	r3, [r7, #12]
 5966 0178 5B68     		ldr	r3, [r3, #4]
 5967 017a 1B68     		ldr	r3, [r3, #0]
 5968 017c 03F13403 		add	r3, r3, #52
 5969 0180 1C68     		ldr	r4, [r3, #0]
 5970 0182 FB68     		ldr	r3, [r7, #12]
 5971 0184 5A68     		ldr	r2, [r3, #4]
 5972 0186 97F90330 		ldrsb	r3, [r7, #3]
 5973 018a 1046     		mov	r0, r2
 5974 018c B968     		ldr	r1, [r7, #8]
 5975 018e 7A68     		ldr	r2, [r7, #4]
 5976 0190 A047     		blx	r4
 5977 0192 9CE0     		b	.L98
 5978              	.L99:
 264:../utils/monochromedisplaypainter.cpp **** 			}
 265:../utils/monochromedisplaypainter.cpp **** 
 266:../utils/monochromedisplaypainter.cpp **** 			// Fall back to software rendered method.
 267:../utils/monochromedisplaypainter.cpp **** 			else
 268:../utils/monochromedisplaypainter.cpp **** 			{
 269:../utils/monochromedisplaypainter.cpp **** 				// If memory copy acceleration is supported, ensure that the local buffer is ready.
 270:../utils/monochromedisplaypainter.cpp **** 				if ( _accelMethods.memoryCopyAccelerated )
 5979              		.loc 1 270 0
 5980 0194 FB68     		ldr	r3, [r7, #12]
 5981 0196 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 5982 0198 03F00203 		and	r3, r3, #2
 5983 019c DBB2     		uxtb	r3, r3
 5984 019e 002B     		cmp	r3, #0
 5985 01a0 08D0     		beq	.L101
 271:../utils/monochromedisplaypainter.cpp **** 				{
 272:../utils/monochromedisplaypainter.cpp **** 					_createOffsetBitmap( true );
 5986              		.loc 1 272 0
 5987 01a2 F868     		ldr	r0, [r7, #12]
 5988 01a4 4FF00101 		mov	r1, #1
 5989 01a8 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 273:../utils/monochromedisplaypainter.cpp **** 
 274:../utils/monochromedisplaypainter.cpp **** 					// Do not flush the display buffer 4 times to the display!
 275:../utils/monochromedisplaypainter.cpp **** 					_disableSync = true;
 5990              		.loc 1 275 0
 5991 01ac FB68     		ldr	r3, [r7, #12]
 5992 01ae 4FF00102 		mov	r2, #1
 5993 01b2 1A74     		strb	r2, [r3, #16]
 5994              	.L101:
 276:../utils/monochromedisplaypainter.cpp **** 				}
 277:../utils/monochromedisplaypainter.cpp **** 
 278:../utils/monochromedisplaypainter.cpp **** 				drawLine( topLeft ,
 279:../utils/monochromedisplaypainter.cpp **** 						  IMonochromeDisplay::Point( topLeft.x , topLeft.y + size.height - 1 ) ,
 280:../utils/monochromedisplaypainter.cpp **** 						  stroke );
 5995              		.loc 1 280 0
 5996 01b4 BB68     		ldr	r3, [r7, #8]
 5997 01b6 1A68     		ldr	r2, [r3, #0]
 5998 01b8 BB68     		ldr	r3, [r7, #8]
 5999 01ba 5968     		ldr	r1, [r3, #4]
 6000 01bc 7B68     		ldr	r3, [r7, #4]
 6001 01be 5B68     		ldr	r3, [r3, #4]
 6002 01c0 CB18     		adds	r3, r1, r3
 6003 01c2 03F1FF33 		add	r3, r3, #-1
 6004 01c6 07F12801 		add	r1, r7, #40
 6005 01ca 0846     		mov	r0, r1
 6006 01cc 1146     		mov	r1, r2
 6007 01ce 1A46     		mov	r2, r3
 6008 01d0 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6009 01d4 07F12802 		add	r2, r7, #40
 6010 01d8 97F90330 		ldrsb	r3, [r7, #3]
 6011 01dc F868     		ldr	r0, [r7, #12]
 6012 01de B968     		ldr	r1, [r7, #8]
 6013 01e0 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE
 281:../utils/monochromedisplaypainter.cpp **** 				drawLine( IMonochromeDisplay::Point( topLeft.x , topLeft.y + size.height - 1 ) ,
 282:../utils/monochromedisplaypainter.cpp **** 						  IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y + size.height - 1 ) ,
 283:../utils/monochromedisplaypainter.cpp **** 						  stroke);
 6014              		.loc 1 283 0
 6015 01e4 BB68     		ldr	r3, [r7, #8]
 6016 01e6 1A68     		ldr	r2, [r3, #0]
 6017 01e8 BB68     		ldr	r3, [r7, #8]
 6018 01ea 5968     		ldr	r1, [r3, #4]
 6019 01ec 7B68     		ldr	r3, [r7, #4]
 6020 01ee 5B68     		ldr	r3, [r3, #4]
 6021 01f0 CB18     		adds	r3, r1, r3
 6022 01f2 03F1FF33 		add	r3, r3, #-1
 6023 01f6 07F13001 		add	r1, r7, #48
 6024 01fa 0846     		mov	r0, r1
 6025 01fc 1146     		mov	r1, r2
 6026 01fe 1A46     		mov	r2, r3
 6027 0200 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6028 0204 BB68     		ldr	r3, [r7, #8]
 6029 0206 1A68     		ldr	r2, [r3, #0]
 6030 0208 7B68     		ldr	r3, [r7, #4]
 6031 020a 1B68     		ldr	r3, [r3, #0]
 6032 020c D318     		adds	r3, r2, r3
 6033 020e 03F1FF32 		add	r2, r3, #-1
 6034 0212 BB68     		ldr	r3, [r7, #8]
 6035 0214 5968     		ldr	r1, [r3, #4]
 6036 0216 7B68     		ldr	r3, [r7, #4]
 6037 0218 5B68     		ldr	r3, [r3, #4]
 6038 021a CB18     		adds	r3, r1, r3
 6039 021c 03F1FF33 		add	r3, r3, #-1
 6040 0220 07F13801 		add	r1, r7, #56
 6041 0224 0846     		mov	r0, r1
 6042 0226 1146     		mov	r1, r2
 6043 0228 1A46     		mov	r2, r3
 6044 022a FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6045 022e 07F13001 		add	r1, r7, #48
 6046 0232 07F13802 		add	r2, r7, #56
 6047 0236 97F90330 		ldrsb	r3, [r7, #3]
 6048 023a F868     		ldr	r0, [r7, #12]
 6049 023c FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE
 284:../utils/monochromedisplaypainter.cpp **** 				drawLine( IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y + size.height - 1 )
 285:../utils/monochromedisplaypainter.cpp **** 						  IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y ) ,
 286:../utils/monochromedisplaypainter.cpp **** 						  stroke );
 6050              		.loc 1 286 0
 6051 0240 BB68     		ldr	r3, [r7, #8]
 6052 0242 1A68     		ldr	r2, [r3, #0]
 6053 0244 7B68     		ldr	r3, [r7, #4]
 6054 0246 1B68     		ldr	r3, [r3, #0]
 6055 0248 D318     		adds	r3, r2, r3
 6056 024a 03F1FF32 		add	r2, r3, #-1
 6057 024e BB68     		ldr	r3, [r7, #8]
 6058 0250 5968     		ldr	r1, [r3, #4]
 6059 0252 7B68     		ldr	r3, [r7, #4]
 6060 0254 5B68     		ldr	r3, [r3, #4]
 6061 0256 CB18     		adds	r3, r1, r3
 6062 0258 03F1FF33 		add	r3, r3, #-1
 6063 025c 07F14001 		add	r1, r7, #64
 6064 0260 0846     		mov	r0, r1
 6065 0262 1146     		mov	r1, r2
 6066 0264 1A46     		mov	r2, r3
 6067 0266 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6068 026a BB68     		ldr	r3, [r7, #8]
 6069 026c 1A68     		ldr	r2, [r3, #0]
 6070 026e 7B68     		ldr	r3, [r7, #4]
 6071 0270 1B68     		ldr	r3, [r3, #0]
 6072 0272 D318     		adds	r3, r2, r3
 6073 0274 03F1FF32 		add	r2, r3, #-1
 6074 0278 BB68     		ldr	r3, [r7, #8]
 6075 027a 5B68     		ldr	r3, [r3, #4]
 6076 027c 07F14801 		add	r1, r7, #72
 6077 0280 0846     		mov	r0, r1
 6078 0282 1146     		mov	r1, r2
 6079 0284 1A46     		mov	r2, r3
 6080 0286 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6081 028a 07F14001 		add	r1, r7, #64
 6082 028e 07F14802 		add	r2, r7, #72
 6083 0292 97F90330 		ldrsb	r3, [r7, #3]
 6084 0296 F868     		ldr	r0, [r7, #12]
 6085 0298 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE
 287:../utils/monochromedisplaypainter.cpp **** 				drawLine( IMonochromeDisplay::Point( topLeft.x + size.width - 1 , topLeft.y ) ,
 288:../utils/monochromedisplaypainter.cpp **** 						  topLeft ,
 289:../utils/monochromedisplaypainter.cpp **** 						  stroke );
 6086              		.loc 1 289 0
 6087 029c BB68     		ldr	r3, [r7, #8]
 6088 029e 1A68     		ldr	r2, [r3, #0]
 6089 02a0 7B68     		ldr	r3, [r7, #4]
 6090 02a2 1B68     		ldr	r3, [r3, #0]
 6091 02a4 D318     		adds	r3, r2, r3
 6092 02a6 03F1FF32 		add	r2, r3, #-1
 6093 02aa BB68     		ldr	r3, [r7, #8]
 6094 02ac 5B68     		ldr	r3, [r3, #4]
 6095 02ae 07F15001 		add	r1, r7, #80
 6096 02b2 0846     		mov	r0, r1
 6097 02b4 1146     		mov	r1, r2
 6098 02b6 1A46     		mov	r2, r3
 6099 02b8 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6100 02bc 07F15002 		add	r2, r7, #80
 6101 02c0 97F90330 		ldrsb	r3, [r7, #3]
 6102 02c4 F868     		ldr	r0, [r7, #12]
 6103 02c6 1146     		mov	r1, r2
 6104 02c8 BA68     		ldr	r2, [r7, #8]
 6105 02ca FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE
 6106              	.L98:
 290:../utils/monochromedisplaypainter.cpp **** 			}
 291:../utils/monochromedisplaypainter.cpp **** 		}
 292:../utils/monochromedisplaypainter.cpp **** 
 293:../utils/monochromedisplaypainter.cpp **** 		// Finally sync screen.
 294:../utils/monochromedisplaypainter.cpp **** 		_disableSync = false;
 6107              		.loc 1 294 0
 6108 02ce FB68     		ldr	r3, [r7, #12]
 6109 02d0 4FF00002 		mov	r2, #0
 6110 02d4 1A74     		strb	r2, [r3, #16]
 295:../utils/monochromedisplaypainter.cpp **** 		if ( _autoUpdate )
 6111              		.loc 1 295 0
 6112 02d6 FB68     		ldr	r3, [r7, #12]
 6113 02d8 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 6114 02da 002B     		cmp	r3, #0
 6115 02dc 0BD0     		beq	.L86
 296:../utils/monochromedisplaypainter.cpp **** 			_syncDisplay( topLeft.y , topLeft.y + size.height );
 6116              		.loc 1 296 0
 6117 02de BB68     		ldr	r3, [r7, #8]
 6118 02e0 5A68     		ldr	r2, [r3, #4]
 6119 02e2 BB68     		ldr	r3, [r7, #8]
 6120 02e4 5968     		ldr	r1, [r3, #4]
 6121 02e6 7B68     		ldr	r3, [r7, #4]
 6122 02e8 5B68     		ldr	r3, [r3, #4]
 6123 02ea CB18     		adds	r3, r1, r3
 6124 02ec F868     		ldr	r0, [r7, #12]
 6125 02ee 1146     		mov	r1, r2
 6126 02f0 1A46     		mov	r2, r3
 6127 02f2 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter12_syncDisplayEii
 6128              	.L86:
 6129              	.LBE25:
 6130              	.LBE24:
 6131              	.LBE23:
 297:../utils/monochromedisplaypainter.cpp **** 	}
 298:../utils/monochromedisplaypainter.cpp **** }
 6132              		.loc 1 298 0
 6133 02f6 07F16407 		add	r7, r7, #100
 6134 02fa BD46     		mov	sp, r7
 6135 02fc 90BD     		pop	{r4, r7, pc}
 6136              		.cfi_endproc
 6137              	.LFE909:
 6139 02fe 00BF     		.section	.text._ZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4Siz
 6140              		.align	2
 6141              		.global	_ZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_1
 6142              		.thumb
 6143              		.thumb_func
 6145              	_ZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelCol
 6146              	.LFB910:
 299:../utils/monochromedisplaypainter.cpp **** 
 300:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::drawEllipse( const IMonochromeDisplay::Point & topLeft ,
 301:../utils/monochromedisplaypainter.cpp **** 				  	  	  	  	  	  	  	const IMonochromeDisplay::Size & size ,
 302:../utils/monochromedisplaypainter.cpp **** 				  	  	  	  	  	  	  	IMonochromeDisplay::PixelColor stroke ,
 303:../utils/monochromedisplaypainter.cpp **** 				  	  	  	  	  	  	  	IMonochromeDisplay::PixelColor fill )
 304:../utils/monochromedisplaypainter.cpp **** {
 6147              		.loc 1 304 0
 6148              		.cfi_startproc
 6149              		@ args = 4, pretend = 0, frame = 272
 6150              		@ frame_needed = 1, uses_anonymous_args = 0
 6151 0000 90B5     		push	{r4, r7, lr}
 6152              	.LCFI123:
 6153              		.cfi_def_cfa_offset 12
 6154 0002 C5B0     		sub	sp, sp, #276
 6155              	.LCFI124:
 6156              		.cfi_def_cfa_offset 288
 6157 0004 00AF     		add	r7, sp, #0
 6158              		.cfi_offset 14, -4
 6159              		.cfi_offset 7, -8
 6160              		.cfi_offset 4, -12
 6161              	.LCFI125:
 6162              		.cfi_def_cfa_register 7
 6163 0006 07F10C04 		add	r4, r7, #12
 6164 000a 2060     		str	r0, [r4, #0]
 6165 000c 07F10800 		add	r0, r7, #8
 6166 0010 0160     		str	r1, [r0, #0]
 6167 0012 07F10401 		add	r1, r7, #4
 6168 0016 0A60     		str	r2, [r1, #0]
 6169 0018 1A46     		mov	r2, r3
 6170 001a 07F10403 		add	r3, r7, #4
 6171 001e 03F1FF33 		add	r3, r3, #-1
 6172 0022 1A70     		strb	r2, [r3, #0]
 6173              	.LBB33:
 305:../utils/monochromedisplaypainter.cpp **** 	assert( _display );
 6174              		.loc 1 305 0
 6175 0024 07F10C03 		add	r3, r7, #12
 6176 0028 1B68     		ldr	r3, [r3, #0]
 6177 002a 5B68     		ldr	r3, [r3, #4]
 6178 002c 002B     		cmp	r3, #0
 6179 002e 0FD1     		bne	.L103
 6180              		.loc 1 305 0 is_stmt 0 discriminator 1
 6181 0030 40F20000 		movw	r0, #:lower16:.LC0
 6182 0034 C0F20000 		movt	r0, #:upper16:.LC0
 6183 0038 40F23111 		movw	r1, #305
 6184 003c 40F20002 		movw	r2, #:lower16:_ZZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0
 6185 0040 C0F20002 		movt	r2, #:upper16:_ZZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0
 6186 0044 40F20003 		movw	r3, #:lower16:.LC1
 6187 0048 C0F20003 		movt	r3, #:upper16:.LC1
 6188 004c FFF7FEFF 		bl	__assert_func
 6189              	.L103:
 6190              	.LBB34:
 306:../utils/monochromedisplaypainter.cpp **** 	if ( _display )
 6191              		.loc 1 306 0 is_stmt 1
 6192 0050 07F10C03 		add	r3, r7, #12
 6193 0054 1B68     		ldr	r3, [r3, #0]
 6194 0056 5B68     		ldr	r3, [r3, #4]
 6195 0058 002B     		cmp	r3, #0
 6196 005a 00F0E983 		beq	.L102
 6197              	.LBB35:
 6198              	.LBB36:
 307:../utils/monochromedisplaypainter.cpp **** 	{
 308:../utils/monochromedisplaypainter.cpp **** 		// Do we need to fill the ellipse?
 309:../utils/monochromedisplaypainter.cpp **** 		if ( fill != IMonochromeDisplay::Undefined )
 6199              		.loc 1 309 0
 6200 005e 97F92031 		ldrsb	r3, [r7, #288]
 6201 0062 002B     		cmp	r3, #0
 6202 0064 00F07581 		beq	.L105
 6203              	.LBB37:
 6204              	.LBB38:
 310:../utils/monochromedisplaypainter.cpp **** 		{
 311:../utils/monochromedisplaypainter.cpp **** 			// Try first the accelerated method.
 312:../utils/monochromedisplaypainter.cpp **** 			if ( _accelMethods.drawEllipseFillAccelerated && !_offscreenBitmap )
 6205              		.loc 1 312 0
 6206 0068 07F10C03 		add	r3, r7, #12
 6207 006c 1B68     		ldr	r3, [r3, #0]
 6208 006e 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 6209 0070 03F04003 		and	r3, r3, #64
 6210 0074 DBB2     		uxtb	r3, r3
 6211 0076 002B     		cmp	r3, #0
 6212 0078 1BD0     		beq	.L106
 6213              		.loc 1 312 0 is_stmt 0 discriminator 1
 6214 007a 07F10C03 		add	r3, r7, #12
 6215 007e 1B68     		ldr	r3, [r3, #0]
 6216 0080 DB68     		ldr	r3, [r3, #12]
 6217 0082 002B     		cmp	r3, #0
 6218 0084 15D1     		bne	.L106
 313:../utils/monochromedisplaypainter.cpp **** 			{
 314:../utils/monochromedisplaypainter.cpp **** 				_display->fillEllipse( topLeft , size , fill );
 6219              		.loc 1 314 0 is_stmt 1
 6220 0086 07F10C03 		add	r3, r7, #12
 6221 008a 1B68     		ldr	r3, [r3, #0]
 6222 008c 5B68     		ldr	r3, [r3, #4]
 6223 008e 1B68     		ldr	r3, [r3, #0]
 6224 0090 03F14003 		add	r3, r3, #64
 6225 0094 1C68     		ldr	r4, [r3, #0]
 6226 0096 07F10C03 		add	r3, r7, #12
 6227 009a 1B68     		ldr	r3, [r3, #0]
 6228 009c 5868     		ldr	r0, [r3, #4]
 6229 009e 07F10801 		add	r1, r7, #8
 6230 00a2 07F10402 		add	r2, r7, #4
 6231 00a6 97F92031 		ldrsb	r3, [r7, #288]
 6232 00aa 0968     		ldr	r1, [r1, #0]
 6233 00ac 1268     		ldr	r2, [r2, #0]
 6234 00ae A047     		blx	r4
 6235 00b0 4FE1     		b	.L105
 6236              	.L106:
 6237              	.LBB39:
 315:../utils/monochromedisplaypainter.cpp **** 			}
 316:../utils/monochromedisplaypainter.cpp **** 
 317:../utils/monochromedisplaypainter.cpp **** 			// Fall back to software rendered method either per direct pixel access or buffer copy.
 318:../utils/monochromedisplaypainter.cpp **** 			else
 319:../utils/monochromedisplaypainter.cpp **** 			{
 320:../utils/monochromedisplaypainter.cpp **** 				// If memory copy acceleration is supported, ensure that the local buffer is ready.
 321:../utils/monochromedisplaypainter.cpp **** 				if ( _accelMethods.memoryCopyAccelerated )
 6238              		.loc 1 321 0
 6239 00b2 07F10C03 		add	r3, r7, #12
 6240 00b6 1B68     		ldr	r3, [r3, #0]
 6241 00b8 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 6242 00ba 03F00203 		and	r3, r3, #2
 6243 00be DBB2     		uxtb	r3, r3
 6244 00c0 002B     		cmp	r3, #0
 6245 00c2 06D0     		beq	.L108
 322:../utils/monochromedisplaypainter.cpp **** 					_createOffsetBitmap( true );
 6246              		.loc 1 322 0
 6247 00c4 07F10C03 		add	r3, r7, #12
 6248 00c8 1868     		ldr	r0, [r3, #0]
 6249 00ca 4FF00101 		mov	r1, #1
 6250 00ce FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 6251              	.L108:
 323:../utils/monochromedisplaypainter.cpp **** 
 324:../utils/monochromedisplaypainter.cpp **** 				// Fill ellipse.
 325:../utils/monochromedisplaypainter.cpp **** 				Fix16 radiusX = Fix16( size.width - 1 ) / 2;
 6252              		.loc 1 325 0
 6253 00d2 07F10403 		add	r3, r7, #4
 6254 00d6 1B68     		ldr	r3, [r3, #0]
 6255 00d8 1B68     		ldr	r3, [r3, #0]
 6256 00da 03F1FF33 		add	r3, r3, #-1
 6257 00de 07F14C02 		add	r2, r7, #76
 6258 00e2 1046     		mov	r0, r2
 6259 00e4 1946     		mov	r1, r3
 6260 00e6 FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6261 00ea 07F14802 		add	r2, r7, #72
 6262 00ee 07F14C03 		add	r3, r7, #76
 6263 00f2 1046     		mov	r0, r2
 6264 00f4 1946     		mov	r1, r3
 6265 00f6 4FF00202 		mov	r2, #2
 6266 00fa FFF7FEFF 		bl	_ZNK5Fix16dvEi
 326:../utils/monochromedisplaypainter.cpp **** 				Fix16 radiusY = Fix16( size.height - 1 ) / 2;
 6267              		.loc 1 326 0
 6268 00fe 07F10403 		add	r3, r7, #4
 6269 0102 1B68     		ldr	r3, [r3, #0]
 6270 0104 5B68     		ldr	r3, [r3, #4]
 6271 0106 03F1FF33 		add	r3, r3, #-1
 6272 010a 07F15002 		add	r2, r7, #80
 6273 010e 1046     		mov	r0, r2
 6274 0110 1946     		mov	r1, r3
 6275 0112 FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6276 0116 07F14402 		add	r2, r7, #68
 6277 011a 07F15003 		add	r3, r7, #80
 6278 011e 1046     		mov	r0, r2
 6279 0120 1946     		mov	r1, r3
 6280 0122 4FF00202 		mov	r2, #2
 6281 0126 FFF7FEFF 		bl	_ZNK5Fix16dvEi
 327:../utils/monochromedisplaypainter.cpp **** 				Fix16 centerX = radiusX + topLeft.x;
 6282              		.loc 1 327 0
 6283 012a 07F10803 		add	r3, r7, #8
 6284 012e 1B68     		ldr	r3, [r3, #0]
 6285 0130 1B68     		ldr	r3, [r3, #0]
 6286 0132 07F14001 		add	r1, r7, #64
 6287 0136 07F14802 		add	r2, r7, #72
 6288 013a 0846     		mov	r0, r1
 6289 013c 1146     		mov	r1, r2
 6290 013e 1A46     		mov	r2, r3
 6291 0140 FFF7FEFF 		bl	_ZNK5Fix16plEi
 328:../utils/monochromedisplaypainter.cpp **** 				Fix16 centerY = radiusY + topLeft.y;
 6292              		.loc 1 328 0
 6293 0144 07F10803 		add	r3, r7, #8
 6294 0148 1B68     		ldr	r3, [r3, #0]
 6295 014a 5B68     		ldr	r3, [r3, #4]
 6296 014c 07F13C01 		add	r1, r7, #60
 6297 0150 07F14402 		add	r2, r7, #68
 6298 0154 0846     		mov	r0, r1
 6299 0156 1146     		mov	r1, r2
 6300 0158 1A46     		mov	r2, r3
 6301 015a FFF7FEFF 		bl	_ZNK5Fix16plEi
 6302              	.LBB40:
 329:../utils/monochromedisplaypainter.cpp **** 
 330:../utils/monochromedisplaypainter.cpp **** 
 331:../utils/monochromedisplaypainter.cpp **** 				for ( Fix16 x = topLeft.x ; x < topLeft.x + size.width ; x += 1 )
 6303              		.loc 1 331 0
 6304 015e 07F10803 		add	r3, r7, #8
 6305 0162 1B68     		ldr	r3, [r3, #0]
 6306 0164 1B68     		ldr	r3, [r3, #0]
 6307 0166 07F13802 		add	r2, r7, #56
 6308 016a 1046     		mov	r0, r2
 6309 016c 1946     		mov	r1, r3
 6310 016e FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6311 0172 D6E0     		b	.L109
 6312              	.L113:
 6313              	.LBB41:
 6314              	.LBB42:
 332:../utils/monochromedisplaypainter.cpp **** 					for ( Fix16 y = topLeft.y ; y < topLeft.y + size.height ; y += 1 )
 6315              		.loc 1 332 0
 6316 0174 07F10803 		add	r3, r7, #8
 6317 0178 1B68     		ldr	r3, [r3, #0]
 6318 017a 5B68     		ldr	r3, [r3, #4]
 6319 017c 07F13402 		add	r2, r7, #52
 6320 0180 1046     		mov	r0, r2
 6321 0182 1946     		mov	r1, r3
 6322 0184 FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6323 0188 ACE0     		b	.L110
 6324              	.L112:
 333:../utils/monochromedisplaypainter.cpp **** 					{
 334:../utils/monochromedisplaypainter.cpp **** 						if ( ( ( x - centerX ) * ( x - centerX ) ) / ( radiusX * radiusX ) +
 335:../utils/monochromedisplaypainter.cpp **** 							 ( ( y - centerY ) * ( y - centerY ) ) / ( radiusY * radiusY ) < 1 )
 6325              		.loc 1 335 0
 6326 018a 07F16001 		add	r1, r7, #96
 6327 018e 07F13802 		add	r2, r7, #56
 6328 0192 07F14003 		add	r3, r7, #64
 6329 0196 0846     		mov	r0, r1
 6330 0198 1146     		mov	r1, r2
 6331 019a 1A46     		mov	r2, r3
 6332 019c FFF7FEFF 		bl	_ZNK5Fix16miERKS_
 6333 01a0 07F16401 		add	r1, r7, #100
 6334 01a4 07F13802 		add	r2, r7, #56
 6335 01a8 07F14003 		add	r3, r7, #64
 6336 01ac 0846     		mov	r0, r1
 6337 01ae 1146     		mov	r1, r2
 6338 01b0 1A46     		mov	r2, r3
 6339 01b2 FFF7FEFF 		bl	_ZNK5Fix16miERKS_
 6340 01b6 07F15C01 		add	r1, r7, #92
 6341 01ba 07F16002 		add	r2, r7, #96
 6342 01be 07F16403 		add	r3, r7, #100
 6343 01c2 0846     		mov	r0, r1
 6344 01c4 1146     		mov	r1, r2
 6345 01c6 1A46     		mov	r2, r3
 6346 01c8 FFF7FEFF 		bl	_ZNK5Fix16mlERKS_
 6347 01cc 07F16801 		add	r1, r7, #104
 6348 01d0 07F14802 		add	r2, r7, #72
 6349 01d4 07F14803 		add	r3, r7, #72
 6350 01d8 0846     		mov	r0, r1
 6351 01da 1146     		mov	r1, r2
 6352 01dc 1A46     		mov	r2, r3
 6353 01de FFF7FEFF 		bl	_ZNK5Fix16mlERKS_
 6354 01e2 07F15801 		add	r1, r7, #88
 6355 01e6 07F15C02 		add	r2, r7, #92
 6356 01ea 07F16803 		add	r3, r7, #104
 6357 01ee 0846     		mov	r0, r1
 6358 01f0 1146     		mov	r1, r2
 6359 01f2 1A46     		mov	r2, r3
 6360 01f4 FFF7FEFF 		bl	_ZNK5Fix16dvERKS_
 6361 01f8 07F17401 		add	r1, r7, #116
 6362 01fc 07F13402 		add	r2, r7, #52
 6363 0200 07F13C03 		add	r3, r7, #60
 6364 0204 0846     		mov	r0, r1
 6365 0206 1146     		mov	r1, r2
 6366 0208 1A46     		mov	r2, r3
 6367 020a FFF7FEFF 		bl	_ZNK5Fix16miERKS_
 6368 020e 07F17801 		add	r1, r7, #120
 6369 0212 07F13402 		add	r2, r7, #52
 6370 0216 07F13C03 		add	r3, r7, #60
 6371 021a 0846     		mov	r0, r1
 6372 021c 1146     		mov	r1, r2
 6373 021e 1A46     		mov	r2, r3
 6374 0220 FFF7FEFF 		bl	_ZNK5Fix16miERKS_
 6375 0224 07F17001 		add	r1, r7, #112
 6376 0228 07F17402 		add	r2, r7, #116
 6377 022c 07F17803 		add	r3, r7, #120
 6378 0230 0846     		mov	r0, r1
 6379 0232 1146     		mov	r1, r2
 6380 0234 1A46     		mov	r2, r3
 6381 0236 FFF7FEFF 		bl	_ZNK5Fix16mlERKS_
 6382 023a 07F17C01 		add	r1, r7, #124
 6383 023e 07F14402 		add	r2, r7, #68
 6384 0242 07F14403 		add	r3, r7, #68
 6385 0246 0846     		mov	r0, r1
 6386 0248 1146     		mov	r1, r2
 6387 024a 1A46     		mov	r2, r3
 6388 024c FFF7FEFF 		bl	_ZNK5Fix16mlERKS_
 6389 0250 07F16C01 		add	r1, r7, #108
 6390 0254 07F17002 		add	r2, r7, #112
 6391 0258 07F17C03 		add	r3, r7, #124
 6392 025c 0846     		mov	r0, r1
 6393 025e 1146     		mov	r1, r2
 6394 0260 1A46     		mov	r2, r3
 6395 0262 FFF7FEFF 		bl	_ZNK5Fix16dvERKS_
 6396 0266 07F15401 		add	r1, r7, #84
 6397 026a 07F15802 		add	r2, r7, #88
 6398 026e 07F16C03 		add	r3, r7, #108
 6399 0272 0846     		mov	r0, r1
 6400 0274 1146     		mov	r1, r2
 6401 0276 1A46     		mov	r2, r3
 6402 0278 FFF7FEFF 		bl	_ZNK5Fix16plERKS_
 6403 027c 07F15403 		add	r3, r7, #84
 6404 0280 1846     		mov	r0, r3
 6405 0282 4FF00101 		mov	r1, #1
 6406 0286 FFF7FEFF 		bl	_ZNK5Fix16ltEi
 6407 028a 0346     		mov	r3, r0
 334:../utils/monochromedisplaypainter.cpp **** 						if ( ( ( x - centerX ) * ( x - centerX ) ) / ( radiusX * radiusX ) +
 6408              		.loc 1 334 0
 6409 028c 002B     		cmp	r3, #0
 6410 028e 0CBF     		ite	eq
 6411 0290 0023     		moveq	r3, #0
 6412 0292 0123     		movne	r3, #1
 6413 0294 DBB2     		uxtb	r3, r3
 6414 0296 002B     		cmp	r3, #0
 6415 0298 1DD0     		beq	.L111
 336:../utils/monochromedisplaypainter.cpp **** 						{
 337:../utils/monochromedisplaypainter.cpp **** 							_setPixel( IMonochromeDisplay::Point( x , y ) , fill );
 6416              		.loc 1 337 0
 6417 029a 07F13803 		add	r3, r7, #56
 6418 029e 1846     		mov	r0, r3
 6419 02a0 FFF7FEFF 		bl	_ZN5Fix16cviEv
 6420 02a4 0446     		mov	r4, r0
 6421 02a6 07F13403 		add	r3, r7, #52
 6422 02aa 1846     		mov	r0, r3
 6423 02ac FFF7FEFF 		bl	_ZN5Fix16cviEv
 6424 02b0 0346     		mov	r3, r0
 6425 02b2 07F18002 		add	r2, r7, #128
 6426 02b6 1046     		mov	r0, r2
 6427 02b8 2146     		mov	r1, r4
 6428 02ba 1A46     		mov	r2, r3
 6429 02bc FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6430 02c0 07F10C01 		add	r1, r7, #12
 6431 02c4 07F18002 		add	r2, r7, #128
 6432 02c8 97F92031 		ldrsb	r3, [r7, #288]
 6433 02cc 0868     		ldr	r0, [r1, #0]
 6434 02ce 1146     		mov	r1, r2
 6435 02d0 1A46     		mov	r2, r3
 6436 02d2 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 6437              	.L111:
 332:../utils/monochromedisplaypainter.cpp **** 					for ( Fix16 y = topLeft.y ; y < topLeft.y + size.height ; y += 1 )
 6438              		.loc 1 332 0
 6439 02d6 07F13403 		add	r3, r7, #52
 6440 02da 1846     		mov	r0, r3
 6441 02dc 4FF00101 		mov	r1, #1
 6442 02e0 FFF7FEFF 		bl	_ZN5Fix16pLEi
 6443              	.L110:
 332:../utils/monochromedisplaypainter.cpp **** 					for ( Fix16 y = topLeft.y ; y < topLeft.y + size.height ; y += 1 )
 6444              		.loc 1 332 0 is_stmt 0 discriminator 1
 6445 02e4 07F10803 		add	r3, r7, #8
 6446 02e8 1B68     		ldr	r3, [r3, #0]
 6447 02ea 5A68     		ldr	r2, [r3, #4]
 6448 02ec 07F10403 		add	r3, r7, #4
 6449 02f0 1B68     		ldr	r3, [r3, #0]
 6450 02f2 5B68     		ldr	r3, [r3, #4]
 6451 02f4 D318     		adds	r3, r2, r3
 6452 02f6 07F13402 		add	r2, r7, #52
 6453 02fa 1046     		mov	r0, r2
 6454 02fc 1946     		mov	r1, r3
 6455 02fe FFF7FEFF 		bl	_ZNK5Fix16ltEi
 6456 0302 0346     		mov	r3, r0
 6457 0304 002B     		cmp	r3, #0
 6458 0306 0CBF     		ite	eq
 6459 0308 0023     		moveq	r3, #0
 6460 030a 0123     		movne	r3, #1
 6461 030c DBB2     		uxtb	r3, r3
 6462 030e 002B     		cmp	r3, #0
 6463 0310 7FF43BAF 		bne	.L112
 6464              	.LBE42:
 6465              	.LBE41:
 331:../utils/monochromedisplaypainter.cpp **** 				for ( Fix16 x = topLeft.x ; x < topLeft.x + size.width ; x += 1 )
 6466              		.loc 1 331 0 is_stmt 1
 6467 0314 07F13803 		add	r3, r7, #56
 6468 0318 1846     		mov	r0, r3
 6469 031a 4FF00101 		mov	r1, #1
 6470 031e FFF7FEFF 		bl	_ZN5Fix16pLEi
 6471              	.L109:
 331:../utils/monochromedisplaypainter.cpp **** 				for ( Fix16 x = topLeft.x ; x < topLeft.x + size.width ; x += 1 )
 6472              		.loc 1 331 0 is_stmt 0 discriminator 1
 6473 0322 07F10803 		add	r3, r7, #8
 6474 0326 1B68     		ldr	r3, [r3, #0]
 6475 0328 1A68     		ldr	r2, [r3, #0]
 6476 032a 07F10403 		add	r3, r7, #4
 6477 032e 1B68     		ldr	r3, [r3, #0]
 6478 0330 1B68     		ldr	r3, [r3, #0]
 6479 0332 D318     		adds	r3, r2, r3
 6480 0334 07F13802 		add	r2, r7, #56
 6481 0338 1046     		mov	r0, r2
 6482 033a 1946     		mov	r1, r3
 6483 033c FFF7FEFF 		bl	_ZNK5Fix16ltEi
 6484 0340 0346     		mov	r3, r0
 6485 0342 002B     		cmp	r3, #0
 6486 0344 0CBF     		ite	eq
 6487 0346 0023     		moveq	r3, #0
 6488 0348 0123     		movne	r3, #1
 6489 034a DBB2     		uxtb	r3, r3
 6490 034c 002B     		cmp	r3, #0
 6491 034e 7FF411AF 		bne	.L113
 6492              	.L105:
 6493              	.LBE40:
 6494              	.LBE39:
 6495              	.LBE38:
 6496              	.LBE37:
 6497              	.LBE36:
 6498              	.LBB43:
 338:../utils/monochromedisplaypainter.cpp **** 						}
 339:../utils/monochromedisplaypainter.cpp **** 					}
 340:../utils/monochromedisplaypainter.cpp **** 			}
 341:../utils/monochromedisplaypainter.cpp **** 		}
 342:../utils/monochromedisplaypainter.cpp **** 
 343:../utils/monochromedisplaypainter.cpp **** 		// Draw border if needed.
 344:../utils/monochromedisplaypainter.cpp **** 		if ( stroke != IMonochromeDisplay::Undefined )
 6499              		.loc 1 344 0 is_stmt 1
 6500 0352 07F10403 		add	r3, r7, #4
 6501 0356 03F1FF33 		add	r3, r3, #-1
 6502 035a 93F90030 		ldrsb	r3, [r3, #0]
 6503 035e 002B     		cmp	r3, #0
 6504 0360 00F04C82 		beq	.L114
 6505              	.LBB44:
 6506              	.LBB45:
 345:../utils/monochromedisplaypainter.cpp **** 		{
 346:../utils/monochromedisplaypainter.cpp **** 			// Try first the accelerated method.
 347:../utils/monochromedisplaypainter.cpp **** 			if ( _accelMethods.drawEllipseStrokeAccelerated && !_offscreenBitmap )
 6507              		.loc 1 347 0
 6508 0364 07F10C03 		add	r3, r7, #12
 6509 0368 1B68     		ldr	r3, [r3, #0]
 6510 036a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 6511 036c 03F02003 		and	r3, r3, #32
 6512 0370 DBB2     		uxtb	r3, r3
 6513 0372 002B     		cmp	r3, #0
 6514 0374 1FD0     		beq	.L115
 6515              		.loc 1 347 0 is_stmt 0 discriminator 1
 6516 0376 07F10C03 		add	r3, r7, #12
 6517 037a 1B68     		ldr	r3, [r3, #0]
 6518 037c DB68     		ldr	r3, [r3, #12]
 6519 037e 002B     		cmp	r3, #0
 6520 0380 19D1     		bne	.L115
 348:../utils/monochromedisplaypainter.cpp **** 			{
 349:../utils/monochromedisplaypainter.cpp **** 				_display->drawEllipse( topLeft , size , stroke );
 6521              		.loc 1 349 0 is_stmt 1
 6522 0382 07F10C03 		add	r3, r7, #12
 6523 0386 1B68     		ldr	r3, [r3, #0]
 6524 0388 5B68     		ldr	r3, [r3, #4]
 6525 038a 1B68     		ldr	r3, [r3, #0]
 6526 038c 03F13C03 		add	r3, r3, #60
 6527 0390 1C68     		ldr	r4, [r3, #0]
 6528 0392 07F10C03 		add	r3, r7, #12
 6529 0396 1B68     		ldr	r3, [r3, #0]
 6530 0398 5868     		ldr	r0, [r3, #4]
 6531 039a 07F10801 		add	r1, r7, #8
 6532 039e 07F10402 		add	r2, r7, #4
 6533 03a2 07F10403 		add	r3, r7, #4
 6534 03a6 03F1FF33 		add	r3, r3, #-1
 6535 03aa 93F90030 		ldrsb	r3, [r3, #0]
 6536 03ae 0968     		ldr	r1, [r1, #0]
 6537 03b0 1268     		ldr	r2, [r2, #0]
 6538 03b2 A047     		blx	r4
 6539 03b4 22E2     		b	.L114
 6540              	.L115:
 6541              	.LBB46:
 350:../utils/monochromedisplaypainter.cpp **** 			}
 351:../utils/monochromedisplaypainter.cpp **** 
 352:../utils/monochromedisplaypainter.cpp **** 			// Fall back to software rendered method either per direct pixel access or buffer copy.
 353:../utils/monochromedisplaypainter.cpp **** 			else
 354:../utils/monochromedisplaypainter.cpp **** 			{
 355:../utils/monochromedisplaypainter.cpp **** 				if ( _accelMethods.memoryCopyAccelerated )
 6542              		.loc 1 355 0
 6543 03b6 07F10C03 		add	r3, r7, #12
 6544 03ba 1B68     		ldr	r3, [r3, #0]
 6545 03bc 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 6546 03be 03F00203 		and	r3, r3, #2
 6547 03c2 DBB2     		uxtb	r3, r3
 6548 03c4 002B     		cmp	r3, #0
 6549 03c6 06D0     		beq	.L117
 356:../utils/monochromedisplaypainter.cpp **** 					_createOffsetBitmap( true );
 6550              		.loc 1 356 0
 6551 03c8 07F10C03 		add	r3, r7, #12
 6552 03cc 1868     		ldr	r0, [r3, #0]
 6553 03ce 4FF00101 		mov	r1, #1
 6554 03d2 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 6555              	.L117:
 357:../utils/monochromedisplaypainter.cpp **** 
 358:../utils/monochromedisplaypainter.cpp **** 				// Draw the border of the ellipse.
 359:../utils/monochromedisplaypainter.cpp **** 				Fix16 radiusX = Fix16( size.width - 1 ) / Fix16( 2 );
 6556              		.loc 1 359 0
 6557 03d6 07F10403 		add	r3, r7, #4
 6558 03da 1B68     		ldr	r3, [r3, #0]
 6559 03dc 1B68     		ldr	r3, [r3, #0]
 6560 03de 03F1FF33 		add	r3, r3, #-1
 6561 03e2 07F18802 		add	r2, r7, #136
 6562 03e6 1046     		mov	r0, r2
 6563 03e8 1946     		mov	r1, r3
 6564 03ea FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6565 03ee 07F18C03 		add	r3, r7, #140
 6566 03f2 1846     		mov	r0, r3
 6567 03f4 4FF00201 		mov	r1, #2
 6568 03f8 FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6569 03fc 07F13001 		add	r1, r7, #48
 6570 0400 07F18802 		add	r2, r7, #136
 6571 0404 07F18C03 		add	r3, r7, #140
 6572 0408 0846     		mov	r0, r1
 6573 040a 1146     		mov	r1, r2
 6574 040c 1A46     		mov	r2, r3
 6575 040e FFF7FEFF 		bl	_ZNK5Fix16dvERKS_
 360:../utils/monochromedisplaypainter.cpp **** 				Fix16 radiusY = Fix16( size.height - 1 ) / Fix16( 2 );
 6576              		.loc 1 360 0
 6577 0412 07F10403 		add	r3, r7, #4
 6578 0416 1B68     		ldr	r3, [r3, #0]
 6579 0418 5B68     		ldr	r3, [r3, #4]
 6580 041a 03F1FF33 		add	r3, r3, #-1
 6581 041e 07F19002 		add	r2, r7, #144
 6582 0422 1046     		mov	r0, r2
 6583 0424 1946     		mov	r1, r3
 6584 0426 FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6585 042a 07F19403 		add	r3, r7, #148
 6586 042e 1846     		mov	r0, r3
 6587 0430 4FF00201 		mov	r1, #2
 6588 0434 FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6589 0438 07F12C01 		add	r1, r7, #44
 6590 043c 07F19002 		add	r2, r7, #144
 6591 0440 07F19403 		add	r3, r7, #148
 6592 0444 0846     		mov	r0, r1
 6593 0446 1146     		mov	r1, r2
 6594 0448 1A46     		mov	r2, r3
 6595 044a FFF7FEFF 		bl	_ZNK5Fix16dvERKS_
 361:../utils/monochromedisplaypainter.cpp **** 				Fix16 centerX = Fix16( topLeft.x ) + radiusX;
 6596              		.loc 1 361 0
 6597 044e 07F10803 		add	r3, r7, #8
 6598 0452 1B68     		ldr	r3, [r3, #0]
 6599 0454 1B68     		ldr	r3, [r3, #0]
 6600 0456 07F19802 		add	r2, r7, #152
 6601 045a 1046     		mov	r0, r2
 6602 045c 1946     		mov	r1, r3
 6603 045e FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6604 0462 07F12801 		add	r1, r7, #40
 6605 0466 07F19802 		add	r2, r7, #152
 6606 046a 07F13003 		add	r3, r7, #48
 6607 046e 0846     		mov	r0, r1
 6608 0470 1146     		mov	r1, r2
 6609 0472 1A46     		mov	r2, r3
 6610 0474 FFF7FEFF 		bl	_ZNK5Fix16plERKS_
 362:../utils/monochromedisplaypainter.cpp **** 				Fix16 centerY = Fix16( topLeft.y ) + radiusY;
 6611              		.loc 1 362 0
 6612 0478 07F10803 		add	r3, r7, #8
 6613 047c 1B68     		ldr	r3, [r3, #0]
 6614 047e 5B68     		ldr	r3, [r3, #4]
 6615 0480 07F19C02 		add	r2, r7, #156
 6616 0484 1046     		mov	r0, r2
 6617 0486 1946     		mov	r1, r3
 6618 0488 FFF7FEFF 		bl	_ZN5Fix16C1Ei
 6619 048c 07F12401 		add	r1, r7, #36
 6620 0490 07F19C02 		add	r2, r7, #156
 6621 0494 07F12C03 		add	r3, r7, #44
 6622 0498 0846     		mov	r0, r1
 6623 049a 1146     		mov	r1, r2
 6624 049c 1A46     		mov	r2, r3
 6625 049e FFF7FEFF 		bl	_ZNK5Fix16plERKS_
 363:../utils/monochromedisplaypainter.cpp **** 				Fix16 x = 0;
 6626              		.loc 1 363 0
 6627 04a2 07F12003 		add	r3, r7, #32
 6628 04a6 1846     		mov	r0, r3
 6629 04a8 4FF00001 		mov	r1, #0
 6630 04ac FFF7FEFF 		bl	_ZN5Fix16C1Ei
 364:../utils/monochromedisplaypainter.cpp **** 				Fix16 y = radiusY;
 6631              		.loc 1 364 0
 6632 04b0 07F11C02 		add	r2, r7, #28
 6633 04b4 07F12C03 		add	r3, r7, #44
 6634 04b8 1046     		mov	r0, r2
 6635 04ba 1946     		mov	r1, r3
 6636 04bc FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 365:../utils/monochromedisplaypainter.cpp **** 				Fix16 angle = 0;
 6637              		.loc 1 365 0
 6638 04c0 07F11803 		add	r3, r7, #24
 6639 04c4 1846     		mov	r0, r3
 6640 04c6 4FF00001 		mov	r1, #0
 6641 04ca FFF7FEFF 		bl	_ZN5Fix16C1Ei
 366:../utils/monochromedisplaypainter.cpp **** 				Fix16 range = radiusX;
 6642              		.loc 1 366 0
 6643 04ce 07F11402 		add	r2, r7, #20
 6644 04d2 07F13003 		add	r3, r7, #48
 6645 04d6 1046     		mov	r0, r2
 6646 04d8 1946     		mov	r1, r3
 6647 04da FFF7FEFF 		bl	_ZN5Fix16C1ERKS_
 6648              	.L118:
 367:../utils/monochromedisplaypainter.cpp **** 
 368:../utils/monochromedisplaypainter.cpp **** 				do
 369:../utils/monochromedisplaypainter.cpp **** 				{
 370:../utils/monochromedisplaypainter.cpp **** 					_setPixel( IMonochromeDisplay::Point( Fix16( centerX + x + 0.0 ) ,
 371:../utils/monochromedisplaypainter.cpp **** 														  Fix16( centerY + y + 0.0 ) ) , stroke );
 6649              		.loc 1 371 0 discriminator 1
 6650 04de 07F1AC01 		add	r1, r7, #172
 6651 04e2 07F12802 		add	r2, r7, #40
 6652 04e6 07F12003 		add	r3, r7, #32
 6653 04ea 0846     		mov	r0, r1
 6654 04ec 1146     		mov	r1, r2
 6655 04ee 1A46     		mov	r2, r3
 6656 04f0 FFF7FEFF 		bl	_ZNK5Fix16plERKS_
 6657 04f4 07F1A802 		add	r2, r7, #168
 6658 04f8 07F1AC03 		add	r3, r7, #172
 6659 04fc 1046     		mov	r0, r2
 6660 04fe 1946     		mov	r1, r3
 6661 0500 4FF00002 		mov	r2, #0
 6662 0504 4FF00003 		mov	r3, #0
 6663 0508 FFF7FEFF 		bl	_ZNK5Fix16plEd
 6664 050c 07F1A803 		add	r3, r7, #168
 6665 0510 1846     		mov	r0, r3
 6666 0512 FFF7FEFF 		bl	_ZN5Fix16cviEv
 6667 0516 0446     		mov	r4, r0
 6668 0518 07F1B401 		add	r1, r7, #180
 6669 051c 07F12402 		add	r2, r7, #36
 6670 0520 07F11C03 		add	r3, r7, #28
 6671 0524 0846     		mov	r0, r1
 6672 0526 1146     		mov	r1, r2
 6673 0528 1A46     		mov	r2, r3
 6674 052a FFF7FEFF 		bl	_ZNK5Fix16plERKS_
 6675 052e 07F1B002 		add	r2, r7, #176
 6676 0532 07F1B403 		add	r3, r7, #180
 6677 0536 1046     		mov	r0, r2
 6678 0538 1946     		mov	r1, r3
 6679 053a 4FF00002 		mov	r2, #0
 6680 053e 4FF00003 		mov	r3, #0
 6681 0542 FFF7FEFF 		bl	_ZNK5Fix16plEd
 6682 0546 07F1B003 		add	r3, r7, #176
 6683 054a 1846     		mov	r0, r3
 6684 054c FFF7FEFF 		bl	_ZN5Fix16cviEv
 6685 0550 0346     		mov	r3, r0
 6686 0552 07F1A002 		add	r2, r7, #160
 6687 0556 1046     		mov	r0, r2
 6688 0558 2146     		mov	r1, r4
 6689 055a 1A46     		mov	r2, r3
 6690 055c FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6691 0560 07F10C01 		add	r1, r7, #12
 6692 0564 07F1A002 		add	r2, r7, #160
 6693 0568 07F10403 		add	r3, r7, #4
 6694 056c 03F1FF33 		add	r3, r3, #-1
 6695 0570 93F90030 		ldrsb	r3, [r3, #0]
 6696 0574 0868     		ldr	r0, [r1, #0]
 6697 0576 1146     		mov	r1, r2
 6698 0578 1A46     		mov	r2, r3
 6699 057a FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 372:../utils/monochromedisplaypainter.cpp **** 					_setPixel( IMonochromeDisplay::Point( Fix16( centerX + x + 0.0 ) ,
 373:../utils/monochromedisplaypainter.cpp **** 														  Fix16( centerY - y + 0.0 ) ) , stroke );
 6700              		.loc 1 373 0 discriminator 1
 6701 057e 07F1C401 		add	r1, r7, #196
 6702 0582 07F12802 		add	r2, r7, #40
 6703 0586 07F12003 		add	r3, r7, #32
 6704 058a 0846     		mov	r0, r1
 6705 058c 1146     		mov	r1, r2
 6706 058e 1A46     		mov	r2, r3
 6707 0590 FFF7FEFF 		bl	_ZNK5Fix16plERKS_
 6708 0594 07F1C002 		add	r2, r7, #192
 6709 0598 07F1C403 		add	r3, r7, #196
 6710 059c 1046     		mov	r0, r2
 6711 059e 1946     		mov	r1, r3
 6712 05a0 4FF00002 		mov	r2, #0
 6713 05a4 4FF00003 		mov	r3, #0
 6714 05a8 FFF7FEFF 		bl	_ZNK5Fix16plEd
 6715 05ac 07F1C003 		add	r3, r7, #192
 6716 05b0 1846     		mov	r0, r3
 6717 05b2 FFF7FEFF 		bl	_ZN5Fix16cviEv
 6718 05b6 0446     		mov	r4, r0
 6719 05b8 07F1CC01 		add	r1, r7, #204
 6720 05bc 07F12402 		add	r2, r7, #36
 6721 05c0 07F11C03 		add	r3, r7, #28
 6722 05c4 0846     		mov	r0, r1
 6723 05c6 1146     		mov	r1, r2
 6724 05c8 1A46     		mov	r2, r3
 6725 05ca FFF7FEFF 		bl	_ZNK5Fix16miERKS_
 6726 05ce 07F1C802 		add	r2, r7, #200
 6727 05d2 07F1CC03 		add	r3, r7, #204
 6728 05d6 1046     		mov	r0, r2
 6729 05d8 1946     		mov	r1, r3
 6730 05da 4FF00002 		mov	r2, #0
 6731 05de 4FF00003 		mov	r3, #0
 6732 05e2 FFF7FEFF 		bl	_ZNK5Fix16plEd
 6733 05e6 07F1C803 		add	r3, r7, #200
 6734 05ea 1846     		mov	r0, r3
 6735 05ec FFF7FEFF 		bl	_ZN5Fix16cviEv
 6736 05f0 0346     		mov	r3, r0
 6737 05f2 07F1B802 		add	r2, r7, #184
 6738 05f6 1046     		mov	r0, r2
 6739 05f8 2146     		mov	r1, r4
 6740 05fa 1A46     		mov	r2, r3
 6741 05fc FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6742 0600 07F10C01 		add	r1, r7, #12
 6743 0604 07F1B802 		add	r2, r7, #184
 6744 0608 07F10403 		add	r3, r7, #4
 6745 060c 03F1FF33 		add	r3, r3, #-1
 6746 0610 93F90030 		ldrsb	r3, [r3, #0]
 6747 0614 0868     		ldr	r0, [r1, #0]
 6748 0616 1146     		mov	r1, r2
 6749 0618 1A46     		mov	r2, r3
 6750 061a FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 374:../utils/monochromedisplaypainter.cpp **** 					_setPixel( IMonochromeDisplay::Point( Fix16( centerX - x + 0.0 ) ,
 375:../utils/monochromedisplaypainter.cpp **** 														  Fix16( centerY - y + 0.0 ) ) , stroke );
 6751              		.loc 1 375 0 discriminator 1
 6752 061e 07F1DC01 		add	r1, r7, #220
 6753 0622 07F12802 		add	r2, r7, #40
 6754 0626 07F12003 		add	r3, r7, #32
 6755 062a 0846     		mov	r0, r1
 6756 062c 1146     		mov	r1, r2
 6757 062e 1A46     		mov	r2, r3
 6758 0630 FFF7FEFF 		bl	_ZNK5Fix16miERKS_
 6759 0634 07F1D802 		add	r2, r7, #216
 6760 0638 07F1DC03 		add	r3, r7, #220
 6761 063c 1046     		mov	r0, r2
 6762 063e 1946     		mov	r1, r3
 6763 0640 4FF00002 		mov	r2, #0
 6764 0644 4FF00003 		mov	r3, #0
 6765 0648 FFF7FEFF 		bl	_ZNK5Fix16plEd
 6766 064c 07F1D803 		add	r3, r7, #216
 6767 0650 1846     		mov	r0, r3
 6768 0652 FFF7FEFF 		bl	_ZN5Fix16cviEv
 6769 0656 0446     		mov	r4, r0
 6770 0658 07F1E401 		add	r1, r7, #228
 6771 065c 07F12402 		add	r2, r7, #36
 6772 0660 07F11C03 		add	r3, r7, #28
 6773 0664 0846     		mov	r0, r1
 6774 0666 1146     		mov	r1, r2
 6775 0668 1A46     		mov	r2, r3
 6776 066a FFF7FEFF 		bl	_ZNK5Fix16miERKS_
 6777 066e 07F1E002 		add	r2, r7, #224
 6778 0672 07F1E403 		add	r3, r7, #228
 6779 0676 1046     		mov	r0, r2
 6780 0678 1946     		mov	r1, r3
 6781 067a 4FF00002 		mov	r2, #0
 6782 067e 4FF00003 		mov	r3, #0
 6783 0682 FFF7FEFF 		bl	_ZNK5Fix16plEd
 6784 0686 07F1E003 		add	r3, r7, #224
 6785 068a 1846     		mov	r0, r3
 6786 068c FFF7FEFF 		bl	_ZN5Fix16cviEv
 6787 0690 0346     		mov	r3, r0
 6788 0692 07F1D002 		add	r2, r7, #208
 6789 0696 1046     		mov	r0, r2
 6790 0698 2146     		mov	r1, r4
 6791 069a 1A46     		mov	r2, r3
 6792 069c FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6793 06a0 07F10C01 		add	r1, r7, #12
 6794 06a4 07F1D002 		add	r2, r7, #208
 6795 06a8 07F10403 		add	r3, r7, #4
 6796 06ac 03F1FF33 		add	r3, r3, #-1
 6797 06b0 93F90030 		ldrsb	r3, [r3, #0]
 6798 06b4 0868     		ldr	r0, [r1, #0]
 6799 06b6 1146     		mov	r1, r2
 6800 06b8 1A46     		mov	r2, r3
 6801 06ba FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 376:../utils/monochromedisplaypainter.cpp **** 					_setPixel( IMonochromeDisplay::Point( Fix16( centerX - x + 0.0 ) ,
 377:../utils/monochromedisplaypainter.cpp **** 														  Fix16( centerY + y + 0.0 ) ) , stroke );
 6802              		.loc 1 377 0 discriminator 1
 6803 06be 07F1F401 		add	r1, r7, #244
 6804 06c2 07F12802 		add	r2, r7, #40
 6805 06c6 07F12003 		add	r3, r7, #32
 6806 06ca 0846     		mov	r0, r1
 6807 06cc 1146     		mov	r1, r2
 6808 06ce 1A46     		mov	r2, r3
 6809 06d0 FFF7FEFF 		bl	_ZNK5Fix16miERKS_
 6810 06d4 07F1F002 		add	r2, r7, #240
 6811 06d8 07F1F403 		add	r3, r7, #244
 6812 06dc 1046     		mov	r0, r2
 6813 06de 1946     		mov	r1, r3
 6814 06e0 4FF00002 		mov	r2, #0
 6815 06e4 4FF00003 		mov	r3, #0
 6816 06e8 FFF7FEFF 		bl	_ZNK5Fix16plEd
 6817 06ec 07F1F003 		add	r3, r7, #240
 6818 06f0 1846     		mov	r0, r3
 6819 06f2 FFF7FEFF 		bl	_ZN5Fix16cviEv
 6820 06f6 0446     		mov	r4, r0
 6821 06f8 07F1FC01 		add	r1, r7, #252
 6822 06fc 07F12402 		add	r2, r7, #36
 6823 0700 07F11C03 		add	r3, r7, #28
 6824 0704 0846     		mov	r0, r1
 6825 0706 1146     		mov	r1, r2
 6826 0708 1A46     		mov	r2, r3
 6827 070a FFF7FEFF 		bl	_ZNK5Fix16plERKS_
 6828 070e 07F1F802 		add	r2, r7, #248
 6829 0712 07F1FC03 		add	r3, r7, #252
 6830 0716 1046     		mov	r0, r2
 6831 0718 1946     		mov	r1, r3
 6832 071a 4FF00002 		mov	r2, #0
 6833 071e 4FF00003 		mov	r3, #0
 6834 0722 FFF7FEFF 		bl	_ZNK5Fix16plEd
 6835 0726 07F1F803 		add	r3, r7, #248
 6836 072a 1846     		mov	r0, r3
 6837 072c FFF7FEFF 		bl	_ZN5Fix16cviEv
 6838 0730 0346     		mov	r3, r0
 6839 0732 07F1E802 		add	r2, r7, #232
 6840 0736 1046     		mov	r0, r2
 6841 0738 2146     		mov	r1, r4
 6842 073a 1A46     		mov	r2, r3
 6843 073c FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 6844 0740 07F10C01 		add	r1, r7, #12
 6845 0744 07F1E802 		add	r2, r7, #232
 6846 0748 07F10403 		add	r3, r7, #4
 6847 074c 03F1FF33 		add	r3, r3, #-1
 6848 0750 93F90030 		ldrsb	r3, [r3, #0]
 6849 0754 0868     		ldr	r0, [r1, #0]
 6850 0756 1146     		mov	r1, r2
 6851 0758 1A46     		mov	r2, r3
 6852 075a FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 378:../utils/monochromedisplaypainter.cpp **** 
 379:../utils/monochromedisplaypainter.cpp **** 					angle += 0.05;
 6853              		.loc 1 379 0 discriminator 1
 6854 075e 07F11803 		add	r3, r7, #24
 6855 0762 1846     		mov	r0, r3
 6856 0764 34A3     		adr	r3, .L119
 6857 0766 D3E90023 		ldrd	r2, [r3]
 6858 076a FFF7FEFF 		bl	_ZN5Fix16pLEd
 380:../utils/monochromedisplaypainter.cpp **** 					x = ( radiusX * angle.cos() );
 6859              		.loc 1 380 0 discriminator 1
 6860 076e 07F58272 		add	r2, r7, #260
 6861 0772 07F11803 		add	r3, r7, #24
 6862 0776 1046     		mov	r0, r2
 6863 0778 1946     		mov	r1, r3
 6864 077a FFF7FEFF 		bl	_ZN5Fix163cosEv
 6865 077e 07F58071 		add	r1, r7, #256
 6866 0782 07F13002 		add	r2, r7, #48
 6867 0786 07F58273 		add	r3, r7, #260
 6868 078a 0846     		mov	r0, r1
 6869 078c 1146     		mov	r1, r2
 6870 078e 1A46     		mov	r2, r3
 6871 0790 FFF7FEFF 		bl	_ZNK5Fix16mlERKS_
 6872 0794 07F12002 		add	r2, r7, #32
 6873 0798 07F58073 		add	r3, r7, #256
 6874 079c 1046     		mov	r0, r2
 6875 079e 1946     		mov	r1, r3
 6876 07a0 FFF7FEFF 		bl	_ZN5Fix16aSERKS_
 381:../utils/monochromedisplaypainter.cpp **** 					y = ( radiusY * angle.sin() );
 6877              		.loc 1 381 0 discriminator 1
 6878 07a4 07F58672 		add	r2, r7, #268
 6879 07a8 07F11803 		add	r3, r7, #24
 6880 07ac 1046     		mov	r0, r2
 6881 07ae 1946     		mov	r1, r3
 6882 07b0 FFF7FEFF 		bl	_ZN5Fix163sinEv
 6883 07b4 07F58471 		add	r1, r7, #264
 6884 07b8 07F12C02 		add	r2, r7, #44
 6885 07bc 07F58673 		add	r3, r7, #268
 6886 07c0 0846     		mov	r0, r1
 6887 07c2 1146     		mov	r1, r2
 6888 07c4 1A46     		mov	r2, r3
 6889 07c6 FFF7FEFF 		bl	_ZNK5Fix16mlERKS_
 6890 07ca 07F11C02 		add	r2, r7, #28
 6891 07ce 07F58473 		add	r3, r7, #264
 6892 07d2 1046     		mov	r0, r2
 6893 07d4 1946     		mov	r1, r3
 6894 07d6 FFF7FEFF 		bl	_ZN5Fix16aSERKS_
 382:../utils/monochromedisplaypainter.cpp **** 
 383:../utils/monochromedisplaypainter.cpp **** 				} while( angle <= range );
 6895              		.loc 1 383 0 discriminator 1
 6896 07da 07F11802 		add	r2, r7, #24
 6897 07de 07F11403 		add	r3, r7, #20
 6898 07e2 1046     		mov	r0, r2
 6899 07e4 1946     		mov	r1, r3
 6900 07e6 FFF7FEFF 		bl	_ZNK5Fix16leERKS_
 6901 07ea 0346     		mov	r3, r0
 368:../utils/monochromedisplaypainter.cpp **** 				do
 6902              		.loc 1 368 0 discriminator 1
 6903 07ec 002B     		cmp	r3, #0
 6904 07ee 0CBF     		ite	eq
 6905 07f0 0023     		moveq	r3, #0
 6906 07f2 0123     		movne	r3, #1
 6907 07f4 DBB2     		uxtb	r3, r3
 6908 07f6 002B     		cmp	r3, #0
 6909 07f8 7FF471AE 		bne	.L118
 6910              	.L114:
 6911              	.LBE46:
 6912              	.LBE45:
 6913              	.LBE44:
 6914              	.LBE43:
 384:../utils/monochromedisplaypainter.cpp **** 			}
 385:../utils/monochromedisplaypainter.cpp **** 		}
 386:../utils/monochromedisplaypainter.cpp **** 
 387:../utils/monochromedisplaypainter.cpp **** 		// Finally sync screen.
 388:../utils/monochromedisplaypainter.cpp **** 		if ( _autoUpdate )
 6915              		.loc 1 388 0
 6916 07fc 07F10C03 		add	r3, r7, #12
 6917 0800 1B68     		ldr	r3, [r3, #0]
 6918 0802 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 6919 0804 002B     		cmp	r3, #0
 6920 0806 13D0     		beq	.L102
 389:../utils/monochromedisplaypainter.cpp **** 			_syncDisplay( topLeft.y , topLeft.y + size.height );
 6921              		.loc 1 389 0
 6922 0808 07F10803 		add	r3, r7, #8
 6923 080c 1B68     		ldr	r3, [r3, #0]
 6924 080e 5A68     		ldr	r2, [r3, #4]
 6925 0810 07F10803 		add	r3, r7, #8
 6926 0814 1B68     		ldr	r3, [r3, #0]
 6927 0816 5968     		ldr	r1, [r3, #4]
 6928 0818 07F10403 		add	r3, r7, #4
 6929 081c 1B68     		ldr	r3, [r3, #0]
 6930 081e 5B68     		ldr	r3, [r3, #4]
 6931 0820 CB18     		adds	r3, r1, r3
 6932 0822 07F10C01 		add	r1, r7, #12
 6933 0826 0868     		ldr	r0, [r1, #0]
 6934 0828 1146     		mov	r1, r2
 6935 082a 1A46     		mov	r2, r3
 6936 082c FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter12_syncDisplayEii
 6937              	.L102:
 6938              	.LBE35:
 6939              	.LBE34:
 6940              	.LBE33:
 390:../utils/monochromedisplaypainter.cpp **** 	}
 391:../utils/monochromedisplaypainter.cpp **** }
 6941              		.loc 1 391 0
 6942 0830 07F58A77 		add	r7, r7, #276
 6943 0834 BD46     		mov	sp, r7
 6944 0836 90BD     		pop	{r4, r7, pc}
 6945              	.L120:
 6946              		.align	3
 6947              	.L119:
 6948 0838 9A999999 		.word	-1717986918
 6949 083c 9999A93F 		.word	1068079513
 6950              		.cfi_endproc
 6951              	.LFE910:
 6953              		.section	.text._ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10Pixe
 6954              		.align	2
 6955              		.global	_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE
 6956              		.thumb
 6957              		.thumb_func
 6959              	_ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE:
 6960              	.LFB911:
 392:../utils/monochromedisplaypainter.cpp **** 
 393:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::drawText( const IMonochromeDisplay::Point & topLeft ,
 394:../utils/monochromedisplaypainter.cpp **** 			   	   	   	   	   	   	     const std::string & text ,
 395:../utils/monochromedisplaypainter.cpp **** 			   	   	   	   	   	   	     IMonochromeDisplay::PixelColor color )
 396:../utils/monochromedisplaypainter.cpp **** {
 6961              		.loc 1 396 0
 6962              		.cfi_startproc
 6963              		@ args = 0, pretend = 0, frame = 56
 6964              		@ frame_needed = 1, uses_anonymous_args = 0
 6965 0000 90B5     		push	{r4, r7, lr}
 6966              	.LCFI126:
 6967              		.cfi_def_cfa_offset 12
 6968 0002 8FB0     		sub	sp, sp, #60
 6969              	.LCFI127:
 6970              		.cfi_def_cfa_offset 72
 6971 0004 00AF     		add	r7, sp, #0
 6972              		.cfi_offset 14, -4
 6973              		.cfi_offset 7, -8
 6974              		.cfi_offset 4, -12
 6975              	.LCFI128:
 6976              		.cfi_def_cfa_register 7
 6977 0006 F860     		str	r0, [r7, #12]
 6978 0008 B960     		str	r1, [r7, #8]
 6979 000a 7A60     		str	r2, [r7, #4]
 6980 000c FB70     		strb	r3, [r7, #3]
 6981              	.LBB47:
 397:../utils/monochromedisplaypainter.cpp **** 	assert( _display );
 6982              		.loc 1 397 0
 6983 000e FB68     		ldr	r3, [r7, #12]
 6984 0010 5B68     		ldr	r3, [r3, #4]
 6985 0012 002B     		cmp	r3, #0
 6986 0014 0FD1     		bne	.L122
 6987              		.loc 1 397 0 is_stmt 0 discriminator 1
 6988 0016 40F20000 		movw	r0, #:lower16:.LC0
 6989 001a C0F20000 		movt	r0, #:upper16:.LC0
 6990 001e 40F28D11 		movw	r1, #397
 6991 0022 40F20002 		movw	r2, #:lower16:_ZZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_1
 6992 0026 C0F20002 		movt	r2, #:upper16:_ZZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_1
 6993 002a 40F20003 		movw	r3, #:lower16:.LC1
 6994 002e C0F20003 		movt	r3, #:upper16:.LC1
 6995 0032 FFF7FEFF 		bl	__assert_func
 6996              	.L122:
 6997              	.LBB48:
 398:../utils/monochromedisplaypainter.cpp **** 	if ( _display )
 6998              		.loc 1 398 0 is_stmt 1
 6999 0036 FB68     		ldr	r3, [r7, #12]
 7000 0038 5B68     		ldr	r3, [r3, #4]
 7001 003a 002B     		cmp	r3, #0
 7002 003c 00F0E380 		beq	.L121
 7003              	.LBB49:
 7004              	.LBB50:
 399:../utils/monochromedisplaypainter.cpp **** 	{
 400:../utils/monochromedisplaypainter.cpp **** 		// Well we need some text.
 401:../utils/monochromedisplaypainter.cpp **** 		if ( !text.empty() )
 7005              		.loc 1 401 0
 7006 0040 7868     		ldr	r0, [r7, #4]
 7007 0042 FFF7FEFF 		bl	_ZNKSs5emptyEv
 7008 0046 0346     		mov	r3, r0
 7009 0048 83F00103 		eor	r3, r3, #1
 7010 004c DBB2     		uxtb	r3, r3
 7011 004e 002B     		cmp	r3, #0
 7012 0050 00F0D980 		beq	.L121
 7013              	.LBB51:
 7014              	.LBB52:
 402:../utils/monochromedisplaypainter.cpp **** 		{
 403:../utils/monochromedisplaypainter.cpp **** 			// Try first the accelerated method.
 404:../utils/monochromedisplaypainter.cpp **** 			if ( _accelMethods.drawTextAccelerated && !_offscreenBitmap )
 7015              		.loc 1 404 0
 7016 0054 FB68     		ldr	r3, [r7, #12]
 7017 0056 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 7018 0058 23F07F03 		bic	r3, r3, #127
 7019 005c DBB2     		uxtb	r3, r3
 7020 005e 002B     		cmp	r3, #0
 7021 0060 12D0     		beq	.L124
 7022              		.loc 1 404 0 is_stmt 0 discriminator 1
 7023 0062 FB68     		ldr	r3, [r7, #12]
 7024 0064 DB68     		ldr	r3, [r3, #12]
 7025 0066 002B     		cmp	r3, #0
 7026 0068 0ED1     		bne	.L124
 405:../utils/monochromedisplaypainter.cpp **** 			{
 406:../utils/monochromedisplaypainter.cpp **** 				_display->drawText( topLeft , text , color );
 7027              		.loc 1 406 0 is_stmt 1
 7028 006a FB68     		ldr	r3, [r7, #12]
 7029 006c 5B68     		ldr	r3, [r3, #4]
 7030 006e 1B68     		ldr	r3, [r3, #0]
 7031 0070 03F14403 		add	r3, r3, #68
 7032 0074 1C68     		ldr	r4, [r3, #0]
 7033 0076 FB68     		ldr	r3, [r7, #12]
 7034 0078 5A68     		ldr	r2, [r3, #4]
 7035 007a 97F90330 		ldrsb	r3, [r7, #3]
 7036 007e 1046     		mov	r0, r2
 7037 0080 B968     		ldr	r1, [r7, #8]
 7038 0082 7A68     		ldr	r2, [r7, #4]
 7039 0084 A047     		blx	r4
 7040 0086 BEE0     		b	.L121
 7041              	.L124:
 7042              	.LBB53:
 407:../utils/monochromedisplaypainter.cpp **** 			}
 408:../utils/monochromedisplaypainter.cpp **** 			else
 409:../utils/monochromedisplaypainter.cpp **** 			{
 410:../utils/monochromedisplaypainter.cpp **** 				// If memory copy acceleration is supported, ensure that the local buffer is ready.
 411:../utils/monochromedisplaypainter.cpp **** 				if ( _accelMethods.memoryCopyAccelerated )
 7043              		.loc 1 411 0
 7044 0088 FB68     		ldr	r3, [r7, #12]
 7045 008a 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 7046 008c 03F00203 		and	r3, r3, #2
 7047 0090 DBB2     		uxtb	r3, r3
 7048 0092 002B     		cmp	r3, #0
 7049 0094 04D0     		beq	.L126
 412:../utils/monochromedisplaypainter.cpp **** 					_createOffsetBitmap( true );
 7050              		.loc 1 412 0
 7051 0096 F868     		ldr	r0, [r7, #12]
 7052 0098 4FF00101 		mov	r1, #1
 7053 009c FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 7054              	.L126:
 413:../utils/monochromedisplaypainter.cpp **** 
 414:../utils/monochromedisplaypainter.cpp **** 				IMonochromeDisplay::Point p = topLeft;
 7055              		.loc 1 414 0
 7056 00a0 BA68     		ldr	r2, [r7, #8]
 7057 00a2 07F11003 		add	r3, r7, #16
 7058 00a6 92E80300 		ldmia	r2, {r0, r1}
 7059 00aa 83E80300 		stmia	r3, {r0, r1}
 415:../utils/monochromedisplaypainter.cpp **** 				unsigned int textPosition = 0;
 7060              		.loc 1 415 0
 7061 00ae 4FF00003 		mov	r3, #0
 7062 00b2 7B63     		str	r3, [r7, #52]
 416:../utils/monochromedisplaypainter.cpp **** 
 417:../utils/monochromedisplaypainter.cpp **** 				// Draw the text.
 418:../utils/monochromedisplaypainter.cpp **** 				while( p.x <= ( _display->resolution().width - 5 ) && textPosition < text.size() )
 7063              		.loc 1 418 0
 7064 00b4 76E0     		b	.L127
 7065              	.L138:
 7066              	.LBB54:
 419:../utils/monochromedisplaypainter.cpp **** 				{
 420:../utils/monochromedisplaypainter.cpp **** 					unsigned char character = text[textPosition];
 7067              		.loc 1 420 0
 7068 00b6 7868     		ldr	r0, [r7, #4]
 7069 00b8 796B     		ldr	r1, [r7, #52]
 7070 00ba FFF7FEFF 		bl	_ZNKSsixEj
 7071 00be 0346     		mov	r3, r0
 7072 00c0 1B78     		ldrb	r3, [r3, #0]
 7073 00c2 87F83330 		strb	r3, [r7, #51]
 421:../utils/monochromedisplaypainter.cpp **** 					if ( character > 223 ) character -= 86;
 7074              		.loc 1 421 0
 7075 00c6 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 7076 00ca DF2B     		cmp	r3, #223
 7077 00cc 05D9     		bls	.L128
 7078              		.loc 1 421 0 is_stmt 0 discriminator 1
 7079 00ce 97F83330 		ldrb	r3, [r7, #51]
 7080 00d2 A3F15603 		sub	r3, r3, #86
 7081 00d6 87F83330 		strb	r3, [r7, #51]
 7082              	.L128:
 422:../utils/monochromedisplaypainter.cpp **** 					if ( character < 32 || character > 177 ) character = ' ';
 7083              		.loc 1 422 0 is_stmt 1
 7084 00da 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 7085 00de 1F2B     		cmp	r3, #31
 7086 00e0 03D9     		bls	.L129
 7087              		.loc 1 422 0 is_stmt 0 discriminator 2
 7088 00e2 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 7089 00e6 B12B     		cmp	r3, #177
 7090 00e8 03D9     		bls	.L130
 7091              	.L129:
 7092              		.loc 1 422 0 discriminator 1
 7093 00ea 4FF02003 		mov	r3, #32
 7094 00ee 87F83330 		strb	r3, [r7, #51]
 7095              	.L130:
 7096              	.LBB55:
 423:../utils/monochromedisplaypainter.cpp **** 
 424:../utils/monochromedisplaypainter.cpp **** 					for ( int x = 0 ; x < 5 ; ++x )
 7097              		.loc 1 424 0 is_stmt 1
 7098 00f2 4FF00003 		mov	r3, #0
 7099 00f6 FB62     		str	r3, [r7, #44]
 7100 00f8 44E0     		b	.L131
 7101              	.L135:
 7102              	.LBB56:
 7103              	.LBB57:
 425:../utils/monochromedisplaypainter.cpp **** 						for ( int y = 0 ; y < 7 ; ++y )
 7104              		.loc 1 425 0
 7105 00fa 4FF00003 		mov	r3, #0
 7106 00fe BB62     		str	r3, [r7, #40]
 7107 0100 34E0     		b	.L132
 7108              	.L134:
 426:../utils/monochromedisplaypainter.cpp **** 							if ( FontLookup[character - 32][x] & ( 1 << y ) )
 7109              		.loc 1 426 0
 7110 0102 97F83330 		ldrb	r3, [r7, #51]	@ zero_extendqisi2
 7111 0106 A3F12001 		sub	r1, r3, #32
 7112 010a 40F20002 		movw	r2, #:lower16:_ZN24MonochromeDisplayPainter10FontLookupE
 7113 010e C0F20002 		movt	r2, #:upper16:_ZN24MonochromeDisplayPainter10FontLookupE
 7114 0112 0B46     		mov	r3, r1
 7115 0114 4FEA4303 		lsl	r3, r3, #1
 7116 0118 5B18     		adds	r3, r3, r1
 7117 011a 4FEA4303 		lsl	r3, r3, #1
 7118 011e F96A     		ldr	r1, [r7, #44]
 7119 0120 5B18     		adds	r3, r3, r1
 7120 0122 D318     		adds	r3, r2, r3
 7121 0124 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7122 0126 1A46     		mov	r2, r3
 7123 0128 BB6A     		ldr	r3, [r7, #40]
 7124 012a 42FA03F3 		asr	r3, r2, r3
 7125 012e 03F00103 		and	r3, r3, #1
 7126 0132 DBB2     		uxtb	r3, r3
 7127 0134 002B     		cmp	r3, #0
 7128 0136 15D0     		beq	.L133
 427:../utils/monochromedisplaypainter.cpp **** 								_setPixel( IMonochromeDisplay::Point( p.x + x , p.y + y ) , color );
 7129              		.loc 1 427 0
 7130 0138 3A69     		ldr	r2, [r7, #16]
 7131 013a FB6A     		ldr	r3, [r7, #44]
 7132 013c D218     		adds	r2, r2, r3
 7133 013e 7969     		ldr	r1, [r7, #20]
 7134 0140 BB6A     		ldr	r3, [r7, #40]
 7135 0142 CB18     		adds	r3, r1, r3
 7136 0144 07F12001 		add	r1, r7, #32
 7137 0148 0846     		mov	r0, r1
 7138 014a 1146     		mov	r1, r2
 7139 014c 1A46     		mov	r2, r3
 7140 014e FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 7141 0152 07F12002 		add	r2, r7, #32
 7142 0156 97F90330 		ldrsb	r3, [r7, #3]
 7143 015a F868     		ldr	r0, [r7, #12]
 7144 015c 1146     		mov	r1, r2
 7145 015e 1A46     		mov	r2, r3
 7146 0160 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 7147              	.L133:
 425:../utils/monochromedisplaypainter.cpp **** 						for ( int y = 0 ; y < 7 ; ++y )
 7148              		.loc 1 425 0
 7149 0164 BB6A     		ldr	r3, [r7, #40]
 7150 0166 03F10103 		add	r3, r3, #1
 7151 016a BB62     		str	r3, [r7, #40]
 7152              	.L132:
 425:../utils/monochromedisplaypainter.cpp **** 						for ( int y = 0 ; y < 7 ; ++y )
 7153              		.loc 1 425 0 is_stmt 0 discriminator 1
 7154 016c BB6A     		ldr	r3, [r7, #40]
 7155 016e 062B     		cmp	r3, #6
 7156 0170 CCBF     		ite	gt
 7157 0172 0023     		movgt	r3, #0
 7158 0174 0123     		movle	r3, #1
 7159 0176 DBB2     		uxtb	r3, r3
 7160 0178 002B     		cmp	r3, #0
 7161 017a C2D1     		bne	.L134
 7162              	.LBE57:
 7163              	.LBE56:
 424:../utils/monochromedisplaypainter.cpp **** 					for ( int x = 0 ; x < 5 ; ++x )
 7164              		.loc 1 424 0 is_stmt 1
 7165 017c FB6A     		ldr	r3, [r7, #44]
 7166 017e 03F10103 		add	r3, r3, #1
 7167 0182 FB62     		str	r3, [r7, #44]
 7168              	.L131:
 424:../utils/monochromedisplaypainter.cpp **** 					for ( int x = 0 ; x < 5 ; ++x )
 7169              		.loc 1 424 0 is_stmt 0 discriminator 1
 7170 0184 FB6A     		ldr	r3, [r7, #44]
 7171 0186 042B     		cmp	r3, #4
 7172 0188 CCBF     		ite	gt
 7173 018a 0023     		movgt	r3, #0
 7174 018c 0123     		movle	r3, #1
 7175 018e DBB2     		uxtb	r3, r3
 7176 0190 002B     		cmp	r3, #0
 7177 0192 B2D1     		bne	.L135
 7178              	.LBE55:
 428:../utils/monochromedisplaypainter.cpp **** 
 429:../utils/monochromedisplaypainter.cpp **** 					textPosition++;
 7179              		.loc 1 429 0 is_stmt 1
 7180 0194 7B6B     		ldr	r3, [r7, #52]
 7181 0196 03F10103 		add	r3, r3, #1
 7182 019a 7B63     		str	r3, [r7, #52]
 430:../utils/monochromedisplaypainter.cpp **** 					p.x += 6;
 7183              		.loc 1 430 0
 7184 019c 3B69     		ldr	r3, [r7, #16]
 7185 019e 03F10603 		add	r3, r3, #6
 7186 01a2 3B61     		str	r3, [r7, #16]
 7187              	.L127:
 7188              	.LBE54:
 418:../utils/monochromedisplaypainter.cpp **** 				while( p.x <= ( _display->resolution().width - 5 ) && textPosition < text.size() )
 7189              		.loc 1 418 0 discriminator 1
 7190 01a4 3C69     		ldr	r4, [r7, #16]
 7191 01a6 FB68     		ldr	r3, [r7, #12]
 7192 01a8 5B68     		ldr	r3, [r3, #4]
 7193 01aa 1B68     		ldr	r3, [r3, #0]
 7194 01ac 03F10803 		add	r3, r3, #8
 7195 01b0 1B68     		ldr	r3, [r3, #0]
 7196 01b2 FA68     		ldr	r2, [r7, #12]
 7197 01b4 5268     		ldr	r2, [r2, #4]
 7198 01b6 07F11801 		add	r1, r7, #24
 7199 01ba 0846     		mov	r0, r1
 7200 01bc 1146     		mov	r1, r2
 7201 01be 9847     		blx	r3
 7202 01c0 BB69     		ldr	r3, [r7, #24]
 7203 01c2 A3F10503 		sub	r3, r3, #5
 7204 01c6 9C42     		cmp	r4, r3
 7205 01c8 09DC     		bgt	.L136
 418:../utils/monochromedisplaypainter.cpp **** 				while( p.x <= ( _display->resolution().width - 5 ) && textPosition < text.size() )
 7206              		.loc 1 418 0 is_stmt 0 discriminator 2
 7207 01ca 7868     		ldr	r0, [r7, #4]
 7208 01cc FFF7FEFF 		bl	_ZNKSs4sizeEv
 7209 01d0 0246     		mov	r2, r0
 7210 01d2 7B6B     		ldr	r3, [r7, #52]
 7211 01d4 9A42     		cmp	r2, r3
 7212 01d6 02D9     		bls	.L136
 418:../utils/monochromedisplaypainter.cpp **** 				while( p.x <= ( _display->resolution().width - 5 ) && textPosition < text.size() )
 7213              		.loc 1 418 0 discriminator 4
 7214 01d8 4FF00103 		mov	r3, #1
 7215 01dc 01E0     		b	.L137
 7216              	.L136:
 418:../utils/monochromedisplaypainter.cpp **** 				while( p.x <= ( _display->resolution().width - 5 ) && textPosition < text.size() )
 7217              		.loc 1 418 0 discriminator 3
 7218 01de 4FF00003 		mov	r3, #0
 7219              	.L137:
 418:../utils/monochromedisplaypainter.cpp **** 				while( p.x <= ( _display->resolution().width - 5 ) && textPosition < text.size() )
 7220              		.loc 1 418 0 discriminator 5
 7221 01e2 002B     		cmp	r3, #0
 7222 01e4 7FF467AF 		bne	.L138
 431:../utils/monochromedisplaypainter.cpp **** 				}
 432:../utils/monochromedisplaypainter.cpp **** 
 433:../utils/monochromedisplaypainter.cpp **** 				// Finally flush the data to the display.
 434:../utils/monochromedisplaypainter.cpp **** 				if ( _autoUpdate )
 7223              		.loc 1 434 0 is_stmt 1
 7224 01e8 FB68     		ldr	r3, [r7, #12]
 7225 01ea 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 7226 01ec 002B     		cmp	r3, #0
 7227 01ee 0AD0     		beq	.L121
 435:../utils/monochromedisplaypainter.cpp **** 					_syncDisplay( topLeft.y , topLeft.y + 7 );
 7228              		.loc 1 435 0
 7229 01f0 BB68     		ldr	r3, [r7, #8]
 7230 01f2 5A68     		ldr	r2, [r3, #4]
 7231 01f4 BB68     		ldr	r3, [r7, #8]
 7232 01f6 5B68     		ldr	r3, [r3, #4]
 7233 01f8 03F10703 		add	r3, r3, #7
 7234 01fc F868     		ldr	r0, [r7, #12]
 7235 01fe 1146     		mov	r1, r2
 7236 0200 1A46     		mov	r2, r3
 7237 0202 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter12_syncDisplayEii
 7238              	.L121:
 7239              	.LBE53:
 7240              	.LBE52:
 7241              	.LBE51:
 7242              	.LBE50:
 7243              	.LBE49:
 7244              	.LBE48:
 7245              	.LBE47:
 436:../utils/monochromedisplaypainter.cpp **** 			}
 437:../utils/monochromedisplaypainter.cpp **** 		}
 438:../utils/monochromedisplaypainter.cpp **** 	}
 439:../utils/monochromedisplaypainter.cpp **** }
 7246              		.loc 1 439 0
 7247 0206 07F13C07 		add	r7, r7, #60
 7248 020a BD46     		mov	sp, r7
 7249 020c 90BD     		pop	{r4, r7, pc}
 7250              		.cfi_endproc
 7251              	.LFE911:
 7253 020e 00BF     		.section	.text._ZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4Size
 7254              		.align	2
 7255              		.global	_ZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKh
 7256              		.thumb
 7257              		.thumb_func
 7259              	_ZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKh:
 7260              	.LFB912:
 440:../utils/monochromedisplaypainter.cpp **** 
 441:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::drawBitmap( const IMonochromeDisplay::Point & topLeft ,
 442:../utils/monochromedisplaypainter.cpp **** 				 	 	 	 	 	 	   const IMonochromeDisplay::Size & size ,
 443:../utils/monochromedisplaypainter.cpp **** 				 	 	 	 	 	 	   const uint8_t * const bitmap )
 444:../utils/monochromedisplaypainter.cpp **** {
 7261              		.loc 1 444 0
 7262              		.cfi_startproc
 7263              		@ args = 0, pretend = 0, frame = 40
 7264              		@ frame_needed = 1, uses_anonymous_args = 0
 7265 0000 80B5     		push	{r7, lr}
 7266              	.LCFI129:
 7267              		.cfi_def_cfa_offset 8
 7268 0002 8AB0     		sub	sp, sp, #40
 7269              	.LCFI130:
 7270              		.cfi_def_cfa_offset 48
 7271 0004 00AF     		add	r7, sp, #0
 7272              		.cfi_offset 14, -4
 7273              		.cfi_offset 7, -8
 7274              	.LCFI131:
 7275              		.cfi_def_cfa_register 7
 7276 0006 F860     		str	r0, [r7, #12]
 7277 0008 B960     		str	r1, [r7, #8]
 7278 000a 7A60     		str	r2, [r7, #4]
 7279 000c 3B60     		str	r3, [r7, #0]
 7280              	.LBB58:
 445:../utils/monochromedisplaypainter.cpp **** 	assert( _display );
 7281              		.loc 1 445 0
 7282 000e FB68     		ldr	r3, [r7, #12]
 7283 0010 5B68     		ldr	r3, [r3, #4]
 7284 0012 002B     		cmp	r3, #0
 7285 0014 0FD1     		bne	.L140
 7286              		.loc 1 445 0 is_stmt 0 discriminator 1
 7287 0016 40F20000 		movw	r0, #:lower16:.LC0
 7288 001a C0F20000 		movt	r0, #:upper16:.LC0
 7289 001e 40F2BD11 		movw	r1, #445
 7290 0022 40F20002 		movw	r2, #:lower16:_ZZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_
 7291 0026 C0F20002 		movt	r2, #:upper16:_ZZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_
 7292 002a 40F20003 		movw	r3, #:lower16:.LC1
 7293 002e C0F20003 		movt	r3, #:upper16:.LC1
 7294 0032 FFF7FEFF 		bl	__assert_func
 7295              	.L140:
 7296              	.LBB59:
 446:../utils/monochromedisplaypainter.cpp **** 	if ( _display )
 7297              		.loc 1 446 0 is_stmt 1
 7298 0036 FB68     		ldr	r3, [r7, #12]
 7299 0038 5B68     		ldr	r3, [r3, #4]
 7300 003a 002B     		cmp	r3, #0
 7301 003c 6CD0     		beq	.L139
 7302              	.LBB60:
 447:../utils/monochromedisplaypainter.cpp **** 	{
 448:../utils/monochromedisplaypainter.cpp **** 		// If memory copy acceleration is supported, ensure that the local buffer is ready.
 449:../utils/monochromedisplaypainter.cpp **** 		if ( _accelMethods.memoryCopyAccelerated )
 7303              		.loc 1 449 0
 7304 003e FB68     		ldr	r3, [r7, #12]
 7305 0040 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 7306 0042 03F00203 		and	r3, r3, #2
 7307 0046 DBB2     		uxtb	r3, r3
 7308 0048 002B     		cmp	r3, #0
 7309 004a 04D0     		beq	.L142
 450:../utils/monochromedisplaypainter.cpp **** 			_createOffsetBitmap( true );
 7310              		.loc 1 450 0
 7311 004c F868     		ldr	r0, [r7, #12]
 7312 004e 4FF00101 		mov	r1, #1
 7313 0052 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 7314              	.L142:
 7315              	.LBB61:
 451:../utils/monochromedisplaypainter.cpp **** 
 452:../utils/monochromedisplaypainter.cpp **** 		for ( int x = 0 ; x < size.width ; ++x )
 7316              		.loc 1 452 0
 7317 0056 4FF00003 		mov	r3, #0
 7318 005a 7B62     		str	r3, [r7, #36]
 7319 005c 42E0     		b	.L143
 7320              	.L148:
 7321              	.LBB62:
 7322              	.LBB63:
 453:../utils/monochromedisplaypainter.cpp **** 			for ( int y = 0 ; y < size.height ; ++y )
 7323              		.loc 1 453 0
 7324 005e 4FF00003 		mov	r3, #0
 7325 0062 3B62     		str	r3, [r7, #32]
 7326 0064 30E0     		b	.L144
 7327              	.L147:
 7328              	.LBB64:
 454:../utils/monochromedisplaypainter.cpp **** 			{
 455:../utils/monochromedisplaypainter.cpp **** 				unsigned int bitIndex = x + y * size.width;
 7329              		.loc 1 455 0
 7330 0066 7B68     		ldr	r3, [r7, #4]
 7331 0068 1B68     		ldr	r3, [r3, #0]
 7332 006a 3A6A     		ldr	r2, [r7, #32]
 7333 006c 02FB03F2 		mul	r2, r2, r3
 7334 0070 7B6A     		ldr	r3, [r7, #36]
 7335 0072 D318     		adds	r3, r2, r3
 7336 0074 FB61     		str	r3, [r7, #28]
 456:../utils/monochromedisplaypainter.cpp **** 				_setPixel( IMonochromeDisplay::Point( x , y ) ,
 457:../utils/monochromedisplaypainter.cpp **** 						   *( bitmap + ( bitIndex / 8 ) ) & ( 1 << ( bitIndex % 8 ) ) ?
 458:../utils/monochromedisplaypainter.cpp **** 						   IMonochromeDisplay::Black :
 459:../utils/monochromedisplaypainter.cpp **** 						   IMonochromeDisplay::White );
 7337              		.loc 1 459 0
 7338 0076 07F11403 		add	r3, r7, #20
 7339 007a 1846     		mov	r0, r3
 7340 007c 796A     		ldr	r1, [r7, #36]
 7341 007e 3A6A     		ldr	r2, [r7, #32]
 7342 0080 FFF7FEFF 		bl	_ZN18IMonochromeDisplay5PointC1Eii
 457:../utils/monochromedisplaypainter.cpp **** 						   *( bitmap + ( bitIndex / 8 ) ) & ( 1 << ( bitIndex % 8 ) ) ?
 7343              		.loc 1 457 0
 7344 0084 FB69     		ldr	r3, [r7, #28]
 7345 0086 4FEAD303 		lsr	r3, r3, #3
 7346 008a 3A68     		ldr	r2, [r7, #0]
 7347 008c D318     		adds	r3, r2, r3
 7348              		.loc 1 459 0
 7349 008e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7350 0090 1A46     		mov	r2, r3
 7351 0092 FB69     		ldr	r3, [r7, #28]
 7352 0094 03F00703 		and	r3, r3, #7
 7353 0098 42FA03F3 		asr	r3, r2, r3
 7354 009c 03F00103 		and	r3, r3, #1
 7355 00a0 DBB2     		uxtb	r3, r3
 7356 00a2 002B     		cmp	r3, #0
 7357 00a4 02D0     		beq	.L145
 7358              		.loc 1 459 0 is_stmt 0 discriminator 1
 7359 00a6 4FF00103 		mov	r3, #1
 7360 00aa 01E0     		b	.L146
 7361              	.L145:
 7362              		.loc 1 459 0 discriminator 2
 7363 00ac 4FF0FF03 		mov	r3, #255
 7364              	.L146:
 7365              		.loc 1 459 0 discriminator 3
 7366 00b0 07F11402 		add	r2, r7, #20
 7367 00b4 5BB2     		sxtb	r3, r3
 7368 00b6 F868     		ldr	r0, [r7, #12]
 7369 00b8 1146     		mov	r1, r2
 7370 00ba 1A46     		mov	r2, r3
 7371 00bc FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 7372              	.LBE64:
 453:../utils/monochromedisplaypainter.cpp **** 			for ( int y = 0 ; y < size.height ; ++y )
 7373              		.loc 1 453 0 is_stmt 1 discriminator 3
 7374 00c0 3B6A     		ldr	r3, [r7, #32]
 7375 00c2 03F10103 		add	r3, r3, #1
 7376 00c6 3B62     		str	r3, [r7, #32]
 7377              	.L144:
 453:../utils/monochromedisplaypainter.cpp **** 			for ( int y = 0 ; y < size.height ; ++y )
 7378              		.loc 1 453 0 is_stmt 0 discriminator 1
 7379 00c8 7B68     		ldr	r3, [r7, #4]
 7380 00ca 5A68     		ldr	r2, [r3, #4]
 7381 00cc 3B6A     		ldr	r3, [r7, #32]
 7382 00ce 9A42     		cmp	r2, r3
 7383 00d0 D4BF     		ite	le
 7384 00d2 0023     		movle	r3, #0
 7385 00d4 0123     		movgt	r3, #1
 7386 00d6 DBB2     		uxtb	r3, r3
 7387 00d8 002B     		cmp	r3, #0
 7388 00da C4D1     		bne	.L147
 7389              	.LBE63:
 7390              	.LBE62:
 452:../utils/monochromedisplaypainter.cpp **** 		for ( int x = 0 ; x < size.width ; ++x )
 7391              		.loc 1 452 0 is_stmt 1
 7392 00dc 7B6A     		ldr	r3, [r7, #36]
 7393 00de 03F10103 		add	r3, r3, #1
 7394 00e2 7B62     		str	r3, [r7, #36]
 7395              	.L143:
 452:../utils/monochromedisplaypainter.cpp **** 		for ( int x = 0 ; x < size.width ; ++x )
 7396              		.loc 1 452 0 is_stmt 0 discriminator 1
 7397 00e4 7B68     		ldr	r3, [r7, #4]
 7398 00e6 1A68     		ldr	r2, [r3, #0]
 7399 00e8 7B6A     		ldr	r3, [r7, #36]
 7400 00ea 9A42     		cmp	r2, r3
 7401 00ec D4BF     		ite	le
 7402 00ee 0023     		movle	r3, #0
 7403 00f0 0123     		movgt	r3, #1
 7404 00f2 DBB2     		uxtb	r3, r3
 7405 00f4 002B     		cmp	r3, #0
 7406 00f6 B2D1     		bne	.L148
 7407              	.LBE61:
 460:../utils/monochromedisplaypainter.cpp **** 			}
 461:../utils/monochromedisplaypainter.cpp **** 
 462:../utils/monochromedisplaypainter.cpp **** 		// Finally flush the data to the display.
 463:../utils/monochromedisplaypainter.cpp **** 		if ( _autoUpdate )
 7408              		.loc 1 463 0 is_stmt 1
 7409 00f8 FB68     		ldr	r3, [r7, #12]
 7410 00fa 5B7C     		ldrb	r3, [r3, #17]	@ zero_extendqisi2
 7411 00fc 002B     		cmp	r3, #0
 7412 00fe 0BD0     		beq	.L139
 464:../utils/monochromedisplaypainter.cpp **** 			_syncDisplay( topLeft.y , topLeft.y + size.height );
 7413              		.loc 1 464 0
 7414 0100 BB68     		ldr	r3, [r7, #8]
 7415 0102 5A68     		ldr	r2, [r3, #4]
 7416 0104 BB68     		ldr	r3, [r7, #8]
 7417 0106 5968     		ldr	r1, [r3, #4]
 7418 0108 7B68     		ldr	r3, [r7, #4]
 7419 010a 5B68     		ldr	r3, [r3, #4]
 7420 010c CB18     		adds	r3, r1, r3
 7421 010e F868     		ldr	r0, [r7, #12]
 7422 0110 1146     		mov	r1, r2
 7423 0112 1A46     		mov	r2, r3
 7424 0114 FFF7FEFF 		bl	_ZN24MonochromeDisplayPainter12_syncDisplayEii
 7425              	.L139:
 7426              	.LBE60:
 7427              	.LBE59:
 7428              	.LBE58:
 465:../utils/monochromedisplaypainter.cpp **** 	}
 466:../utils/monochromedisplaypainter.cpp **** }
 7429              		.loc 1 466 0
 7430 0118 07F12807 		add	r7, r7, #40
 7431 011c BD46     		mov	sp, r7
 7432 011e 80BD     		pop	{r7, pc}
 7433              		.cfi_endproc
 7434              	.LFE912:
 7436              		.section	.text._ZN24MonochromeDisplayPainter19_createOffsetBitmapEb,"ax",%progbits
 7437              		.align	2
 7438              		.global	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
 7439              		.thumb
 7440              		.thumb_func
 7442              	_ZN24MonochromeDisplayPainter19_createOffsetBitmapEb:
 7443              	.LFB913:
 467:../utils/monochromedisplaypainter.cpp **** 
 468:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::_createOffsetBitmap( bool copyFromDisplay )
 469:../utils/monochromedisplaypainter.cpp **** {
 7444              		.loc 1 469 0
 7445              		.cfi_startproc
 7446              		@ args = 0, pretend = 0, frame = 40
 7447              		@ frame_needed = 1, uses_anonymous_args = 0
 7448 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7449              	.LCFI132:
 7450              		.cfi_def_cfa_offset 24
 7451 0004 8AB0     		sub	sp, sp, #40
 7452              	.LCFI133:
 7453              		.cfi_def_cfa_offset 64
 7454 0006 00AF     		add	r7, sp, #0
 7455              		.cfi_offset 14, -4
 7456              		.cfi_offset 8, -8
 7457              		.cfi_offset 7, -12
 7458              		.cfi_offset 6, -16
 7459              		.cfi_offset 5, -20
 7460              		.cfi_offset 4, -24
 7461              	.LCFI134:
 7462              		.cfi_def_cfa_register 7
 7463 0008 7860     		str	r0, [r7, #4]
 7464 000a 0B46     		mov	r3, r1
 7465 000c FB70     		strb	r3, [r7, #3]
 470:../utils/monochromedisplaypainter.cpp **** 	// Do we need to create the bitmap or does it already exists?
 471:../utils/monochromedisplaypainter.cpp **** 	if ( !_offscreenBitmap )
 7466              		.loc 1 471 0
 7467 000e 7B68     		ldr	r3, [r7, #4]
 7468 0010 DB68     		ldr	r3, [r3, #12]
 7469 0012 002B     		cmp	r3, #0
 7470 0014 5ED1     		bne	.L149
 472:../utils/monochromedisplaypainter.cpp **** 	{
 473:../utils/monochromedisplaypainter.cpp **** 		// Allocate memory for off-screen bitmap.
 474:../utils/monochromedisplaypainter.cpp **** 		_offscreenBitmap =
 475:../utils/monochromedisplaypainter.cpp **** 			new uint8_t[( ( _display->resolution().width * _display->resolution().height ) + 7 ) / 8];
 7471              		.loc 1 475 0
 7472 0016 7B68     		ldr	r3, [r7, #4]
 7473 0018 5B68     		ldr	r3, [r3, #4]
 7474 001a 1B68     		ldr	r3, [r3, #0]
 7475 001c 03F10803 		add	r3, r3, #8
 7476 0020 1B68     		ldr	r3, [r3, #0]
 7477 0022 7A68     		ldr	r2, [r7, #4]
 7478 0024 5268     		ldr	r2, [r2, #4]
 7479 0026 07F10801 		add	r1, r7, #8
 7480 002a 0846     		mov	r0, r1
 7481 002c 1146     		mov	r1, r2
 7482 002e 9847     		blx	r3
 7483 0030 BC68     		ldr	r4, [r7, #8]
 7484 0032 7B68     		ldr	r3, [r7, #4]
 7485 0034 5B68     		ldr	r3, [r3, #4]
 7486 0036 1B68     		ldr	r3, [r3, #0]
 7487 0038 03F10803 		add	r3, r3, #8
 7488 003c 1B68     		ldr	r3, [r3, #0]
 7489 003e 7A68     		ldr	r2, [r7, #4]
 7490 0040 5268     		ldr	r2, [r2, #4]
 7491 0042 07F11001 		add	r1, r7, #16
 7492 0046 0846     		mov	r0, r1
 7493 0048 1146     		mov	r1, r2
 7494 004a 9847     		blx	r3
 7495 004c 7B69     		ldr	r3, [r7, #20]
 7496 004e 03FB04F3 		mul	r3, r3, r4
 7497 0052 03F10703 		add	r3, r3, #7
 7498 0056 03F10702 		add	r2, r3, #7
 7499 005a 002B     		cmp	r3, #0
 7500 005c B8BF     		it	lt
 7501 005e 1346     		movlt	r3, r2
 7502 0060 4FEAE303 		asr	r3, r3, #3
 7503 0064 1846     		mov	r0, r3
 7504 0066 FFF7FEFF 		bl	_Znaj
 7505 006a 0346     		mov	r3, r0
 7506 006c 1A46     		mov	r2, r3
 7507 006e 7B68     		ldr	r3, [r7, #4]
 7508 0070 DA60     		str	r2, [r3, #12]
 476:../utils/monochromedisplaypainter.cpp **** 
 477:../utils/monochromedisplaypainter.cpp **** 		// If needed, we copy the actual content of the display to the off-screen buffer.
 478:../utils/monochromedisplaypainter.cpp **** 		if ( copyFromDisplay )
 7509              		.loc 1 478 0
 7510 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 7511 0074 002B     		cmp	r3, #0
 7512 0076 2DD0     		beq	.L149
 479:../utils/monochromedisplaypainter.cpp **** 			_display->readDisplayMemory( 0 , _offscreenBitmap ,
 480:../utils/monochromedisplaypainter.cpp **** 					_display->resolution().width * _display->resolution().height );
 7513              		.loc 1 480 0
 7514 0078 7B68     		ldr	r3, [r7, #4]
 7515 007a 5B68     		ldr	r3, [r3, #4]
 7516 007c 1B68     		ldr	r3, [r3, #0]
 7517 007e 03F12C03 		add	r3, r3, #44
 7518 0082 1C68     		ldr	r4, [r3, #0]
 7519 0084 7B68     		ldr	r3, [r7, #4]
 7520 0086 5E68     		ldr	r6, [r3, #4]
 7521 0088 7B68     		ldr	r3, [r7, #4]
 7522 008a DD68     		ldr	r5, [r3, #12]
 7523 008c 7B68     		ldr	r3, [r7, #4]
 7524 008e 5B68     		ldr	r3, [r3, #4]
 7525 0090 1B68     		ldr	r3, [r3, #0]
 7526 0092 03F10803 		add	r3, r3, #8
 7527 0096 1B68     		ldr	r3, [r3, #0]
 7528 0098 7A68     		ldr	r2, [r7, #4]
 7529 009a 5268     		ldr	r2, [r2, #4]
 7530 009c 07F11801 		add	r1, r7, #24
 7531 00a0 0846     		mov	r0, r1
 7532 00a2 1146     		mov	r1, r2
 7533 00a4 9847     		blx	r3
 7534 00a6 D7F81880 		ldr	r8, [r7, #24]
 7535 00aa 7B68     		ldr	r3, [r7, #4]
 7536 00ac 5B68     		ldr	r3, [r3, #4]
 7537 00ae 1B68     		ldr	r3, [r3, #0]
 7538 00b0 03F10803 		add	r3, r3, #8
 7539 00b4 1B68     		ldr	r3, [r3, #0]
 7540 00b6 7A68     		ldr	r2, [r7, #4]
 7541 00b8 5268     		ldr	r2, [r2, #4]
 7542 00ba 07F12001 		add	r1, r7, #32
 7543 00be 0846     		mov	r0, r1
 7544 00c0 1146     		mov	r1, r2
 7545 00c2 9847     		blx	r3
 7546 00c4 7B6A     		ldr	r3, [r7, #36]
 7547 00c6 03FB08F3 		mul	r3, r3, r8
 7548 00ca 3046     		mov	r0, r6
 7549 00cc 4FF00001 		mov	r1, #0
 7550 00d0 2A46     		mov	r2, r5
 7551 00d2 A047     		blx	r4
 7552              	.L149:
 481:../utils/monochromedisplaypainter.cpp **** 	}
 482:../utils/monochromedisplaypainter.cpp **** }
 7553              		.loc 1 482 0
 7554 00d4 07F12807 		add	r7, r7, #40
 7555 00d8 BD46     		mov	sp, r7
 7556 00da BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7557              		.cfi_endproc
 7558              	.LFE913:
 7560 00de 00BF     		.section	.text._ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelCo
 7561              		.align	2
 7562              		.global	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
 7563              		.thumb
 7564              		.thumb_func
 7566              	_ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE:
 7567              	.LFB914:
 483:../utils/monochromedisplaypainter.cpp **** 
 484:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::_setPixel( const IMonochromeDisplay::Point & p , IMonochromeDisplay:
 485:../utils/monochromedisplaypainter.cpp **** {
 7568              		.loc 1 485 0
 7569              		.cfi_startproc
 7570              		@ args = 0, pretend = 0, frame = 64
 7571              		@ frame_needed = 1, uses_anonymous_args = 0
 7572 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 7573              	.LCFI135:
 7574              		.cfi_def_cfa_offset 20
 7575 0002 91B0     		sub	sp, sp, #68
 7576              	.LCFI136:
 7577              		.cfi_def_cfa_offset 88
 7578 0004 00AF     		add	r7, sp, #0
 7579              		.cfi_offset 14, -4
 7580              		.cfi_offset 7, -8
 7581              		.cfi_offset 6, -12
 7582              		.cfi_offset 5, -16
 7583              		.cfi_offset 4, -20
 7584              	.LCFI137:
 7585              		.cfi_def_cfa_register 7
 7586 0006 F860     		str	r0, [r7, #12]
 7587 0008 B960     		str	r1, [r7, #8]
 7588 000a 1346     		mov	r3, r2
 7589 000c FB71     		strb	r3, [r7, #7]
 486:../utils/monochromedisplaypainter.cpp **** 	// Check pixel bounds.
 487:../utils/monochromedisplaypainter.cpp **** 	if ( p.x >= 0 && p.x < _display->resolution().width && p.y >= 0 && p.y < _display->resolution().he
 7590              		.loc 1 487 0
 7591 000e BB68     		ldr	r3, [r7, #8]
 7592 0010 1B68     		ldr	r3, [r3, #0]
 7593 0012 002B     		cmp	r3, #0
 7594 0014 2ADB     		blt	.L152
 7595              		.loc 1 487 0 is_stmt 0 discriminator 1
 7596 0016 BB68     		ldr	r3, [r7, #8]
 7597 0018 1C68     		ldr	r4, [r3, #0]
 7598 001a FB68     		ldr	r3, [r7, #12]
 7599 001c 5B68     		ldr	r3, [r3, #4]
 7600 001e 1B68     		ldr	r3, [r3, #0]
 7601 0020 03F10803 		add	r3, r3, #8
 7602 0024 1B68     		ldr	r3, [r3, #0]
 7603 0026 FA68     		ldr	r2, [r7, #12]
 7604 0028 5268     		ldr	r2, [r2, #4]
 7605 002a 07F11001 		add	r1, r7, #16
 7606 002e 0846     		mov	r0, r1
 7607 0030 1146     		mov	r1, r2
 7608 0032 9847     		blx	r3
 7609 0034 3B69     		ldr	r3, [r7, #16]
 7610 0036 9C42     		cmp	r4, r3
 7611 0038 18DA     		bge	.L152
 7612              		.loc 1 487 0 discriminator 3
 7613 003a BB68     		ldr	r3, [r7, #8]
 7614 003c 5B68     		ldr	r3, [r3, #4]
 7615 003e 002B     		cmp	r3, #0
 7616 0040 14DB     		blt	.L152
 7617              		.loc 1 487 0 discriminator 4
 7618 0042 BB68     		ldr	r3, [r7, #8]
 7619 0044 5C68     		ldr	r4, [r3, #4]
 7620 0046 FB68     		ldr	r3, [r7, #12]
 7621 0048 5B68     		ldr	r3, [r3, #4]
 7622 004a 1B68     		ldr	r3, [r3, #0]
 7623 004c 03F10803 		add	r3, r3, #8
 7624 0050 1B68     		ldr	r3, [r3, #0]
 7625 0052 FA68     		ldr	r2, [r7, #12]
 7626 0054 5268     		ldr	r2, [r2, #4]
 7627 0056 07F11801 		add	r1, r7, #24
 7628 005a 0846     		mov	r0, r1
 7629 005c 1146     		mov	r1, r2
 7630 005e 9847     		blx	r3
 7631 0060 FB69     		ldr	r3, [r7, #28]
 7632 0062 9C42     		cmp	r4, r3
 7633 0064 02DA     		bge	.L152
 7634              		.loc 1 487 0 discriminator 5
 7635 0066 4FF00103 		mov	r3, #1
 7636 006a 01E0     		b	.L153
 7637              	.L152:
 7638              		.loc 1 487 0 discriminator 2
 7639 006c 4FF00003 		mov	r3, #0
 7640              	.L153:
 7641              		.loc 1 487 0 discriminator 6
 7642 0070 002B     		cmp	r3, #0
 7643 0072 00F0B980 		beq	.L151
 488:../utils/monochromedisplaypainter.cpp **** 	{
 489:../utils/monochromedisplaypainter.cpp **** 		// Do we need to draw into the off-screen bitmap?
 490:../utils/monochromedisplaypainter.cpp **** 		if ( _offscreenBitmap )
 7644              		.loc 1 490 0 is_stmt 1
 7645 0076 FB68     		ldr	r3, [r7, #12]
 7646 0078 DB68     		ldr	r3, [r3, #12]
 7647 007a 002B     		cmp	r3, #0
 7648 007c 00F0A780 		beq	.L155
 491:../utils/monochromedisplaypainter.cpp **** 		{
 492:../utils/monochromedisplaypainter.cpp **** 			// Draw into the off-screen bitmap.
 493:../utils/monochromedisplaypainter.cpp **** 			if ( color == IMonochromeDisplay::White )
 7649              		.loc 1 493 0
 7650 0080 97F90730 		ldrsb	r3, [r7, #7]
 7651 0084 B3F1FF3F 		cmp	r3, #-1
 7652 0088 4FD1     		bne	.L156
 494:../utils/monochromedisplaypainter.cpp **** 				*( _offscreenBitmap + ( p.y * _display->resolution().width + p.x ) / 8 ) &=
 495:../utils/monochromedisplaypainter.cpp **** 					~( 1 << ( ( p.y * _display->resolution().width + p.x ) % 8 ) );
 7653              		.loc 1 495 0
 7654 008a FB68     		ldr	r3, [r7, #12]
 7655 008c DC68     		ldr	r4, [r3, #12]
 7656 008e BB68     		ldr	r3, [r7, #8]
 7657 0090 5D68     		ldr	r5, [r3, #4]
 494:../utils/monochromedisplaypainter.cpp **** 				*( _offscreenBitmap + ( p.y * _display->resolution().width + p.x ) / 8 ) &=
 7658              		.loc 1 494 0
 7659 0092 FB68     		ldr	r3, [r7, #12]
 7660 0094 5B68     		ldr	r3, [r3, #4]
 7661 0096 1B68     		ldr	r3, [r3, #0]
 7662 0098 03F10803 		add	r3, r3, #8
 7663 009c 1B68     		ldr	r3, [r3, #0]
 7664 009e FA68     		ldr	r2, [r7, #12]
 7665 00a0 5268     		ldr	r2, [r2, #4]
 7666              		.loc 1 495 0
 7667 00a2 07F12001 		add	r1, r7, #32
 7668 00a6 0846     		mov	r0, r1
 7669 00a8 1146     		mov	r1, r2
 7670 00aa 9847     		blx	r3
 7671 00ac 3B6A     		ldr	r3, [r7, #32]
 7672 00ae 03FB05F2 		mul	r2, r3, r5
 7673 00b2 BB68     		ldr	r3, [r7, #8]
 7674 00b4 1B68     		ldr	r3, [r3, #0]
 7675 00b6 D318     		adds	r3, r2, r3
 7676 00b8 03F10702 		add	r2, r3, #7
 7677 00bc 002B     		cmp	r3, #0
 7678 00be B8BF     		it	lt
 7679 00c0 1346     		movlt	r3, r2
 7680 00c2 4FEAE303 		asr	r3, r3, #3
 7681 00c6 1A46     		mov	r2, r3
 7682 00c8 A418     		adds	r4, r4, r2
 7683 00ca FA68     		ldr	r2, [r7, #12]
 7684 00cc D268     		ldr	r2, [r2, #12]
 7685 00ce D318     		adds	r3, r2, r3
 7686 00d0 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7687 00d2 DDB2     		uxtb	r5, r3
 7688 00d4 BB68     		ldr	r3, [r7, #8]
 7689 00d6 5E68     		ldr	r6, [r3, #4]
 7690 00d8 FB68     		ldr	r3, [r7, #12]
 7691 00da 5B68     		ldr	r3, [r3, #4]
 7692 00dc 1B68     		ldr	r3, [r3, #0]
 7693 00de 03F10803 		add	r3, r3, #8
 7694 00e2 1B68     		ldr	r3, [r3, #0]
 7695 00e4 FA68     		ldr	r2, [r7, #12]
 7696 00e6 5268     		ldr	r2, [r2, #4]
 7697 00e8 07F12801 		add	r1, r7, #40
 7698 00ec 0846     		mov	r0, r1
 7699 00ee 1146     		mov	r1, r2
 7700 00f0 9847     		blx	r3
 7701 00f2 BB6A     		ldr	r3, [r7, #40]
 7702 00f4 03FB06F2 		mul	r2, r3, r6
 7703 00f8 BB68     		ldr	r3, [r7, #8]
 7704 00fa 1B68     		ldr	r3, [r3, #0]
 7705 00fc D218     		adds	r2, r2, r3
 7706 00fe 4FEAE273 		asr	r3, r2, #31
 7707 0102 4FEA5373 		lsr	r3, r3, #29
 7708 0106 D218     		adds	r2, r2, r3
 7709 0108 02F00702 		and	r2, r2, #7
 7710 010c D31A     		subs	r3, r2, r3
 7711 010e 4FF00102 		mov	r2, #1
 7712 0112 02FA03F3 		lsl	r3, r2, r3
 7713 0116 DBB2     		uxtb	r3, r3
 7714 0118 6FEA0303 		mvn	r3, r3
 7715 011c DBB2     		uxtb	r3, r3
 7716 011e 2A46     		mov	r2, r5
 7717 0120 02EA0303 		and	r3, r2, r3
 7718 0124 DBB2     		uxtb	r3, r3
 7719 0126 DBB2     		uxtb	r3, r3
 7720 0128 2370     		strb	r3, [r4, #0]
 7721              	.L156:
 496:../utils/monochromedisplaypainter.cpp **** 
 497:../utils/monochromedisplaypainter.cpp **** 			if ( color == IMonochromeDisplay::Black )
 7722              		.loc 1 497 0
 7723 012a 97F90730 		ldrsb	r3, [r7, #7]
 7724 012e 012B     		cmp	r3, #1
 7725 0130 5AD1     		bne	.L151
 498:../utils/monochromedisplaypainter.cpp **** 				*( _offscreenBitmap + ( p.y * _display->resolution().width + p.x ) / 8 ) |=
 499:../utils/monochromedisplaypainter.cpp **** 					( 1 << ( ( p.y * _display->resolution().width + p.x ) % 8 ) );
 7726              		.loc 1 499 0
 7727 0132 FB68     		ldr	r3, [r7, #12]
 7728 0134 DC68     		ldr	r4, [r3, #12]
 7729 0136 BB68     		ldr	r3, [r7, #8]
 7730 0138 5D68     		ldr	r5, [r3, #4]
 498:../utils/monochromedisplaypainter.cpp **** 				*( _offscreenBitmap + ( p.y * _display->resolution().width + p.x ) / 8 ) |=
 7731              		.loc 1 498 0
 7732 013a FB68     		ldr	r3, [r7, #12]
 7733 013c 5B68     		ldr	r3, [r3, #4]
 7734 013e 1B68     		ldr	r3, [r3, #0]
 7735 0140 03F10803 		add	r3, r3, #8
 7736 0144 1B68     		ldr	r3, [r3, #0]
 7737 0146 FA68     		ldr	r2, [r7, #12]
 7738 0148 5268     		ldr	r2, [r2, #4]
 7739              		.loc 1 499 0
 7740 014a 07F13001 		add	r1, r7, #48
 7741 014e 0846     		mov	r0, r1
 7742 0150 1146     		mov	r1, r2
 7743 0152 9847     		blx	r3
 7744 0154 3B6B     		ldr	r3, [r7, #48]
 7745 0156 03FB05F2 		mul	r2, r3, r5
 7746 015a BB68     		ldr	r3, [r7, #8]
 7747 015c 1B68     		ldr	r3, [r3, #0]
 7748 015e D318     		adds	r3, r2, r3
 7749 0160 03F10702 		add	r2, r3, #7
 7750 0164 002B     		cmp	r3, #0
 7751 0166 B8BF     		it	lt
 7752 0168 1346     		movlt	r3, r2
 7753 016a 4FEAE303 		asr	r3, r3, #3
 7754 016e 1A46     		mov	r2, r3
 7755 0170 A418     		adds	r4, r4, r2
 7756 0172 FA68     		ldr	r2, [r7, #12]
 7757 0174 D268     		ldr	r2, [r2, #12]
 7758 0176 D318     		adds	r3, r2, r3
 7759 0178 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 7760 017a DDB2     		uxtb	r5, r3
 7761 017c BB68     		ldr	r3, [r7, #8]
 7762 017e 5E68     		ldr	r6, [r3, #4]
 7763 0180 FB68     		ldr	r3, [r7, #12]
 7764 0182 5B68     		ldr	r3, [r3, #4]
 7765 0184 1B68     		ldr	r3, [r3, #0]
 7766 0186 03F10803 		add	r3, r3, #8
 7767 018a 1B68     		ldr	r3, [r3, #0]
 7768 018c FA68     		ldr	r2, [r7, #12]
 7769 018e 5268     		ldr	r2, [r2, #4]
 7770 0190 07F13801 		add	r1, r7, #56
 7771 0194 0846     		mov	r0, r1
 7772 0196 1146     		mov	r1, r2
 7773 0198 9847     		blx	r3
 7774 019a BB6B     		ldr	r3, [r7, #56]
 7775 019c 03FB06F2 		mul	r2, r3, r6
 7776 01a0 BB68     		ldr	r3, [r7, #8]
 7777 01a2 1B68     		ldr	r3, [r3, #0]
 7778 01a4 D218     		adds	r2, r2, r3
 7779 01a6 4FEAE273 		asr	r3, r2, #31
 7780 01aa 4FEA5373 		lsr	r3, r3, #29
 7781 01ae D218     		adds	r2, r2, r3
 7782 01b0 02F00702 		and	r2, r2, #7
 7783 01b4 D31A     		subs	r3, r2, r3
 7784 01b6 4FF00102 		mov	r2, #1
 7785 01ba 02FA03F3 		lsl	r3, r2, r3
 7786 01be DBB2     		uxtb	r3, r3
 7787 01c0 2A46     		mov	r2, r5
 7788 01c2 42EA0303 		orr	r3, r2, r3
 7789 01c6 DBB2     		uxtb	r3, r3
 7790 01c8 DBB2     		uxtb	r3, r3
 7791 01ca 2370     		strb	r3, [r4, #0]
 7792 01cc 0CE0     		b	.L151
 7793              	.L155:
 500:../utils/monochromedisplaypainter.cpp **** 		}
 501:../utils/monochromedisplaypainter.cpp **** 		else
 502:../utils/monochromedisplaypainter.cpp **** 		{
 503:../utils/monochromedisplaypainter.cpp **** 			// Draw directly onto the display.
 504:../utils/monochromedisplaypainter.cpp **** 			_display->setPixel( p , color );
 7794              		.loc 1 504 0
 7795 01ce FB68     		ldr	r3, [r7, #12]
 7796 01d0 5B68     		ldr	r3, [r3, #4]
 7797 01d2 1B68     		ldr	r3, [r3, #0]
 7798 01d4 03F12003 		add	r3, r3, #32
 7799 01d8 1B68     		ldr	r3, [r3, #0]
 7800 01da FA68     		ldr	r2, [r7, #12]
 7801 01dc 5168     		ldr	r1, [r2, #4]
 7802 01de 97F90720 		ldrsb	r2, [r7, #7]
 7803 01e2 0846     		mov	r0, r1
 7804 01e4 B968     		ldr	r1, [r7, #8]
 7805 01e6 9847     		blx	r3
 7806              	.L151:
 505:../utils/monochromedisplaypainter.cpp **** 		}
 506:../utils/monochromedisplaypainter.cpp **** 	}
 507:../utils/monochromedisplaypainter.cpp **** }
 7807              		.loc 1 507 0
 7808 01e8 07F14407 		add	r7, r7, #68
 7809 01ec BD46     		mov	sp, r7
 7810 01ee F0BD     		pop	{r4, r5, r6, r7, pc}
 7811              		.cfi_endproc
 7812              	.LFE914:
 7814              		.section	.text._ZN24MonochromeDisplayPainter12_syncDisplayEii,"ax",%progbits
 7815              		.align	2
 7816              		.global	_ZN24MonochromeDisplayPainter12_syncDisplayEii
 7817              		.thumb
 7818              		.thumb_func
 7820              	_ZN24MonochromeDisplayPainter12_syncDisplayEii:
 7821              	.LFB915:
 508:../utils/monochromedisplaypainter.cpp **** 
 509:../utils/monochromedisplaypainter.cpp **** void MonochromeDisplayPainter::_syncDisplay( int startLine , int endLine )
 510:../utils/monochromedisplaypainter.cpp **** {
 7822              		.loc 1 510 0
 7823              		.cfi_startproc
 7824              		@ args = 0, pretend = 0, frame = 64
 7825              		@ frame_needed = 1, uses_anonymous_args = 0
 7826 0000 90B5     		push	{r4, r7, lr}
 7827              	.LCFI138:
 7828              		.cfi_def_cfa_offset 12
 7829 0002 91B0     		sub	sp, sp, #68
 7830              	.LCFI139:
 7831              		.cfi_def_cfa_offset 80
 7832 0004 00AF     		add	r7, sp, #0
 7833              		.cfi_offset 14, -4
 7834              		.cfi_offset 7, -8
 7835              		.cfi_offset 4, -12
 7836              	.LCFI140:
 7837              		.cfi_def_cfa_register 7
 7838 0006 F860     		str	r0, [r7, #12]
 7839 0008 B960     		str	r1, [r7, #8]
 7840 000a 7A60     		str	r2, [r7, #4]
 7841              	.LBB65:
 7842              	.LBB66:
 511:../utils/monochromedisplaypainter.cpp **** 	// Do we need to sync the display.
 512:../utils/monochromedisplaypainter.cpp **** 	if ( _offscreenBitmap && !_disableSync )
 7843              		.loc 1 512 0
 7844 000c FB68     		ldr	r3, [r7, #12]
 7845 000e DB68     		ldr	r3, [r3, #12]
 7846 0010 002B     		cmp	r3, #0
 7847 0012 00F08E80 		beq	.L157
 7848              		.loc 1 512 0 is_stmt 0 discriminator 1
 7849 0016 FB68     		ldr	r3, [r7, #12]
 7850 0018 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 7851 001a 83F00103 		eor	r3, r3, #1
 7852 001e DBB2     		uxtb	r3, r3
 7853 0020 002B     		cmp	r3, #0
 7854 0022 00F08680 		beq	.L157
 7855              	.LBB67:
 7856              	.LBB68:
 513:../utils/monochromedisplaypainter.cpp **** 	{
 514:../utils/monochromedisplaypainter.cpp **** 		// Check line (Y) bounds.
 515:../utils/monochromedisplaypainter.cpp **** 		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 7857              		.loc 1 515 0 is_stmt 1
 7858 0026 BB68     		ldr	r3, [r7, #8]
 7859 0028 002B     		cmp	r3, #0
 7860 002a 27DB     		blt	.L159
 7861              		.loc 1 515 0 is_stmt 0 discriminator 1
 7862 002c FB68     		ldr	r3, [r7, #12]
 7863 002e 5B68     		ldr	r3, [r3, #4]
 7864 0030 1B68     		ldr	r3, [r3, #0]
 7865 0032 03F10803 		add	r3, r3, #8
 7866 0036 1B68     		ldr	r3, [r3, #0]
 7867 0038 FA68     		ldr	r2, [r7, #12]
 7868 003a 5268     		ldr	r2, [r2, #4]
 7869 003c 07F11401 		add	r1, r7, #20
 7870 0040 0846     		mov	r0, r1
 7871 0042 1146     		mov	r1, r2
 7872 0044 9847     		blx	r3
 7873 0046 BA69     		ldr	r2, [r7, #24]
 7874 0048 BB68     		ldr	r3, [r7, #8]
 7875 004a 9A42     		cmp	r2, r3
 7876 004c 16DB     		blt	.L159
 7877              		.loc 1 515 0 discriminator 3
 7878 004e 7B68     		ldr	r3, [r7, #4]
 7879 0050 002B     		cmp	r3, #0
 7880 0052 13DB     		blt	.L159
 516:../utils/monochromedisplaypainter.cpp **** 			 endLine >= 0 && endLine <= _display->resolution().height )
 7881              		.loc 1 516 0 is_stmt 1 discriminator 4
 7882 0054 FB68     		ldr	r3, [r7, #12]
 7883 0056 5B68     		ldr	r3, [r3, #4]
 7884 0058 1B68     		ldr	r3, [r3, #0]
 7885 005a 03F10803 		add	r3, r3, #8
 7886 005e 1B68     		ldr	r3, [r3, #0]
 7887 0060 FA68     		ldr	r2, [r7, #12]
 7888 0062 5268     		ldr	r2, [r2, #4]
 515:../utils/monochromedisplaypainter.cpp **** 		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 7889              		.loc 1 515 0 discriminator 4
 7890 0064 07F11C01 		add	r1, r7, #28
 7891 0068 0846     		mov	r0, r1
 7892 006a 1146     		mov	r1, r2
 7893 006c 9847     		blx	r3
 7894 006e 3A6A     		ldr	r2, [r7, #32]
 7895 0070 7B68     		ldr	r3, [r7, #4]
 7896 0072 9A42     		cmp	r2, r3
 7897 0074 02DB     		blt	.L159
 515:../utils/monochromedisplaypainter.cpp **** 		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 7898              		.loc 1 515 0 is_stmt 0 discriminator 5
 7899 0076 4FF00103 		mov	r3, #1
 7900 007a 01E0     		b	.L160
 7901              	.L159:
 515:../utils/monochromedisplaypainter.cpp **** 		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 7902              		.loc 1 515 0 discriminator 2
 7903 007c 4FF00003 		mov	r3, #0
 7904              	.L160:
 515:../utils/monochromedisplaypainter.cpp **** 		if ( startLine >= 0 && startLine <= _display->resolution().height &&
 7905              		.loc 1 515 0 discriminator 6
 7906 0080 002B     		cmp	r3, #0
 7907 0082 56D0     		beq	.L157
 7908              	.LBB69:
 517:../utils/monochromedisplaypainter.cpp **** 		{
 518:../utils/monochromedisplaypainter.cpp **** 			size_t bitOffset = std::min( startLine , endLine ) * _display->resolution().width;
 7909              		.loc 1 518 0 is_stmt 1
 7910 0084 07F10802 		add	r2, r7, #8
 7911 0088 07F10403 		add	r3, r7, #4
 7912 008c 1046     		mov	r0, r2
 7913 008e 1946     		mov	r1, r3
 7914 0090 FFF7FEFF 		bl	_ZSt3minIiERKT_S2_S2_
 7915 0094 0346     		mov	r3, r0
 7916 0096 1C68     		ldr	r4, [r3, #0]
 7917 0098 FB68     		ldr	r3, [r7, #12]
 7918 009a 5B68     		ldr	r3, [r3, #4]
 7919 009c 1B68     		ldr	r3, [r3, #0]
 7920 009e 03F10803 		add	r3, r3, #8
 7921 00a2 1B68     		ldr	r3, [r3, #0]
 7922 00a4 FA68     		ldr	r2, [r7, #12]
 7923 00a6 5268     		ldr	r2, [r2, #4]
 7924 00a8 07F12401 		add	r1, r7, #36
 7925 00ac 0846     		mov	r0, r1
 7926 00ae 1146     		mov	r1, r2
 7927 00b0 9847     		blx	r3
 7928 00b2 7B6A     		ldr	r3, [r7, #36]
 7929 00b4 03FB04F3 		mul	r3, r3, r4
 7930 00b8 FB63     		str	r3, [r7, #60]
 519:../utils/monochromedisplaypainter.cpp **** 			size_t numberOfBits = _display->resolution().width * abs( endLine - startLine );
 7931              		.loc 1 519 0
 7932 00ba FB68     		ldr	r3, [r7, #12]
 7933 00bc 5B68     		ldr	r3, [r3, #4]
 7934 00be 1B68     		ldr	r3, [r3, #0]
 7935 00c0 03F10803 		add	r3, r3, #8
 7936 00c4 1B68     		ldr	r3, [r3, #0]
 7937 00c6 FA68     		ldr	r2, [r7, #12]
 7938 00c8 5268     		ldr	r2, [r2, #4]
 7939 00ca 07F12C01 		add	r1, r7, #44
 7940 00ce 0846     		mov	r0, r1
 7941 00d0 1146     		mov	r1, r2
 7942 00d2 9847     		blx	r3
 7943 00d4 FB6A     		ldr	r3, [r7, #44]
 7944 00d6 7968     		ldr	r1, [r7, #4]
 7945 00d8 BA68     		ldr	r2, [r7, #8]
 7946 00da 8A1A     		subs	r2, r1, r2
 7947 00dc 002A     		cmp	r2, #0
 7948 00de B8BF     		it	lt
 7949 00e0 5242     		rsblt	r2, r2, #0
 7950 00e2 02FB03F3 		mul	r3, r2, r3
 7951 00e6 BB63     		str	r3, [r7, #56]
 520:../utils/monochromedisplaypainter.cpp **** 			size_t modulo = bitOffset % 8;
 7952              		.loc 1 520 0
 7953 00e8 FB6B     		ldr	r3, [r7, #60]
 7954 00ea 03F00703 		and	r3, r3, #7
 7955 00ee 7B63     		str	r3, [r7, #52]
 521:../utils/monochromedisplaypainter.cpp **** 
 522:../utils/monochromedisplaypainter.cpp **** 			// Align the start address and the number of bits to 8 bit bounds.
 523:../utils/monochromedisplaypainter.cpp **** 			if ( modulo )
 7956              		.loc 1 523 0
 7957 00f0 7B6B     		ldr	r3, [r7, #52]
 7958 00f2 002B     		cmp	r3, #0
 7959 00f4 07D0     		beq	.L161
 524:../utils/monochromedisplaypainter.cpp **** 			{
 525:../utils/monochromedisplaypainter.cpp **** 				bitOffset -= modulo;
 7960              		.loc 1 525 0
 7961 00f6 FA6B     		ldr	r2, [r7, #60]
 7962 00f8 7B6B     		ldr	r3, [r7, #52]
 7963 00fa D31A     		subs	r3, r2, r3
 7964 00fc FB63     		str	r3, [r7, #60]
 526:../utils/monochromedisplaypainter.cpp **** 				numberOfBits += modulo;
 7965              		.loc 1 526 0
 7966 00fe BA6B     		ldr	r2, [r7, #56]
 7967 0100 7B6B     		ldr	r3, [r7, #52]
 7968 0102 D318     		adds	r3, r2, r3
 7969 0104 BB63     		str	r3, [r7, #56]
 7970              	.L161:
 527:../utils/monochromedisplaypainter.cpp **** 			}
 528:../utils/monochromedisplaypainter.cpp **** 
 529:../utils/monochromedisplaypainter.cpp **** 			// Write the off-screen bitmap buffer to the display.
 530:../utils/monochromedisplaypainter.cpp **** 			_display->writeDisplayMemory( bitOffset / 8 , _offscreenBitmap + bitOffset / 8 , numberOfBits );
 7971              		.loc 1 530 0
 7972 0106 FB68     		ldr	r3, [r7, #12]
 7973 0108 5B68     		ldr	r3, [r3, #4]
 7974 010a 1B68     		ldr	r3, [r3, #0]
 7975 010c 03F12803 		add	r3, r3, #40
 7976 0110 1C68     		ldr	r4, [r3, #0]
 7977 0112 FB68     		ldr	r3, [r7, #12]
 7978 0114 5968     		ldr	r1, [r3, #4]
 7979 0116 FB6B     		ldr	r3, [r7, #60]
 7980 0118 4FEAD302 		lsr	r2, r3, #3
 7981 011c FB68     		ldr	r3, [r7, #12]
 7982 011e D868     		ldr	r0, [r3, #12]
 7983 0120 FB6B     		ldr	r3, [r7, #60]
 7984 0122 4FEAD303 		lsr	r3, r3, #3
 7985 0126 C318     		adds	r3, r0, r3
 7986 0128 0846     		mov	r0, r1
 7987 012a 1146     		mov	r1, r2
 7988 012c 1A46     		mov	r2, r3
 7989 012e BB6B     		ldr	r3, [r7, #56]
 7990 0130 A047     		blx	r4
 7991              	.L157:
 7992              	.LBE69:
 7993              	.LBE68:
 7994              	.LBE67:
 7995              	.LBE66:
 7996              	.LBE65:
 531:../utils/monochromedisplaypainter.cpp **** 		}
 532:../utils/monochromedisplaypainter.cpp **** 	}
 533:../utils/monochromedisplaypainter.cpp **** }
 7997              		.loc 1 533 0
 7998 0132 07F14407 		add	r7, r7, #68
 7999 0136 BD46     		mov	sp, r7
 8000 0138 90BD     		pop	{r4, r7, pc}
 8001              		.cfi_endproc
 8002              	.LFE915:
 8004 013a 00BF     		.section	.text._ZSt3minIiERKT_S2_S2_,"axG",%progbits,_ZSt3minIiERKT_S2_S2_,comdat
 8005              		.align	2
 8006              		.weak	_ZSt3minIiERKT_S2_S2_
 8007              		.thumb
 8008              		.thumb_func
 8010              	_ZSt3minIiERKT_S2_S2_:
 8011              	.LFB916:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** /** @file stl_algobase.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/c++config.h>
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <cstddef>
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/functexcept.h>
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <ext/type_traits.h>
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/concept_check.h>
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <debug/debug.h>
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE(std)
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<bool _BoolType>
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     struct __iter_swap
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         static void
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         {
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****             _ValueType1;
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	}
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     };
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<>
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     struct __iter_swap<true>
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         static void 
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         {
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****           swap(*__a, *__b);
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****         }
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     };
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  An iterator.
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another iterator.
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   Nothing.
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  iterators themselves.
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline void
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ValueType1;
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ValueType2;
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ValueType2>)
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ValueType1>)
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ReferenceType1;
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	_ReferenceType2;
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  first1  A forward iterator.
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  last1   A forward iterator.
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  first2  A forward iterator.
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  The ranges must not overlap.
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     _ForwardIterator2
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __first2;
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  preprocessor macro.
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _Tp>
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline const _Tp&
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 8012              		.loc 16 186 0
 8013              		.cfi_startproc
 8014              		@ args = 0, pretend = 0, frame = 8
 8015              		@ frame_needed = 1, uses_anonymous_args = 0
 8016              		@ link register save eliminated.
 8017 0000 80B4     		push	{r7}
 8018              	.LCFI141:
 8019              		.cfi_def_cfa_offset 4
 8020 0002 83B0     		sub	sp, sp, #12
 8021              	.LCFI142:
 8022              		.cfi_def_cfa_offset 16
 8023 0004 00AF     		add	r7, sp, #0
 8024              		.cfi_offset 7, -4
 8025              	.LCFI143:
 8026              		.cfi_def_cfa_register 7
 8027 0006 7860     		str	r0, [r7, #4]
 8028 0008 3960     		str	r1, [r7, #0]
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       if (__b < __a)
 8029              		.loc 16 191 0
 8030 000a 3B68     		ldr	r3, [r7, #0]
 8031 000c 1A68     		ldr	r2, [r3, #0]
 8032 000e 7B68     		ldr	r3, [r7, #4]
 8033 0010 1B68     		ldr	r3, [r3, #0]
 8034 0012 9A42     		cmp	r2, r3
 8035 0014 01DA     		bge	.L163
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	return __b;
 8036              		.loc 16 192 0
 8037 0016 3B68     		ldr	r3, [r7, #0]
 8038 0018 00E0     		b	.L164
 8039              	.L163:
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __a;
 8040              		.loc 16 193 0
 8041 001a 7B68     		ldr	r3, [r7, #4]
 8042              	.L164:
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 8043              		.loc 16 194 0
 8044 001c 1846     		mov	r0, r3
 8045 001e 07F10C07 		add	r7, r7, #12
 8046 0022 BD46     		mov	sp, r7
 8047 0024 80BC     		pop	{r7}
 8048 0026 7047     		bx	lr
 8049              		.cfi_endproc
 8050              	.LFE916:
 8052              		.section	.text._ZSt3maxIiERKT_S2_S2_,"axG",%progbits,_ZSt3maxIiERKT_S2_S2_,comdat
 8053              		.align	2
 8054              		.weak	_ZSt3maxIiERKT_S2_S2_
 8055              		.thumb
 8056              		.thumb_func
 8058              	_ZSt3maxIiERKT_S2_S2_:
 8059              	.LFB917:
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   /**
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  a  A thing of arbitrary type.
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @param  b  Another thing of arbitrary type.
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****    *  preprocessor macro.
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   */
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****   template<typename _Tp>
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     inline const _Tp&
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 8060              		.loc 16 209 0
 8061              		.cfi_startproc
 8062              		@ args = 0, pretend = 0, frame = 8
 8063              		@ frame_needed = 1, uses_anonymous_args = 0
 8064              		@ link register save eliminated.
 8065 0000 80B4     		push	{r7}
 8066              	.LCFI144:
 8067              		.cfi_def_cfa_offset 4
 8068 0002 83B0     		sub	sp, sp, #12
 8069              	.LCFI145:
 8070              		.cfi_def_cfa_offset 16
 8071 0004 00AF     		add	r7, sp, #0
 8072              		.cfi_offset 7, -4
 8073              	.LCFI146:
 8074              		.cfi_def_cfa_register 7
 8075 0006 7860     		str	r0, [r7, #4]
 8076 0008 3960     		str	r1, [r7, #0]
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     {
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       // concept requirements
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       if (__a < __b)
 8077              		.loc 16 214 0
 8078 000a 7B68     		ldr	r3, [r7, #4]
 8079 000c 1A68     		ldr	r2, [r3, #0]
 8080 000e 3B68     		ldr	r3, [r7, #0]
 8081 0010 1B68     		ldr	r3, [r3, #0]
 8082 0012 9A42     		cmp	r2, r3
 8083 0014 01DA     		bge	.L166
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h **** 	return __b;
 8084              		.loc 16 215 0
 8085 0016 3B68     		ldr	r3, [r7, #0]
 8086 0018 00E0     		b	.L167
 8087              	.L166:
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****       return __a;
 8088              		.loc 16 216 0
 8089 001a 7B68     		ldr	r3, [r7, #4]
 8090              	.L167:
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_algobase.h ****     }
 8091              		.loc 16 217 0
 8092 001c 1846     		mov	r0, r3
 8093 001e 07F10C07 		add	r7, r7, #12
 8094 0022 BD46     		mov	sp, r7
 8095 0024 80BC     		pop	{r7}
 8096 0026 7047     		bx	lr
 8097              		.cfi_endproc
 8098              	.LFE917:
 8100              		.global	_ZTV24MonochromeDisplayPainter
 8101              		.section	.rodata._ZTV24MonochromeDisplayPainter,"a",%progbits
 8102              		.align	3
 8105              	_ZTV24MonochromeDisplayPainter:
 8106 0000 00000000 		.word	0
 8107 0004 00000000 		.word	0
 8108 0008 00000000 		.word	_ZN24MonochromeDisplayPainterD1Ev
 8109 000c 00000000 		.word	_ZN24MonochromeDisplayPainterD0Ev
 8110              		.section	.rodata._ZL9fix16_max,"a",%progbits
 8111              		.align	2
 8114              	_ZL9fix16_max:
 8115 0000 FFFFFF7F 		.word	2147483647
 8116              		.section	.rodata._ZL9fix16_min,"a",%progbits
 8117              		.align	2
 8120              	_ZL9fix16_min:
 8121 0000 00000080 		.word	-2147483648
 8122              		.section	.rodata._ZL8fix16_pi,"a",%progbits
 8123              		.align	2
 8126              	_ZL8fix16_pi:
 8127 0000 3F240300 		.word	205887
 8128              		.section	.rodata._ZL7fix16_e,"a",%progbits
 8129              		.align	2
 8132              	_ZL7fix16_e:
 8133 0000 E1B70200 		.word	178145
 8134              		.section	.rodata._ZL9fix16_one,"a",%progbits
 8135              		.align	2
 8138              	_ZL9fix16_one:
 8139 0000 00000100 		.word	65536
 8140              		.section	.rodata._ZZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4S
 8141              		.align	2
 8144              	_ZZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKhE19__PRETTY
 8145 0000 766F6964 		.ascii	"void MonochromeDisplayPainter::drawBitmap(const IMo"
 8145      204D6F6E 
 8145      6F636872 
 8145      6F6D6544 
 8145      6973706C 
 8146 0033 6E6F6368 		.ascii	"nochromeDisplay::Point&, const IMonochromeDisplay::"
 8146      726F6D65 
 8146      44697370 
 8146      6C61793A 
 8146      3A506F69 
 8147 0066 53697A65 		.ascii	"Size&, const uint8_t*)\000"
 8147      262C2063 
 8147      6F6E7374 
 8147      2075696E 
 8147      74385F74 
 8148 007d 000000   		.section	.rodata._ZZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10P
 8149              		.align	2
 8152              	_ZZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorEE19__PRE
 8153 0000 766F6964 		.ascii	"void MonochromeDisplayPainter::drawText(const IMono"
 8153      204D6F6E 
 8153      6F636872 
 8153      6F6D6544 
 8153      6973706C 
 8154 0033 6368726F 		.ascii	"chromeDisplay::Point&, const std::string&, IMonochr"
 8154      6D654469 
 8154      73706C61 
 8154      793A3A50 
 8154      6F696E74 
 8155 0066 6F6D6544 		.ascii	"omeDisplay::PixelColor)\000"
 8155      6973706C 
 8155      61793A3A 
 8155      50697865 
 8155      6C436F6C 
 8156 007e 0000     		.section	.rodata._ZZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4
 8157              		.align	2
 8160              	_ZZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelCo
 8161 0000 766F6964 		.ascii	"void MonochromeDisplayPainter::drawEllipse(const IM"
 8161      204D6F6E 
 8161      6F636872 
 8161      6F6D6544 
 8161      6973706C 
 8162 0033 6F6E6F63 		.ascii	"onochromeDisplay::Point&, const IMonochromeDisplay:"
 8162      68726F6D 
 8162      65446973 
 8162      706C6179 
 8162      3A3A506F 
 8163 0066 3A53697A 		.ascii	":Size&, IMonochromeDisplay::PixelColor, IMonochrome"
 8163      65262C20 
 8163      494D6F6E 
 8163      6F636872 
 8163      6F6D6544 
 8164 0099 44697370 		.ascii	"Display::PixelColor)\000"
 8164      6C61793A 
 8164      3A506978 
 8164      656C436F 
 8164      6C6F7229 
 8165 00ae 0000     		.section	.rodata._ZZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0
 8166              		.align	2
 8169              	_ZZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10Pixel
 8170 0000 766F6964 		.ascii	"void MonochromeDisplayPainter::drawRectangle(const "
 8170      204D6F6E 
 8170      6F636872 
 8170      6F6D6544 
 8170      6973706C 
 8171 0033 494D6F6E 		.ascii	"IMonochromeDisplay::Point&, const IMonochromeDispla"
 8171      6F636872 
 8171      6F6D6544 
 8171      6973706C 
 8171      61793A3A 
 8172 0066 793A3A53 		.ascii	"y::Size&, IMonochromeDisplay::PixelColor, IMonochro"
 8172      697A6526 
 8172      2C20494D 
 8172      6F6E6F63 
 8172      68726F6D 
 8173 0099 6D654469 		.ascii	"meDisplay::PixelColor)\000"
 8173      73706C61 
 8173      793A3A50 
 8173      6978656C 
 8173      436F6C6F 
 8174              		.section	.rodata._ZZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10Pi
 8175              		.align	2
 8178              	_ZZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorEE19__PRET
 8179 0000 766F6964 		.ascii	"void MonochromeDisplayPainter::drawLine(const IMono"
 8179      204D6F6E 
 8179      6F636872 
 8179      6F6D6544 
 8179      6973706C 
 8180 0033 6368726F 		.ascii	"chromeDisplay::Point&, const IMonochromeDisplay::Po"
 8180      6D654469 
 8180      73706C61 
 8180      793A3A50 
 8180      6F696E74 
 8181 0066 696E7426 		.ascii	"int&, IMonochromeDisplay::PixelColor)\000"
 8181      2C20494D 
 8181      6F6E6F63 
 8181      68726F6D 
 8181      65446973 
 8182              		.section	.rodata._ZZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10Pixe
 8183              		.align	2
 8186              	_ZZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorEE19__PRETTY
 8187 0000 766F6964 		.ascii	"void MonochromeDisplayPainter::drawPixel(const IMon"
 8187      204D6F6E 
 8187      6F636872 
 8187      6F6D6544 
 8187      6973706C 
 8188 0033 6F636872 		.ascii	"ochromeDisplay::Point&, IMonochromeDisplay::PixelCo"
 8188      6F6D6544 
 8188      6973706C 
 8188      61793A3A 
 8188      506F696E 
 8189 0066 6C6F7229 		.ascii	"lor)\000"
 8189      00
 8190 006b 00       		.section	.rodata._ZZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorEE19__PRETT
 8191              		.align	2
 8194              	_ZZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorEE19__PRETTY_FUNCTION__:
 8195 0000 766F6964 		.ascii	"void MonochromeDisplayPainter::clear(IMonochromeDis"
 8195      204D6F6E 
 8195      6F636872 
 8195      6F6D6544 
 8195      6973706C 
 8196 0033 706C6179 		.ascii	"play::PixelColor)\000"
 8196      3A3A5069 
 8196      78656C43 
 8196      6F6C6F72 
 8196      2900
 8197 0045 000000   		.text
 8198              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 monochromedisplaypainter.cpp
     /tmp/cciwBMLV.s:3397   .text._ZL20__gthread_key_deletei:00000000 $t
     /tmp/cciwBMLV.s:3401   .text._ZL20__gthread_key_deletei:00000000 _ZL20__gthread_key_deletei
     /tmp/cciwBMLV.s:3431   .text._ZN18IMonochromeDisplay5PointC2Eii:00000000 $t
     /tmp/cciwBMLV.s:3436   .text._ZN18IMonochromeDisplay5PointC2Eii:00000000 _ZN18IMonochromeDisplay5PointC2Eii
     /tmp/cciwBMLV.s:3436   .text._ZN18IMonochromeDisplay5PointC2Eii:00000000 _ZN18IMonochromeDisplay5PointC1Eii
     /tmp/cciwBMLV.s:3480   .text.fix16_from_dbl:00000000 $t
     /tmp/cciwBMLV.s:3484   .text.fix16_from_dbl:00000000 fix16_from_dbl
     /tmp/cciwBMLV.s:3530   .text.fix16_from_int:00000000 $t
     /tmp/cciwBMLV.s:3534   .text.fix16_from_int:00000000 fix16_from_int
     /tmp/cciwBMLV.s:3564   .text.fix16_to_int:00000000 $t
     /tmp/cciwBMLV.s:3568   .text.fix16_to_int:00000000 fix16_to_int
     /tmp/cciwBMLV.s:3599   .text._ZN5Fix16C2Ev:00000000 $t
     /tmp/cciwBMLV.s:3604   .text._ZN5Fix16C2Ev:00000000 _ZN5Fix16C2Ev
     /tmp/cciwBMLV.s:3604   .text._ZN5Fix16C2Ev:00000000 _ZN5Fix16C1Ev
     /tmp/cciwBMLV.s:3640   .text._ZN5Fix16C2ERKS_:00000000 $t
     /tmp/cciwBMLV.s:3645   .text._ZN5Fix16C2ERKS_:00000000 _ZN5Fix16C2ERKS_
     /tmp/cciwBMLV.s:3645   .text._ZN5Fix16C2ERKS_:00000000 _ZN5Fix16C1ERKS_
     /tmp/cciwBMLV.s:3683   .text._ZN5Fix16C2Ei:00000000 $t
     /tmp/cciwBMLV.s:3688   .text._ZN5Fix16C2Ei:00000000 _ZN5Fix16C2Ei
     /tmp/cciwBMLV.s:3688   .text._ZN5Fix16C2Ei:00000000 _ZN5Fix16C1Ei
     /tmp/cciwBMLV.s:3726   .text._ZN5Fix1611fromFix16_tEl:00000000 $t
     /tmp/cciwBMLV.s:3731   .text._ZN5Fix1611fromFix16_tEl:00000000 _ZN5Fix1611fromFix16_tEl
     /tmp/cciwBMLV.s:3769   .text._ZN5Fix16cviEv:00000000 $t
     /tmp/cciwBMLV.s:3774   .text._ZN5Fix16cviEv:00000000 _ZN5Fix16cviEv
     /tmp/cciwBMLV.s:3806   .text._ZN5Fix16aSERKS_:00000000 $t
     /tmp/cciwBMLV.s:3811   .text._ZN5Fix16aSERKS_:00000000 _ZN5Fix16aSERKS_
     /tmp/cciwBMLV.s:3845   .text._ZN5Fix16pLERKS_:00000000 $t
     /tmp/cciwBMLV.s:3850   .text._ZN5Fix16pLERKS_:00000000 _ZN5Fix16pLERKS_
     /tmp/cciwBMLV.s:3887   .text._ZN5Fix16pLEd:00000000 $t
     /tmp/cciwBMLV.s:3892   .text._ZN5Fix16pLEd:00000000 _ZN5Fix16pLEd
     /tmp/cciwBMLV.s:3930   .text._ZN5Fix16pLEi:00000000 $t
     /tmp/cciwBMLV.s:3935   .text._ZN5Fix16pLEi:00000000 _ZN5Fix16pLEi
     /tmp/cciwBMLV.s:3973   .text._ZN5Fix16mIERKS_:00000000 $t
     /tmp/cciwBMLV.s:3978   .text._ZN5Fix16mIERKS_:00000000 _ZN5Fix16mIERKS_
     /tmp/cciwBMLV.s:4015   .text._ZN5Fix16mLERKS_:00000000 $t
     /tmp/cciwBMLV.s:4020   .text._ZN5Fix16mLERKS_:00000000 _ZN5Fix16mLERKS_
     /tmp/cciwBMLV.s:4059   .text._ZN5Fix16dVERKS_:00000000 $t
     /tmp/cciwBMLV.s:4064   .text._ZN5Fix16dVERKS_:00000000 _ZN5Fix16dVERKS_
     /tmp/cciwBMLV.s:4103   .text._ZN5Fix16dVEi:00000000 $t
     /tmp/cciwBMLV.s:4108   .text._ZN5Fix16dVEi:00000000 _ZN5Fix16dVEi
     /tmp/cciwBMLV.s:4144   .text._ZNK5Fix16plERKS_:00000000 $t
     /tmp/cciwBMLV.s:4149   .text._ZNK5Fix16plERKS_:00000000 _ZNK5Fix16plERKS_
     /tmp/cciwBMLV.s:4190   .text._ZNK5Fix16plEd:00000000 $t
     /tmp/cciwBMLV.s:4195   .text._ZNK5Fix16plEd:00000000 _ZNK5Fix16plEd
     /tmp/cciwBMLV.s:4236   .text._ZNK5Fix16plEi:00000000 $t
     /tmp/cciwBMLV.s:4241   .text._ZNK5Fix16plEi:00000000 _ZNK5Fix16plEi
     /tmp/cciwBMLV.s:4282   .text._ZNK5Fix16miERKS_:00000000 $t
     /tmp/cciwBMLV.s:4287   .text._ZNK5Fix16miERKS_:00000000 _ZNK5Fix16miERKS_
     /tmp/cciwBMLV.s:4328   .text._ZNK5Fix16mlERKS_:00000000 $t
     /tmp/cciwBMLV.s:4333   .text._ZNK5Fix16mlERKS_:00000000 _ZNK5Fix16mlERKS_
     /tmp/cciwBMLV.s:4374   .text._ZNK5Fix16dvERKS_:00000000 $t
     /tmp/cciwBMLV.s:4379   .text._ZNK5Fix16dvERKS_:00000000 _ZNK5Fix16dvERKS_
     /tmp/cciwBMLV.s:4420   .text._ZNK5Fix16dvEi:00000000 $t
     /tmp/cciwBMLV.s:4425   .text._ZNK5Fix16dvEi:00000000 _ZNK5Fix16dvEi
     /tmp/cciwBMLV.s:4466   .text._ZNK5Fix16leERKS_:00000000 $t
     /tmp/cciwBMLV.s:4471   .text._ZNK5Fix16leERKS_:00000000 _ZNK5Fix16leERKS_
     /tmp/cciwBMLV.s:4508   .text._ZNK5Fix16ltEi:00000000 $t
     /tmp/cciwBMLV.s:4513   .text._ZNK5Fix16ltEi:00000000 _ZNK5Fix16ltEi
     /tmp/cciwBMLV.s:4551   .text._ZN5Fix163sinEv:00000000 $t
     /tmp/cciwBMLV.s:4556   .text._ZN5Fix163sinEv:00000000 _ZN5Fix163sinEv
     /tmp/cciwBMLV.s:4596   .text._ZN5Fix163cosEv:00000000 $t
     /tmp/cciwBMLV.s:4601   .text._ZN5Fix163cosEv:00000000 _ZN5Fix163cosEv
     /tmp/cciwBMLV.s:4641   .text._ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb:00000000 $t
     /tmp/cciwBMLV.s:4646   .text._ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb:00000000 _ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb
     /tmp/cciwBMLV.s:4709   .text._ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb:00000054 $d
     /tmp/cciwBMLV.s:8105   .rodata._ZTV24MonochromeDisplayPainter:00000000 _ZTV24MonochromeDisplayPainter
     /tmp/cciwBMLV.s:4646   .text._ZN24MonochromeDisplayPainterC2EP18IMonochromeDisplayb:00000000 _ZN24MonochromeDisplayPainterC1EP18IMonochromeDisplayb
     /tmp/cciwBMLV.s:4716   .text._ZN24MonochromeDisplayPainterD2Ev:00000000 $t
     /tmp/cciwBMLV.s:4721   .text._ZN24MonochromeDisplayPainterD2Ev:00000000 _ZN24MonochromeDisplayPainterD2Ev
     /tmp/cciwBMLV.s:4870   .text._ZN24MonochromeDisplayPainter3endEv:00000000 _ZN24MonochromeDisplayPainter3endEv
     /tmp/cciwBMLV.s:4767   .text._ZN24MonochromeDisplayPainterD2Ev:00000034 $d
     /tmp/cciwBMLV.s:4721   .text._ZN24MonochromeDisplayPainterD2Ev:00000000 _ZN24MonochromeDisplayPainterD1Ev
     /tmp/cciwBMLV.s:4774   .text._ZN24MonochromeDisplayPainterD0Ev:00000000 $t
     /tmp/cciwBMLV.s:4779   .text._ZN24MonochromeDisplayPainterD0Ev:00000000 _ZN24MonochromeDisplayPainterD0Ev
     /tmp/cciwBMLV.s:4811   .text._ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay:00000000 $t
     /tmp/cciwBMLV.s:4816   .text._ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay:00000000 _ZN24MonochromeDisplayPainter5beginEP18IMonochromeDisplay
     /tmp/cciwBMLV.s:4865   .text._ZN24MonochromeDisplayPainter3endEv:00000000 $t
     /tmp/cciwBMLV.s:5269   .text._ZN24MonochromeDisplayPainter6updateEv:00000000 _ZN24MonochromeDisplayPainter6updateEv
     /tmp/cciwBMLV.s:4937   .rodata:00000000 $d
     /tmp/cciwBMLV.s:4938   .rodata:00000000 .LC0
     /tmp/cciwBMLV.s:4941   .rodata:00000028 .LC1
     /tmp/cciwBMLV.s:4944   .text._ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE:00000000 $t
     /tmp/cciwBMLV.s:4949   .text._ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE:00000000 _ZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorE
     /tmp/cciwBMLV.s:8194   .rodata._ZZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorEE19__PRETTY_FUNCTION__:00000000 _ZZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorEE19__PRETTY_FUNCTION__
     /tmp/cciwBMLV.s:7442   .text._ZN24MonochromeDisplayPainter19_createOffsetBitmapEb:00000000 _ZN24MonochromeDisplayPainter19_createOffsetBitmapEb
     /tmp/cciwBMLV.s:7820   .text._ZN24MonochromeDisplayPainter12_syncDisplayEii:00000000 _ZN24MonochromeDisplayPainter12_syncDisplayEii
     /tmp/cciwBMLV.s:5749   .text._ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_:00000000 _ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_
     /tmp/cciwBMLV.s:5190   .text._ZNK24MonochromeDisplayPainter10autoUpdateEv:00000000 $t
     /tmp/cciwBMLV.s:5195   .text._ZNK24MonochromeDisplayPainter10autoUpdateEv:00000000 _ZNK24MonochromeDisplayPainter10autoUpdateEv
     /tmp/cciwBMLV.s:5226   .text._ZN24MonochromeDisplayPainter13setAutoUpdateEb:00000000 $t
     /tmp/cciwBMLV.s:5231   .text._ZN24MonochromeDisplayPainter13setAutoUpdateEb:00000000 _ZN24MonochromeDisplayPainter13setAutoUpdateEb
     /tmp/cciwBMLV.s:5264   .text._ZN24MonochromeDisplayPainter6updateEv:00000000 $t
     /tmp/cciwBMLV.s:5312   .text._ZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE:00000000 $t
     /tmp/cciwBMLV.s:5317   .text._ZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE:00000000 _ZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
     /tmp/cciwBMLV.s:8186   .rodata._ZZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorEE19__PRETTY_FUNCTION__:00000000 _ZZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorEE19__PRETTY_FUNCTION__
     /tmp/cciwBMLV.s:7566   .text._ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE:00000000 _ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE
     /tmp/cciwBMLV.s:5418   .text._ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE:00000000 $t
     /tmp/cciwBMLV.s:5423   .text._ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE:00000000 _ZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorE
     /tmp/cciwBMLV.s:8178   .rodata._ZZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorEE19__PRETTY_FUNCTION__:00000000 _ZZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorEE19__PRETTY_FUNCTION__
     /tmp/cciwBMLV.s:8010   .text._ZSt3minIiERKT_S2_S2_:00000000 _ZSt3minIiERKT_S2_S2_
     /tmp/cciwBMLV.s:8058   .text._ZSt3maxIiERKT_S2_S2_:00000000 _ZSt3maxIiERKT_S2_S2_
     /tmp/cciwBMLV.s:5744   .text._ZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_:00000000 $t
     /tmp/cciwBMLV.s:8169   .rodata._ZZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_E19__PRETTY_FUNCTION__:00000000 _ZZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_E19__PRETTY_FUNCTION__
     /tmp/cciwBMLV.s:6140   .text._ZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_:00000000 $t
     /tmp/cciwBMLV.s:6145   .text._ZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_:00000000 _ZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_
     /tmp/cciwBMLV.s:8160   .rodata._ZZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_E19__PRETTY_FUNCTION__:00000000 _ZZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_E19__PRETTY_FUNCTION__
     /tmp/cciwBMLV.s:6948   .text._ZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_:00000838 $d
     /tmp/cciwBMLV.s:6954   .text._ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE:00000000 $t
     /tmp/cciwBMLV.s:6959   .text._ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE:00000000 _ZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorE
     /tmp/cciwBMLV.s:8152   .rodata._ZZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorEE19__PRETTY_FUNCTION__:00000000 _ZZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorEE19__PRETTY_FUNCTION__
     /tmp/cciwBMLV.s:7254   .text._ZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKh:00000000 $t
     /tmp/cciwBMLV.s:7259   .text._ZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKh:00000000 _ZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKh
     /tmp/cciwBMLV.s:8144   .rodata._ZZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKhE19__PRETTY_FUNCTION__:00000000 _ZZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKhE19__PRETTY_FUNCTION__
     /tmp/cciwBMLV.s:7437   .text._ZN24MonochromeDisplayPainter19_createOffsetBitmapEb:00000000 $t
     /tmp/cciwBMLV.s:7561   .text._ZN24MonochromeDisplayPainter9_setPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorE:00000000 $t
     /tmp/cciwBMLV.s:7815   .text._ZN24MonochromeDisplayPainter12_syncDisplayEii:00000000 $t
     /tmp/cciwBMLV.s:8005   .text._ZSt3minIiERKT_S2_S2_:00000000 $t
     /tmp/cciwBMLV.s:8053   .text._ZSt3maxIiERKT_S2_S2_:00000000 $t
     /tmp/cciwBMLV.s:8102   .rodata._ZTV24MonochromeDisplayPainter:00000000 $d
     /tmp/cciwBMLV.s:8111   .rodata._ZL9fix16_max:00000000 $d
     /tmp/cciwBMLV.s:8114   .rodata._ZL9fix16_max:00000000 _ZL9fix16_max
     /tmp/cciwBMLV.s:8117   .rodata._ZL9fix16_min:00000000 $d
     /tmp/cciwBMLV.s:8120   .rodata._ZL9fix16_min:00000000 _ZL9fix16_min
     /tmp/cciwBMLV.s:8123   .rodata._ZL8fix16_pi:00000000 $d
     /tmp/cciwBMLV.s:8126   .rodata._ZL8fix16_pi:00000000 _ZL8fix16_pi
     /tmp/cciwBMLV.s:8129   .rodata._ZL7fix16_e:00000000 $d
     /tmp/cciwBMLV.s:8132   .rodata._ZL7fix16_e:00000000 _ZL7fix16_e
     /tmp/cciwBMLV.s:8135   .rodata._ZL9fix16_one:00000000 $d
     /tmp/cciwBMLV.s:8138   .rodata._ZL9fix16_one:00000000 _ZL9fix16_one
     /tmp/cciwBMLV.s:8141   .rodata._ZZN24MonochromeDisplayPainter10drawBitmapERKN18IMonochromeDisplay5PointERKNS0_4SizeEPKhE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/cciwBMLV.s:8149   .rodata._ZZN24MonochromeDisplayPainter8drawTextERKN18IMonochromeDisplay5PointERKSsNS0_10PixelColorEE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/cciwBMLV.s:8157   .rodata._ZZN24MonochromeDisplayPainter11drawEllipseERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_E19__PRETTY_FUNCTION__:00000000 $d
     /tmp/cciwBMLV.s:8166   .rodata._ZZN24MonochromeDisplayPainter13drawRectangleERKN18IMonochromeDisplay5PointERKNS0_4SizeENS0_10PixelColorES7_E19__PRETTY_FUNCTION__:00000000 $d
     /tmp/cciwBMLV.s:8175   .rodata._ZZN24MonochromeDisplayPainter8drawLineERKN18IMonochromeDisplay5PointES3_NS0_10PixelColorEE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/cciwBMLV.s:8183   .rodata._ZZN24MonochromeDisplayPainter9drawPixelERKN18IMonochromeDisplay5PointENS0_10PixelColorEE19__PRETTY_FUNCTION__:00000000 $d
     /tmp/cciwBMLV.s:8191   .rodata._ZZN24MonochromeDisplayPainter5clearEN18IMonochromeDisplay10PixelColorEE19__PRETTY_FUNCTION__:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 _ZN18IMonochromeDisplay5PointC5Eii
                           .group:00000000 _ZN5Fix16C5Ev
                           .group:00000000 _ZN5Fix16C5ERKS_
                           .group:00000000 _ZN5Fix16C5Ei

UNDEFINED SYMBOLS
__aeabi_dmul
__aeabi_dadd
__aeabi_d2iz
fix16_mul
fix16_div
fix16_sin
fix16_cos
_ZdlPv
_ZdaPv
__assert_func
memset
_ZNKSs5emptyEv
_ZNKSsixEj
_ZN24MonochromeDisplayPainter10FontLookupE
_ZNKSs4sizeEv
_Znaj
