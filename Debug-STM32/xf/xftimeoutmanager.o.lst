   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"xftimeoutmanager.cpp"
  23              	.Ltext0:
  24              		.file 1 "../xf/xftimeoutmanager.cpp"
 18540              		.align	2
 18541              		.thumb
 18542              		.thumb_func
 18544              	NVIC_SetPriority:
 18545              	.LFB20:
   1:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**************************************************************************//**
   2:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @file     core_cm3.h
   3:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @version  V1.30
   5:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @date     30. October 2009
   6:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
   7:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @note
   8:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
  10:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @par
  11:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * within development tools that are supporting such ARM based processors. 
  14:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
  15:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @par
  16:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
  22:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  ******************************************************************************/
  23:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  24:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #ifndef __CM3_CORE_H__
  25:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __CM3_CORE_H__
  26:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  27:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_LintCinfiguration CMSIS CM3 Core Lint Configuration
  28:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
  29:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * List of Lint messages which will be suppressed and not shown:
  30:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *   - Error 10: \n
  31:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     register uint32_t __regBasePri         __asm("basepri"); \n
  32:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     Error 10: Expecting ';'
  33:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * .
  34:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *   - Error 530: \n
  35:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     return(__regBasePri); \n
  36:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     Warning 530: Symbol '__regBasePri' (line 264) not initialized
  37:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * . 
  38:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *   - Error 550: \n
  39:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     __regBasePri = (basePri & 0x1ff); \n
  40:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     Warning 550: Symbol '__regBasePri' (line 271) not accessed
  41:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * .
  42:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *   - Error 754: \n
  43:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     uint32_t RESERVED0[24]; \n
  44:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     Info 754: local structure member '<some, not used in the HAL>' (line 109, file ./cm3_core.h)
  45:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * .
  46:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *   - Error 750: \n
  47:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     #define __CM3_CORE_H__ \n
  48:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     Info 750: local macro '__CM3_CORE_H__' (line 43, file./cm3_core.h) not referenced
  49:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * .
  50:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *   - Error 528: \n
  51:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     static __INLINE void NVIC_DisableIRQ(uint32_t IRQn) \n
  52:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     Warning 528: Symbol 'NVIC_DisableIRQ(unsigned int)' (line 419, file ./cm3_core.h) not refere
  53:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * .
  54:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *   - Error 751: \n
  55:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     } InterruptType_Type; \n
  56:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *     Info 751: local typedef 'InterruptType_Type' (line 170, file ./cm3_core.h) not referenced
  57:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * .
  58:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Note:  To re-enable a Message, insert a space before 'lint' *
  59:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
  60:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
  61:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  62:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*lint -save */
  63:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*lint -e10  */
  64:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*lint -e530 */
  65:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*lint -e550 */
  66:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*lint -e754 */
  67:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*lint -e750 */
  68:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*lint -e528 */
  69:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*lint -e751 */
  70:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  71:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  72:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_definitions CM3 Core Definitions
  73:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   This file defines all structures and symbols for CMSIS core:
  74:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     - CMSIS version number
  75:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     - Cortex-M core registers and bitfields
  76:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     - Cortex-M core peripheral base address
  77:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   @{
  78:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
  79:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  80:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #ifdef __cplusplus
  81:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  extern "C" {
  82:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif 
  83:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  84:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x01)                                                       /*!<
  85:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x30)                                                       /*!<
  86:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | __CM3_CMSIS_VERSION_SUB) /*!<
  87:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  88:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __CORTEX_M                (0x03)                                                       /*!<
  89:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  90:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #include <stdint.h>                           /* Include standard types */
  91:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  92:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #if defined (__ICCARM__)
  93:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #include <intrinsics.h>                     /* IAR Intrinsics   */
  94:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif
  95:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  96:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
  97:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #ifndef __NVIC_PRIO_BITS
  98:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __NVIC_PRIO_BITS    4               /*!< standard definition for NVIC Priority Bits */
  99:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif
 100:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 101:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 102:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 103:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 104:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 105:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * IO definitions
 106:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 107:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * define access restrictions to peripheral registers
 108:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 109:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 110:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #ifdef __cplusplus
 111:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define     __I     volatile                /*!< defines 'read only' permissions      */
 112:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #else
 113:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define     __I     volatile const          /*!< defines 'read only' permissions      */
 114:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif
 115:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define     __O     volatile                  /*!< defines 'write only' permissions     */
 116:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define     __IO    volatile                  /*!< defines 'read / write' permissions   */
 117:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 118:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 119:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 120:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*******************************************************************************
 121:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *                 Register Abstraction
 122:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  ******************************************************************************/
 123:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_core_register CMSIS CM3 Core Register
 124:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  @{
 125:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** */
 126:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 127:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 128:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC
 129:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   memory mapped structure for Nested Vectored Interrupt Controller (NVIC)
 130:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   @{
 131:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 132:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** typedef struct
 133:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 134:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t ISER[8];                      /*!< Offset: 0x000  Interrupt Set Enable Register    
 135:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED0[24];                                   
 136:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t ICER[8];                      /*!< Offset: 0x080  Interrupt Clear Enable Register  
 137:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RSERVED1[24];                                    
 138:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t ISPR[8];                      /*!< Offset: 0x100  Interrupt Set Pending Register   
 139:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED2[24];                                   
 140:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t ICPR[8];                      /*!< Offset: 0x180  Interrupt Clear Pending Register 
 141:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED3[24];                                   
 142:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t IABR[8];                      /*!< Offset: 0x200  Interrupt Active bit Register    
 143:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED4[56];                                   
 144:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint8_t  IP[240];                      /*!< Offset: 0x300  Interrupt Priority Register (8Bit
 145:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED5[644];                                  
 146:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __O  uint32_t STIR;                         /*!< Offset: 0xE00  Software Trigger Interrupt Regist
 147:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }  NVIC_Type;                                               
 148:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_NVIC */
 149:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 150:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 151:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SCB CMSIS CM3 SCB
 152:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   memory mapped structure for System Control Block (SCB)
 153:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   @{
 154:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 155:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** typedef struct
 156:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 157:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t CPUID;                        /*!< Offset: 0x00  CPU ID Base Register              
 158:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t ICSR;                         /*!< Offset: 0x04  Interrupt Control State Register  
 159:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t VTOR;                         /*!< Offset: 0x08  Vector Table Offset Register      
 160:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t AIRCR;                        /*!< Offset: 0x0C  Application Interrupt / Reset Cont
 161:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t SCR;                          /*!< Offset: 0x10  System Control Register           
 162:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t CCR;                          /*!< Offset: 0x14  Configuration Control Register    
 163:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint8_t  SHP[12];                      /*!< Offset: 0x18  System Handlers Priority Registers
 164:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t SHCSR;                        /*!< Offset: 0x24  System Handler Control and State R
 165:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t CFSR;                         /*!< Offset: 0x28  Configurable Fault Status Register
 166:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t HFSR;                         /*!< Offset: 0x2C  Hard Fault Status Register        
 167:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t DFSR;                         /*!< Offset: 0x30  Debug Fault Status Register       
 168:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t MMFAR;                        /*!< Offset: 0x34  Mem Manage Address Register       
 169:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t BFAR;                         /*!< Offset: 0x38  Bus Fault Address Register        
 170:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t AFSR;                         /*!< Offset: 0x3C  Auxiliary Fault Status Register   
 171:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PFR[2];                       /*!< Offset: 0x40  Processor Feature Register        
 172:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t DFR;                          /*!< Offset: 0x48  Debug Feature Register            
 173:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t ADR;                          /*!< Offset: 0x4C  Auxiliary Feature Register        
 174:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t MMFR[4];                      /*!< Offset: 0x50  Memory Model Feature Register     
 175:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t ISAR[5];                      /*!< Offset: 0x60  ISA Feature Register              
 176:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** } SCB_Type;                                                
 177:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 178:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB CPUID Register Definitions */
 179:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 180:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFul << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 181:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 182:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 183:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFul << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 184:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 185:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 186:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFul << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 187:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 188:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 189:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFul << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 190:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 191:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 192:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 193:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1ul << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 194:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 195:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 196:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1ul << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 197:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 198:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 199:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1ul << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 200:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 201:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 202:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1ul << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 203:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 204:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 205:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1ul << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 206:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 207:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 208:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1ul << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 209:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 210:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 211:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1ul << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 212:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 213:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 214:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFul << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 215:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 216:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 217:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1ul << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 218:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 219:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 220:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFul << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 221:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 222:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 223:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 224:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (0x1FFul << SCB_VTOR_TBLBASE_Pos)              /*!< SCB 
 225:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 226:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 227:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFul << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 228:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 229:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 230:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 231:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFul << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 232:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 233:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 234:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFul << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 235:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 236:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 237:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1ul << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 238:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 239:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 240:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7ul << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 241:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 242:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 243:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1ul << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 244:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 245:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 246:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1ul << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 247:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 248:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 249:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1ul << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 250:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 251:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB System Control Register Definitions */
 252:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 253:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1ul << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 254:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 255:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 256:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1ul << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 257:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 258:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 259:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1ul << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 260:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 261:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 262:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 263:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1ul << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 264:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 265:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 266:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1ul << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 267:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 268:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 269:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1ul << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 270:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 271:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 272:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1ul << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 273:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 274:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 275:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1ul << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 276:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 277:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 278:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1ul << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 279:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 280:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 281:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 282:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1ul << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 283:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 284:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 285:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1ul << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 286:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 287:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 288:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1ul << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 289:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 290:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 291:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1ul << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 292:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 293:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 294:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1ul << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 295:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 296:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 297:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1ul << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 298:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 299:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 300:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1ul << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 301:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 302:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 303:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1ul << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 304:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 305:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 306:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1ul << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 307:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 308:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 309:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1ul << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 310:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 311:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 312:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1ul << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 313:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****                                      
 314:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 315:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1ul << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 316:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 317:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 318:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1ul << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 319:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 320:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 321:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1ul << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 322:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 323:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 324:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 325:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFul << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 326:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 327:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 328:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFul << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 329:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 330:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 331:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFul << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 332:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 333:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 334:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 335:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1ul << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 336:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 337:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 338:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1ul << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 339:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 340:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 341:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1ul << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 342:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 343:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 344:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 345:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1ul << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 346:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 347:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 348:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1ul << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 349:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 350:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 351:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1ul << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 352:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 353:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 354:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1ul << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 355:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 356:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 357:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1ul << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 358:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SCB */
 359:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 360:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 361:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_SysTick CMSIS CM3 SysTick
 362:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   memory mapped structure for SysTick
 363:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   @{
 364:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 365:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** typedef struct
 366:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 367:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x00  SysTick Control and Status Registe
 368:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t LOAD;                         /*!< Offset: 0x04  SysTick Reload Value Register     
 369:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t VAL;                          /*!< Offset: 0x08  SysTick Current Value Register    
 370:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t CALIB;                        /*!< Offset: 0x0C  SysTick Calibration Register      
 371:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** } SysTick_Type;
 372:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 373:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 374:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 375:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1ul << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 376:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 377:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 378:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1ul << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 379:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 380:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 381:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1ul << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 382:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 383:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 384:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1ul << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 385:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 386:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SysTick Reload Register Definitions */
 387:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 388:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFul << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 389:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 390:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SysTick Current Register Definitions */
 391:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 392:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 393:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 394:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* SysTick Calibration Register Definitions */
 395:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 396:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1ul << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 397:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 398:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 399:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1ul << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 400:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 401:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 402:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFul << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 403:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_SysTick */
 404:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 405:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 406:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_ITM CMSIS CM3 ITM
 407:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   memory mapped structure for Instrumentation Trace Macrocell (ITM)
 408:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   @{
 409:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 410:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** typedef struct
 411:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 412:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __O  union  
 413:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   {
 414:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     __O  uint8_t    u8;                       /*!< Offset:       ITM Stimulus Port 8-bit           
 415:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     __O  uint16_t   u16;                      /*!< Offset:       ITM Stimulus Port 16-bit          
 416:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     __O  uint32_t   u32;                      /*!< Offset:       ITM Stimulus Port 32-bit          
 417:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   }  PORT [32];                               /*!< Offset: 0x00  ITM Stimulus Port Registers       
 418:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED0[864];                                 
 419:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t TER;                          /*!< Offset:       ITM Trace Enable Register         
 420:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED1[15];                                  
 421:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t TPR;                          /*!< Offset:       ITM Trace Privilege Register      
 422:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED2[15];                                  
 423:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t TCR;                          /*!< Offset:       ITM Trace Control Register        
 424:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 425:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t IWR;                          /*!< Offset:       ITM Integration Write Register    
 426:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t IRR;                          /*!< Offset:       ITM Integration Read Register     
 427:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t IMCR;                         /*!< Offset:       ITM Integration Mode Control Regis
 428:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 429:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t LAR;                          /*!< Offset:       ITM Lock Access Register          
 430:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t LSR;                          /*!< Offset:       ITM Lock Status Register          
 431:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 432:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PID4;                         /*!< Offset:       ITM Peripheral Identification Regi
 433:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PID5;                         /*!< Offset:       ITM Peripheral Identification Regi
 434:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PID6;                         /*!< Offset:       ITM Peripheral Identification Regi
 435:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PID7;                         /*!< Offset:       ITM Peripheral Identification Regi
 436:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PID0;                         /*!< Offset:       ITM Peripheral Identification Regi
 437:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PID1;                         /*!< Offset:       ITM Peripheral Identification Regi
 438:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PID2;                         /*!< Offset:       ITM Peripheral Identification Regi
 439:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t PID3;                         /*!< Offset:       ITM Peripheral Identification Regi
 440:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t CID0;                         /*!< Offset:       ITM Component  Identification Regi
 441:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t CID1;                         /*!< Offset:       ITM Component  Identification Regi
 442:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t CID2;                         /*!< Offset:       ITM Component  Identification Regi
 443:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t CID3;                         /*!< Offset:       ITM Component  Identification Regi
 444:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** } ITM_Type;                                                
 445:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 446:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 447:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 448:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFul << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 449:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 450:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ITM Trace Control Register Definitions */
 451:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 452:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1ul << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 453:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 454:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Pos                  16                                             /*!< ITM 
 455:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_ATBID_Msk                  (0x7Ful << ITM_TCR_ATBID_Pos)                  /*!< ITM 
 456:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 457:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 458:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3ul << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 459:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 460:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 461:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1ul << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 462:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 463:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 464:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1ul << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 465:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 466:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 467:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1ul << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 468:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 469:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 470:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1ul << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 471:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 472:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 473:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1ul << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 474:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 475:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ITM Integration Write Register Definitions */
 476:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 477:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1ul << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 478:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 479:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ITM Integration Read Register Definitions */
 480:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 481:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1ul << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 482:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 483:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 484:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 485:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1ul << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 486:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 487:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ITM Lock Status Register Definitions */
 488:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 489:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1ul << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 490:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 491:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 492:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1ul << ITM_LSR_Access_Pos)                    /*!< ITM 
 493:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 494:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 495:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_LSR_Present_Msk                (1ul << ITM_LSR_Present_Pos)                   /*!< ITM 
 496:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_ITM */
 497:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 498:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 499:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_InterruptType CMSIS CM3 Interrupt Type
 500:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   memory mapped structure for Interrupt Type
 501:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   @{
 502:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 503:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** typedef struct
 504:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 505:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED0;
 506:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t ICTR;                         /*!< Offset: 0x04  Interrupt Control Type Register */
 507:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 508:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t ACTLR;                        /*!< Offset: 0x08  Auxiliary Control Register      */
 509:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #else
 510:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****        uint32_t RESERVED1;
 511:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif
 512:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** } InterruptType_Type;
 513:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 514:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 515:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Pos  0                                             /*!< Inte
 516:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType_ICTR_INTLINESNUM_Msk (0x1Ful << InterruptType_ICTR_INTLINESNUM_Pos) /*!< Inte
 517:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 518:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* Auxiliary Control Register Definitions */
 519:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Pos     2                                             /*!< Inte
 520:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISFOLD_Msk    (1ul << InterruptType_ACTLR_DISFOLD_Pos)       /*!< Inte
 521:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 522:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Pos  1                                             /*!< Inte
 523:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISDEFWBUF_Msk (1ul << InterruptType_ACTLR_DISDEFWBUF_Pos)    /*!< Inte
 524:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 525:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Pos  0                                             /*!< Inte
 526:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType_ACTLR_DISMCYCINT_Msk (1ul << InterruptType_ACTLR_DISMCYCINT_Pos)    /*!< Inte
 527:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_InterruptType */
 528:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 529:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 530:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 531:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_MPU CMSIS CM3 MPU
 532:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   memory mapped structure for Memory Protection Unit (MPU)
 533:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   @{
 534:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 535:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** typedef struct
 536:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 537:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __I  uint32_t TYPE;                         /*!< Offset: 0x00  MPU Type Register                 
 538:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t CTRL;                         /*!< Offset: 0x04  MPU Control Register              
 539:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RNR;                          /*!< Offset: 0x08  MPU Region RNRber Register        
 540:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RBAR;                         /*!< Offset: 0x0C  MPU Region Base Address Register  
 541:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RASR;                         /*!< Offset: 0x10  MPU Region Attribute and Size Regi
 542:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RBAR_A1;                      /*!< Offset: 0x14  MPU Alias 1 Region Base Address Re
 543:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RASR_A1;                      /*!< Offset: 0x18  MPU Alias 1 Region Attribute and S
 544:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RBAR_A2;                      /*!< Offset: 0x1C  MPU Alias 2 Region Base Address Re
 545:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RASR_A2;                      /*!< Offset: 0x20  MPU Alias 2 Region Attribute and S
 546:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RBAR_A3;                      /*!< Offset: 0x24  MPU Alias 3 Region Base Address Re
 547:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t RASR_A3;                      /*!< Offset: 0x28  MPU Alias 3 Region Attribute and S
 548:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** } MPU_Type;                                                
 549:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 550:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* MPU Type Register */
 551:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
 552:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFul << MPU_TYPE_IREGION_Pos)               /*!< MPU 
 553:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 554:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
 555:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFul << MPU_TYPE_DREGION_Pos)               /*!< MPU 
 556:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 557:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
 558:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1ul << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
 559:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 560:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* MPU Control Register */
 561:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
 562:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1ul << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
 563:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 564:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
 565:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1ul << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
 566:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 567:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
 568:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1ul << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
 569:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 570:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* MPU Region Number Register */
 571:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
 572:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFul << MPU_RNR_REGION_Pos)                 /*!< MPU 
 573:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 574:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* MPU Region Base Address Register */
 575:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
 576:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFul << MPU_RBAR_ADDR_Pos)             /*!< MPU 
 577:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 578:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
 579:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1ul << MPU_RBAR_VALID_Pos)                    /*!< MPU 
 580:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 581:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
 582:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFul << MPU_RBAR_REGION_Pos)                 /*!< MPU 
 583:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 584:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* MPU Region Attribute and Size Register */
 585:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
 586:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1ul << MPU_RASR_XN_Pos)                       /*!< MPU 
 587:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 588:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
 589:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_AP_Msk                    (7ul << MPU_RASR_AP_Pos)                       /*!< MPU 
 590:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 591:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
 592:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (7ul << MPU_RASR_TEX_Pos)                      /*!< MPU 
 593:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 594:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
 595:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_S_Msk                     (1ul << MPU_RASR_S_Pos)                        /*!< MPU 
 596:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 597:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
 598:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_C_Msk                     (1ul << MPU_RASR_C_Pos)                        /*!< MPU 
 599:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 600:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
 601:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_B_Msk                     (1ul << MPU_RASR_B_Pos)                        /*!< MPU 
 602:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 603:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
 604:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFul << MPU_RASR_SRD_Pos)                   /*!< MPU 
 605:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 606:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
 607:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1Ful << MPU_RASR_SIZE_Pos)                  /*!< MPU 
 608:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 609:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_ENA_Pos                     0                                            /*!< MPU 
 610:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define MPU_RASR_ENA_Msk                    (0x1Ful << MPU_RASR_ENA_Pos)                  /*!< MPU 
 611:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 612:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_MPU */
 613:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif
 614:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 615:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 616:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_CoreDebug CMSIS CM3 Core Debug
 617:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   memory mapped structure for Core Debug Register
 618:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   @{
 619:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 620:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** typedef struct
 621:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 622:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t DHCSR;                        /*!< Offset: 0x00  Debug Halting Control and Status R
 623:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __O  uint32_t DCRSR;                        /*!< Offset: 0x04  Debug Core Register Selector Regis
 624:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t DCRDR;                        /*!< Offset: 0x08  Debug Core Register Data Register 
 625:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __IO uint32_t DEMCR;                        /*!< Offset: 0x0C  Debug Exception and Monitor Contro
 626:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** } CoreDebug_Type;
 627:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 628:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* Debug Halting Control and Status Register */
 629:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
 630:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFul << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
 631:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 632:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
 633:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1ul << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
 634:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 635:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
 636:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1ul << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
 637:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 638:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
 639:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1ul << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
 640:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 641:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
 642:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1ul << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
 643:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 644:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
 645:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1ul << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
 646:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 647:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
 648:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1ul << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
 649:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 650:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
 651:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1ul << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
 652:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 653:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
 654:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1ul << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
 655:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 656:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
 657:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1ul << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
 658:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 659:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
 660:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1ul << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
 661:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 662:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
 663:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1ul << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
 664:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 665:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* Debug Core Register Selector Register */
 666:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
 667:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1ul << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
 668:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 669:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
 670:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1Ful << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
 671:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 672:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* Debug Exception and Monitor Control Register */
 673:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
 674:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1ul << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
 675:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 676:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
 677:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1ul << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
 678:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 679:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
 680:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1ul << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
 681:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 682:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
 683:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1ul << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
 684:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 685:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
 686:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1ul << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
 687:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 688:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
 689:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1ul << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
 690:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 691:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
 692:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1ul << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
 693:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 694:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
 695:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1ul << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
 696:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 697:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
 698:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1ul << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
 699:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 700:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
 701:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1ul << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
 702:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 703:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
 704:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1ul << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
 705:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 706:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
 707:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1ul << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
 708:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 709:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
 710:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1ul << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
 711:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_CoreDebug */
 712:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 713:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 714:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
 715:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCS_BASE            (0xE000E000)                              /*!< System Control Space Bas
 716:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM_BASE            (0xE0000000)                              /*!< ITM Base Address        
 717:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0)                              /*!< Core Debug Base Address 
 718:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010)                      /*!< SysTick Base Address    
 719:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100)                      /*!< NVIC Base Address       
 720:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00)                      /*!< System Control Block Bas
 721:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 722:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define InterruptType       ((InterruptType_Type *) SCS_BASE)         /*!< Interrupt Type Register 
 723:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SCB                 ((SCB_Type *)           SCB_BASE)         /*!< SCB configuration struct
 724:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define SysTick             ((SysTick_Type *)       SysTick_BASE)     /*!< SysTick configuration st
 725:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define NVIC                ((NVIC_Type *)          NVIC_BASE)        /*!< NVIC configuration struc
 726:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define ITM                 ((ITM_Type *)           ITM_BASE)         /*!< ITM configuration struct
 727:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
 728:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 729:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1)
 730:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90)                      /*!< Memory Protection Unit  
 731:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define MPU               ((MPU_Type*)            MPU_BASE)         /*!< Memory Protection Unit  
 732:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif
 733:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 734:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@}*/ /* end of group CMSIS_CM3_core_register */
 735:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 736:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 737:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*******************************************************************************
 738:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *                Hardware Abstraction Layer
 739:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  ******************************************************************************/
 740:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 741:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #if defined ( __CC_ARM   )
 742:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
 743:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
 744:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 745:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #elif defined ( __ICCARM__ )
 746:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
 747:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
 748:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 749:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #elif defined   (  __GNUC__  )
 750:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
 751:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
 752:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 753:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #elif defined   (  __TASKING__  )
 754:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 755:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 756:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 757:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif
 758:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 759:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 760:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ###################  Compiler specific Intrinsics  ########################### */
 761:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 762:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
 763:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ARM armcc specific functions */
 764:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 765:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __enable_fault_irq                __enable_fiq
 766:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __disable_fault_irq               __disable_fiq
 767:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 768:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __NOP                             __nop
 769:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __WFI                             __wfi
 770:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __WFE                             __wfe
 771:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __SEV                             __sev
 772:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __ISB()                           __isb(0)
 773:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __DSB()                           __dsb(0)
 774:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __DMB()                           __dmb(0)
 775:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __REV                             __rev
 776:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __RBIT                            __rbit
 777:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __LDREXB(ptr)                     ((unsigned char ) __ldrex(ptr))
 778:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __LDREXH(ptr)                     ((unsigned short) __ldrex(ptr))
 779:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __LDREXW(ptr)                     ((unsigned int  ) __ldrex(ptr))
 780:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 781:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 782:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 783:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 784:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 785:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic unsigned long long __ldrexd(volatile void *ptr) */
 786:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic int __strexd(unsigned long long val, volatile void *ptr) */
 787:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __enable_irq();     */
 788:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __disable_irq();    */
 789:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 790:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 791:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 792:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
 793:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 794:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return ProcessStackPointer
 795:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 796:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the actual process stack pointer
 797:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 798:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
 799:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 800:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 801:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
 802:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 803:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
 804:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 805:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
 806:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
 807:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 808:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
 809:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 810:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 811:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
 812:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 813:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return Main Stack Pointer
 814:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 815:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
 816:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Cortex processor register
 817:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 818:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
 819:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 820:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 821:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
 822:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 823:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
 824:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 825:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
 826:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
 827:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 828:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
 829:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 830:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 831:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
 832:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 833:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param   value  value to reverse
 834:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return         reversed value
 835:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 836:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
 837:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 838:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
 839:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 840:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 841:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 842:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 843:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param   value  value to reverse
 844:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return         reversed value
 845:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 846:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
 847:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 848:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
 849:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 850:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 851:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #if (__ARMCC_VERSION < 400000)
 852:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 853:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 854:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 855:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 856:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 857:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 858:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __CLREX(void);
 859:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 860:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 861:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 862:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 863:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return BasePriority
 864:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 865:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the base priority register
 866:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 867:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
 868:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 869:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 870:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 871:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 872:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 873:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 874:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the base priority register
 875:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 876:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
 877:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 878:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 879:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 880:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 881:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return PriMask
 882:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 883:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 884:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 885:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_PRIMASK(void);
 886:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 887:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 888:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 889:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 890:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param   priMask  PriMask
 891:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 892:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 893:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 894:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
 895:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 896:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 897:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 898:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 899:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return FaultMask
 900:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 901:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the fault mask register
 902:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 903:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
 904:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 905:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 906:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
 907:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 908:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  faultMask faultMask value
 909:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 910:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the fault mask register
 911:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 912:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
 913:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 914:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 915:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Control Register value
 916:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * 
 917:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return Control value
 918:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 919:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the control register
 920:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 921:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
 922:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 923:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 924:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Control Register value
 925:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 926:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  control  Control value
 927:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 928:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the control register
 929:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 930:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
 931:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 932:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #else  /* (__ARMCC_VERSION >= 400000)  */
 933:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 934:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 935:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Remove the exclusive lock created by ldrex
 936:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 937:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Removes the exclusive lock which is created by ldrex.
 938:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 939:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __CLREX                           __clrex
 940:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 941:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 942:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
 943:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 944:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return BasePriority
 945:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 946:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the base priority register
 947:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 948:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t  __get_BASEPRI(void)
 949:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 950:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 951:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return(__regBasePri);
 952:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
 953:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 954:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 955:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
 956:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 957:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  basePri  BasePriority
 958:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 959:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the base priority register
 960:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 961:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __set_BASEPRI(uint32_t basePri)
 962:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 963:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   register uint32_t __regBasePri         __ASM("basepri");
 964:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __regBasePri = (basePri & 0xff);
 965:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
 966:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 967:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 968:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
 969:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 970:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return PriMask
 971:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 972:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
 973:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 974:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t __get_PRIMASK(void)
 975:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 976:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 977:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return(__regPriMask);
 978:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
 979:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 980:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 981:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
 982:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 983:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  priMask  PriMask
 984:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 985:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
 986:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
 987:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __set_PRIMASK(uint32_t priMask)
 988:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 989:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   register uint32_t __regPriMask         __ASM("primask");
 990:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __regPriMask = (priMask);
 991:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
 992:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
 993:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
 994:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
 995:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 996:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return FaultMask
 997:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
 998:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the fault mask register
 999:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1000:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t __get_FAULTMASK(void)
1001:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1002:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1003:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return(__regFaultMask);
1004:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1005:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1006:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1007:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1008:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1009:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1010:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1011:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the fault mask register
1012:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1013:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __set_FAULTMASK(uint32_t faultMask)
1014:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1015:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   register uint32_t __regFaultMask       __ASM("faultmask");
1016:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __regFaultMask = (faultMask & 1);
1017:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1018:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1019:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1020:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1021:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * 
1022:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return Control value
1023:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1024:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the control register
1025:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1026:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t __get_CONTROL(void)
1027:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1028:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1029:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return(__regControl);
1030:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1031:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1032:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1033:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1034:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1035:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  control  Control value
1036:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1037:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the control register
1038:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1039:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __set_CONTROL(uint32_t control)
1040:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1041:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   register uint32_t __regControl         __ASM("control");
1042:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   __regControl = control;
1043:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1044:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1045:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif /* __ARMCC_VERSION  */ 
1046:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1047:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1048:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1049:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
1050:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* IAR iccarm specific functions */
1051:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1052:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __enable_irq                              __enable_interrupt        /*!< global Interrupt e
1053:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __disable_irq                             __disable_interrupt       /*!< global Interrupt d
1054:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1055:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM ("cpsie f"); }
1056:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM ("cpsid f"); }
1057:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1058:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #define __NOP                                     __no_operation            /*!< no operation intri
1059:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE  void __WFI()                     { __ASM ("wfi"); }
1060:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE  void __WFE()                     { __ASM ("wfe"); }
1061:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE  void __SEV()                     { __ASM ("sev"); }
1062:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE  void __CLREX()                   { __ASM ("clrex"); }
1063:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1064:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __ISB(void)                                     */
1065:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __DSB(void)                                     */
1066:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __DMB(void)                                     */
1067:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __set_PRIMASK();                                */
1068:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __get_PRIMASK();                                */
1069:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __set_FAULTMASK();                              */
1070:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic void __get_FAULTMASK();                              */
1071:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic uint32_t __REV(uint32_t value);                      */
1072:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic uint32_t __REVSH(uint32_t value);                    */
1073:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic unsigned long __STREX(unsigned long, unsigned long); */
1074:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* intrinsic unsigned long __LDREX(unsigned long *);              */
1075:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1076:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1077:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1078:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1079:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1080:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return ProcessStackPointer
1081:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1082:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the actual process stack pointer
1083:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1084:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1085:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1086:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1087:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1088:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1089:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1090:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1091:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1092:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1093:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1094:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1095:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1096:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1097:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1098:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1099:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return Main Stack Pointer
1100:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1101:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1102:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Cortex processor register
1103:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1104:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
1105:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1106:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1107:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1108:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1109:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1110:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1111:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1112:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1113:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1114:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1115:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1116:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1117:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1118:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1119:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to reverse
1120:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        reversed value
1121:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1122:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1123:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1124:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1125:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1126:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1127:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1128:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1129:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to reverse
1130:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        reversed value
1131:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1132:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Reverse bit order of value
1133:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1134:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1135:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1136:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1137:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1138:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1139:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1140:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        value of (*address)
1141:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1142:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit values)
1143:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1144:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1145:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1146:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1147:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1148:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1149:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1150:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        value of (*address)
1151:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1152:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1153:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1154:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1155:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1156:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1157:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1158:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1159:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1160:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        value of (*address)
1161:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1162:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1163:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1164:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1165:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1166:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1167:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1168:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1169:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to store
1170:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1171:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        successful / failed
1172:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1173:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1174:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1175:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1176:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1177:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1178:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1179:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1180:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to store
1181:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1182:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        successful / failed
1183:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1184:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1185:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1186:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1187:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1188:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1189:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1190:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1191:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to store
1192:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1193:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        successful / failed
1194:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1195:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
1196:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1197:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1198:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1199:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1200:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1201:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
1202:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* GNU gcc specific functions */
1203:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1204:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
1205:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
1206:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1207:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __enable_fault_irq()         { __ASM volatile ("cpsie f"); }
1208:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __disable_fault_irq()        { __ASM volatile ("cpsid f"); }
1209:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1210:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __NOP()                      { __ASM volatile ("nop"); }
1211:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __WFI()                      { __ASM volatile ("wfi"); }
1212:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __WFE()                      { __ASM volatile ("wfe"); }
1213:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __SEV()                      { __ASM volatile ("sev"); }
1214:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __ISB()                      { __ASM volatile ("isb"); }
1215:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __DSB()                      { __ASM volatile ("dsb"); }
1216:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __DMB()                      { __ASM volatile ("dmb"); }
1217:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void __CLREX()                    { __ASM volatile ("clrex"); }
1218:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1219:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1220:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1221:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Process Stack Pointer
1222:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1223:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return ProcessStackPointer
1224:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1225:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the actual process stack pointer
1226:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1227:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_PSP(void);
1228:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1229:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1230:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Process Stack Pointer
1231:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1232:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  topOfProcStack  Process Stack Pointer
1233:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1234:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Assign the value ProcessStackPointer to the MSP 
1235:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * (process stack pointer) Cortex processor register
1236:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1237:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_PSP(uint32_t topOfProcStack);
1238:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1239:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1240:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Main Stack Pointer
1241:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1242:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return Main Stack Pointer
1243:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1244:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the current value of the MSP (main stack pointer)
1245:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Cortex processor register
1246:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1247:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_MSP(void);
1248:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1249:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1250:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Main Stack Pointer
1251:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1252:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  topOfMainStack  Main Stack Pointer
1253:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1254:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Assign the value mainStackPointer to the MSP 
1255:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * (main stack pointer) Cortex processor register
1256:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1257:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_MSP(uint32_t topOfMainStack);
1258:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1259:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1260:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Base Priority value
1261:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1262:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return BasePriority
1263:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1264:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the base priority register
1265:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1266:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_BASEPRI(void);
1267:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1268:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1269:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Base Priority value
1270:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1271:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  basePri  BasePriority
1272:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1273:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the base priority register
1274:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1275:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_BASEPRI(uint32_t basePri);
1276:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1277:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1278:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Priority Mask value
1279:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1280:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return PriMask
1281:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1282:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return state of the priority mask bit from the priority mask register
1283:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1284:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t  __get_PRIMASK(void);
1285:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1286:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1287:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Priority Mask value
1288:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1289:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  priMask  PriMask
1290:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1291:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the priority mask bit in the priority mask register
1292:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1293:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_PRIMASK(uint32_t priMask);
1294:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1295:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1296:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Fault Mask value
1297:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1298:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return FaultMask
1299:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1300:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the fault mask register
1301:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1302:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_FAULTMASK(void);
1303:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1304:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1305:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Fault Mask value
1306:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1307:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  faultMask  faultMask value
1308:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1309:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the fault mask register
1310:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1311:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_FAULTMASK(uint32_t faultMask);
1312:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1313:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1314:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Return the Control Register value
1315:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** * 
1316:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** *  @return Control value
1317:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1318:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Return the content of the control register
1319:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1320:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __get_CONTROL(void);
1321:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1322:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1323:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Control Register value
1324:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1325:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  control  Control value
1326:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1327:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the control register
1328:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1329:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern void __set_CONTROL(uint32_t control);
1330:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1331:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1332:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Reverse byte order in integer value
1333:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1334:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to reverse
1335:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        reversed value
1336:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1337:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Reverse byte order in integer value
1338:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1339:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __REV(uint32_t value);
1340:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1341:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1342:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Reverse byte order in unsigned short value
1343:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1344:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to reverse
1345:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        reversed value
1346:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1347:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Reverse byte order in unsigned short value
1348:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1349:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __REV16(uint16_t value);
1350:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1351:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1352:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Reverse byte order in signed short value with sign extension to integer
1353:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1354:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to reverse
1355:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        reversed value
1356:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1357:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Reverse byte order in signed short value with sign extension to integer
1358:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1359:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern int32_t __REVSH(int16_t value);
1360:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1361:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1362:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Reverse bit order of value
1363:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1364:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to reverse
1365:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        reversed value
1366:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1367:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Reverse bit order of value
1368:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1369:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __RBIT(uint32_t value);
1370:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1371:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1372:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (8 bit)
1373:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1374:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1375:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        value of (*address)
1376:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1377:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive LDR command for 8 bit value
1378:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1379:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint8_t __LDREXB(uint8_t *addr);
1380:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1381:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1382:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (16 bit)
1383:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1384:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1385:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        value of (*address)
1386:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1387:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive LDR command for 16 bit values
1388:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1389:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint16_t __LDREXH(uint16_t *addr);
1390:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1391:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1392:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  LDR Exclusive (32 bit)
1393:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1394:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1395:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        value of (*address)
1396:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1397:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive LDR command for 32 bit values
1398:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1399:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __LDREXW(uint32_t *addr);
1400:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1401:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1402:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  STR Exclusive (8 bit)
1403:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1404:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to store
1405:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1406:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        successful / failed
1407:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1408:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive STR command for 8 bit values
1409:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1410:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __STREXB(uint8_t value, uint8_t *addr);
1411:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1412:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1413:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  STR Exclusive (16 bit)
1414:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1415:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to store
1416:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1417:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        successful / failed
1418:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1419:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive STR command for 16 bit values
1420:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1421:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __STREXH(uint16_t value, uint16_t *addr);
1422:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1423:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1424:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  STR Exclusive (32 bit)
1425:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1426:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  value  value to store
1427:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  *addr  address pointer
1428:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return        successful / failed
1429:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1430:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Exclusive STR command for 32 bit values
1431:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1432:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** extern uint32_t __STREXW(uint32_t value, uint32_t *addr);
1433:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1434:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1435:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #elif (defined (__TASKING__)) /*------------------ TASKING Compiler ---------------------*/
1436:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* TASKING carm specific functions */
1437:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1438:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*
1439:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The CMSIS functions have been implemented as intrinsics in the compiler.
1440:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Please use "carm -?i" to get an up to date list of all instrinsics,
1441:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Including the CMSIS ones.
1442:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1443:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1444:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #endif
1445:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1446:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1447:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /** @addtogroup CMSIS_CM3_Core_FunctionInterface CMSIS CM3 Core Function Interface
1448:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   Core  Function Interface containing:
1449:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   - Core NVIC Functions
1450:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   - Core SysTick Functions
1451:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   - Core Reset Functions
1452:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** */
1453:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /*@{*/
1454:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1455:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1456:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1457:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1458:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the Priority Grouping in NVIC Interrupt Controller
1459:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1460:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  PriorityGroup is priority grouping field
1461:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1462:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the priority grouping field using the required unlock sequence.
1463:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The parameter priority_grouping is assigned to the field 
1464:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * SCB->AIRCR [10:8] PRIGROUP field. Only values from 0..7 are used.
1465:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * In case of a conflict between priority grouping and available
1466:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
1467:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1468:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1469:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1470:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   uint32_t reg_value;
1471:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);                         /* only values 0..7 a
1472:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   
1473:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1474:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1475:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   reg_value  =  (reg_value                       |
1476:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****                 (0x5FA << SCB_AIRCR_VECTKEY_Pos) | 
1477:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1478:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   SCB->AIRCR =  reg_value;
1479:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1480:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1481:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1482:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Get the Priority Grouping from NVIC Interrupt Controller
1483:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1484:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return priority grouping field 
1485:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1486:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Get the priority grouping from NVIC Interrupt Controller.
1487:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * priority grouping is SCB->AIRCR [10:8] PRIGROUP field.
1488:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1489:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriorityGrouping(void)
1490:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1491:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1492:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1493:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1494:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1495:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Enable Interrupt in NVIC Interrupt Controller
1496:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1497:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to enable
1498:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1499:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Enable a device specific interupt in the NVIC interrupt controller.
1500:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1501:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1502:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1503:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1504:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1505:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1506:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1507:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1508:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Disable the interrupt line for external interrupt specified
1509:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * 
1510:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  IRQn   The positive number of the external interrupt to disable
1511:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * 
1512:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Disable a device specific interupt in the NVIC interrupt controller.
1513:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1514:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1515:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1516:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1517:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1518:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1519:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1520:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1521:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Read the interrupt pending bit for a device specific interrupt source
1522:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * 
1523:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  IRQn    The number of the device specifc interrupt
1524:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return         1 = interrupt pending, 0 = interrupt not pending
1525:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1526:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Read the pending register in NVIC and return 1 if its status is pending, 
1527:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * otherwise it returns 0
1528:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1529:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1530:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1531:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1532:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1533:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1534:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1535:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the pending bit for an external interrupt
1536:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * 
1537:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  IRQn    The number of the interrupt for set pending
1538:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1539:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the pending bit for the specified interrupt.
1540:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1541:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1542:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1543:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1544:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1545:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1546:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1547:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1548:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Clear the pending bit for an external interrupt
1549:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1550:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  IRQn    The number of the interrupt for clear pending
1551:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1552:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Clear the pending bit for the specified interrupt. 
1553:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The interrupt number cannot be a negative value.
1554:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1555:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1556:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1557:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1558:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1559:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1560:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1561:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Read the active bit for an external interrupt
1562:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1563:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  IRQn    The number of the interrupt for read active bit
1564:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return         1 = interrupt active, 0 = interrupt not active
1565:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1566:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Read the active register in NVIC and returns 1 if its status is active, 
1567:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * otherwise it returns 0.
1568:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1569:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1570:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1571:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1572:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1573:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1574:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1575:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Set the priority for an interrupt
1576:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1577:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  IRQn      The number of the interrupt for set priority
1578:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  priority  The priority to set
1579:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1580:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Set the priority for the specified interrupt. The interrupt 
1581:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1582:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1583:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1584:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1585:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1586:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1587:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
 18546              		.loc 12 1587 0
 18547              		.cfi_startproc
 18548              		@ args = 0, pretend = 0, frame = 8
 18549              		@ frame_needed = 1, uses_anonymous_args = 0
 18550              		@ link register save eliminated.
 18551 0000 80B4     		push	{r7}
 18552              	.LCFI0:
 18553              		.cfi_def_cfa_offset 4
 18554 0002 83B0     		sub	sp, sp, #12
 18555              	.LCFI1:
 18556              		.cfi_def_cfa_offset 16
 18557 0004 00AF     		add	r7, sp, #0
 18558              		.cfi_offset 7, -4
 18559              	.LCFI2:
 18560              		.cfi_def_cfa_register 7
 18561 0006 0346     		mov	r3, r0
 18562 0008 3960     		str	r1, [r7, #0]
 18563 000a FB71     		strb	r3, [r7, #7]
1588:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   if(IRQn < 0) {
 18564              		.loc 12 1588 0
 18565 000c 97F90730 		ldrsb	r3, [r7, #7]
 18566 0010 002B     		cmp	r3, #0
 18567 0012 10DA     		bge	.L2
1589:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 18568              		.loc 12 1589 0
 18569 0014 4FF46D43 		mov	r3, #60672
 18570 0018 CEF20003 		movt	r3, 57344
 18571 001c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 18572 001e 02F00F02 		and	r2, r2, #15
 18573 0022 A2F10401 		sub	r1, r2, #4
 18574 0026 3A68     		ldr	r2, [r7, #0]
 18575 0028 D2B2     		uxtb	r2, r2
 18576 002a 4FEA0212 		lsl	r2, r2, #4
 18577 002e D2B2     		uxtb	r2, r2
 18578 0030 5B18     		adds	r3, r3, r1
 18579 0032 1A76     		strb	r2, [r3, #24]
 18580 0034 0DE0     		b	.L1
 18581              	.L2:
1590:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   else {
1591:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
 18582              		.loc 12 1591 0
 18583 0036 4FF46143 		mov	r3, #57600
 18584 003a CEF20003 		movt	r3, 57344
 18585 003e 97F90710 		ldrsb	r1, [r7, #7]
 18586 0042 3A68     		ldr	r2, [r7, #0]
 18587 0044 D2B2     		uxtb	r2, r2
 18588 0046 4FEA0212 		lsl	r2, r2, #4
 18589 004a D2B2     		uxtb	r2, r2
 18590 004c 5B18     		adds	r3, r3, r1
 18591 004e 83F80023 		strb	r2, [r3, #768]
 18592              	.L1:
1592:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
 18593              		.loc 12 1592 0
 18594 0052 07F10C07 		add	r7, r7, #12
 18595 0056 BD46     		mov	sp, r7
 18596 0058 80BC     		pop	{r7}
 18597 005a 7047     		bx	lr
 18598              		.cfi_endproc
 18599              	.LFE20:
 18601              		.section	.text.SysTick_Config,"ax",%progbits
 18602              		.align	2
 18603              		.thumb
 18604              		.thumb_func
 18606              	SysTick_Config:
 18607              	.LFB24:
1593:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1594:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1595:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Read the priority for an interrupt
1596:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1597:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  IRQn      The number of the interrupt for get priority
1598:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return           The priority for the interrupt
1599:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1600:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Read the priority for the specified interrupt. The interrupt 
1601:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * number can be positive to specify an external (device specific) 
1602:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * interrupt, or negative to specify an internal (core) interrupt.
1603:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1604:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The returned priority value is automatically aligned to the implemented
1605:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * priority bits of the microcontroller.
1606:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1607:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Note: The priority cannot be set for every core interrupt.
1608:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1609:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1610:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1611:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1612:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   if(IRQn < 0) {
1613:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1614:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   else {
1615:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1616:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1617:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1618:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1619:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1620:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Encode the priority for an interrupt
1621:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1622:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  PriorityGroup    The used priority group
1623:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  PreemptPriority  The preemptive priority value (starting from 0)
1624:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  SubPriority      The sub priority value (starting from 0)
1625:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return                  The encoded priority for the interrupt
1626:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1627:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Encode the priority for an interrupt with the given priority group,
1628:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * preemptive priority value and sub priority value.
1629:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * In case of a conflict between priority grouping and available
1630:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1631:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1632:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The returned priority value can be used for NVIC_SetPriority(...) function
1633:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1634:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1635:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1636:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1637:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   uint32_t PreemptPriorityBits;
1638:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   uint32_t SubPriorityBits;
1639:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1640:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1641:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1642:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  
1643:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return (
1644:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1645:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1646:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****          );
1647:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1648:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1649:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1650:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1651:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Decode the priority of an interrupt
1652:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1653:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  Priority           The priority for the interrupt
1654:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  PriorityGroup      The used priority group
1655:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  pPreemptPriority   The preemptive priority value (starting from 0)
1656:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param  pSubPriority       The sub priority value (starting from 0)
1657:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1658:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Decode an interrupt priority value with the given priority group to 
1659:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * preemptive priority value and sub priority value.
1660:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * In case of a conflict between priority grouping and available
1661:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1662:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1663:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * The priority value can be retrieved with NVIC_GetPriority(...) function
1664:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1665:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1666:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** {
1667:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1668:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   uint32_t PreemptPriorityBits;
1669:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   uint32_t SubPriorityBits;
1670:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1671:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1672:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1673:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   
1674:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1675:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1676:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
1677:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1678:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1679:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1680:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /* ##################################    SysTick function  ########################################
1681:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1682:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** #if (!defined (__Vendor_SysTickConfig)) || (__Vendor_SysTickConfig == 0)
1683:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** 
1684:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** /**
1685:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @brief  Initialize and start the SysTick counter and its interrupt.
1686:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1687:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @param   ticks   number of ticks between two interrupts
1688:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * @return  1 = failed, 0 = successful
1689:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  *
1690:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * Initialise the system tick timer and its interrupt and start the
1691:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * system tick timer / counter in free running mode to generate 
1692:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  * periodical interrupts.
1693:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****  */
1694:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** static __INLINE uint32_t SysTick_Config(uint32_t ticks)
1695:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** { 
 18608              		.loc 12 1695 0
 18609              		.cfi_startproc
 18610              		@ args = 0, pretend = 0, frame = 8
 18611              		@ frame_needed = 1, uses_anonymous_args = 0
 18612 0000 80B5     		push	{r7, lr}
 18613              	.LCFI3:
 18614              		.cfi_def_cfa_offset 8
 18615 0002 82B0     		sub	sp, sp, #8
 18616              	.LCFI4:
 18617              		.cfi_def_cfa_offset 16
 18618 0004 00AF     		add	r7, sp, #0
 18619              		.cfi_offset 14, -4
 18620              		.cfi_offset 7, -8
 18621              	.LCFI5:
 18622              		.cfi_def_cfa_register 7
 18623 0006 7860     		str	r0, [r7, #4]
1696:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 18624              		.loc 12 1696 0
 18625 0008 7A68     		ldr	r2, [r7, #4]
 18626 000a 6FF07F43 		mvn	r3, #-16777216
 18627 000e 9A42     		cmp	r2, r3
 18628 0010 02D9     		bls	.L5
 18629              		.loc 12 1696 0 is_stmt 0 discriminator 1
 18630 0012 4FF00103 		mov	r3, #1
 18631 0016 1FE0     		b	.L6
 18632              	.L5:
1697:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****                                                                
1698:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 18633              		.loc 12 1698 0 is_stmt 1
 18634 0018 4EF21003 		movw	r3, #57360
 18635 001c CEF20003 		movt	r3, 57344
 18636 0020 7A68     		ldr	r2, [r7, #4]
 18637 0022 22F07F42 		bic	r2, r2, #-16777216
 18638 0026 02F1FF32 		add	r2, r2, #-1
 18639 002a 5A60     		str	r2, [r3, #4]
1699:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System
 18640              		.loc 12 1699 0
 18641 002c 4FF0FF30 		mov	r0, #-1
 18642 0030 4FF00F01 		mov	r1, #15
 18643 0034 FFF7FEFF 		bl	NVIC_SetPriority
1700:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 18644              		.loc 12 1700 0
 18645 0038 4EF21003 		movw	r3, #57360
 18646 003c CEF20003 		movt	r3, 57344
 18647 0040 4FF00002 		mov	r2, #0
 18648 0044 9A60     		str	r2, [r3, #8]
1701:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | 
1702:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****                    SysTick_CTRL_TICKINT_Msk   | 
1703:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****                    SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Ti
 18649              		.loc 12 1703 0
 18650 0046 4EF21003 		movw	r3, #57360
 18651 004a CEF20003 		movt	r3, 57344
 18652 004e 4FF00702 		mov	r2, #7
 18653 0052 1A60     		str	r2, [r3, #0]
1704:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h ****   return (0);                                                  /* Function successful */
 18654              		.loc 12 1704 0
 18655 0054 4FF00003 		mov	r3, #0
 18656              	.L6:
1705:/home/desem/workspace/desenet/target/stm32/cmsis/core_cm3.h **** }
 18657              		.loc 12 1705 0
 18658 0058 1846     		mov	r0, r3
 18659 005a 07F10807 		add	r7, r7, #8
 18660 005e BD46     		mov	sp, r7
 18661 0060 80BD     		pop	{r7, pc}
 18662              		.cfi_endproc
 18663              	.LFE24:
 18665 0062 00BF     		.section	.text._ZnwjPv,"axG",%progbits,_ZnwjPv,comdat
 18666              		.align	2
 18667              		.weak	_ZnwjPv
 18668              		.thumb
 18669              		.thumb_func
 18671              	_ZnwjPv:
 18672              	.LFB192:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // The -*- C++ -*- dynamic memory management header.
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // 2003, 2004, 2005, 2006, 2007, 2009, 2010
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // Free Software Foundation
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // This file is part of GCC.
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** //
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // GCC is free software; you can redistribute it and/or modify
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // it under the terms of the GNU General Public License as published by
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // the Free Software Foundation; either version 3, or (at your option)
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // any later version.
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // 
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // GCC is distributed in the hope that it will be useful,
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // GNU General Public License for more details.
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // 
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // Under Section 7 of GPL version 3, you are granted additional
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // permissions described in the GCC Runtime Library Exception, version
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // 3.1, as published by the Free Software Foundation.
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // You should have received a copy of the GNU General Public License and
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // a copy of the GCC Runtime Library Exception along with this program;
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // <http://www.gnu.org/licenses/>.
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** /** @file new
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  This is a Standard C++ Library header.
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  The header @c new defines several functions to manage dynamic memory and
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  handling memory allocation errors; see
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  */
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #ifndef _NEW
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #define _NEW
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #pragma GCC system_header
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #include <cstddef>
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #include <exception>
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** #pragma GCC visibility push(default)
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** extern "C++" {
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** namespace std 
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** {
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   /**
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  @brief  Exception possibly thrown by @c new.
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  @ingroup exceptions
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  errors from the throwing forms of @c new.  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   class bad_alloc : public exception 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   {
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   public:
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     bad_alloc() throw() { }
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     // This declaration is not useless:
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     virtual ~bad_alloc() throw();
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     // See comment in eh_exception.cc.
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****     virtual const char* what() const throw();
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   };
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   struct nothrow_t { };
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   extern const nothrow_t nothrow;
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   /** If you write your own error handler to be called by @c new, it must
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****    *  be of this type.  */
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   typedef void (*new_handler)();
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   /// Takes a replacement handler as the argument, returns the
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   /// previous handler.
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****   new_handler set_new_handler(new_handler) throw();
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** } // namespace std
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** //@{
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** /** These are replaceable signatures:
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  - normal array new and delete (same)
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *    @c NULL on error)
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  - @c nothrow array new and delete (same)
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  Placement new and delete signatures (take a memory address argument,
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new ****  *  does nothing) may not be replaced by a user's program.
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** */
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void* operator new(std::size_t) throw (std::bad_alloc);
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void* operator new[](std::size_t) throw (std::bad_alloc);
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void operator delete(void*) throw();
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void operator delete[](void*) throw();
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void* operator new(std::size_t, const std::nothrow_t&) throw();
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void* operator new[](std::size_t, const std::nothrow_t&) throw();
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void operator delete(void*, const std::nothrow_t&) throw();
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** void operator delete[](void*, const std::nothrow_t&) throw();
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** 
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** // Default placement versions of operator new.
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/new **** inline void* operator new(std::size_t, void* __p) throw() { return __p; }
 18673              		.loc 52 103 0
 18674              		.cfi_startproc
 18675              		@ args = 0, pretend = 0, frame = 8
 18676              		@ frame_needed = 1, uses_anonymous_args = 0
 18677              		@ link register save eliminated.
 18678 0000 80B4     		push	{r7}
 18679              	.LCFI6:
 18680              		.cfi_def_cfa_offset 4
 18681 0002 83B0     		sub	sp, sp, #12
 18682              	.LCFI7:
 18683              		.cfi_def_cfa_offset 16
 18684 0004 00AF     		add	r7, sp, #0
 18685              		.cfi_offset 7, -4
 18686              	.LCFI8:
 18687              		.cfi_def_cfa_register 7
 18688 0006 7860     		str	r0, [r7, #4]
 18689 0008 3960     		str	r1, [r7, #0]
 18690              		.loc 52 103 0
 18691 000a 3B68     		ldr	r3, [r7, #0]
 18692 000c 1846     		mov	r0, r3
 18693 000e 07F10C07 		add	r7, r7, #12
 18694 0012 BD46     		mov	sp, r7
 18695 0014 80BC     		pop	{r7}
 18696 0016 7047     		bx	lr
 18697              		.cfi_endproc
 18698              	.LFE192:
 18700              		.section	.text._ZNK8IXFEvent11getBehaviorEv,"axG",%progbits,_ZNK8IXFEvent11getBehaviorEv,comdat
 18701              		.align	2
 18702              		.weak	_ZNK8IXFEvent11getBehaviorEv
 18703              		.thumb
 18704              		.thumb_func
 18706              	_ZNK8IXFEvent11getBehaviorEv:
 18707              	.LFB331:
   1:../xf/ixfevent.h **** #ifndef IXFEVENT_H
   2:../xf/ixfevent.h **** #define IXFEVENT_H
   3:../xf/ixfevent.h **** 
   4:../xf/ixfevent.h **** 
   5:../xf/ixfevent.h **** class IXFReactive;
   6:../xf/ixfevent.h **** 
   7:../xf/ixfevent.h **** 
   8:../xf/ixfevent.h **** /**
   9:../xf/ixfevent.h ****  * @ingroup xf
  10:../xf/ixfevent.h ****  * Interface for an event. The abstract methods defined in this interface
  11:../xf/ixfevent.h ****  * need to be reimplemented in its derived classes. These methods are
  12:../xf/ixfevent.h ****  * used by other classes in the framework (ex. XFThread, XFReactive).
  13:../xf/ixfevent.h ****  *
  14:../xf/ixfevent.h ****  * Requirements:
  15:../xf/ixfevent.h ****  * - Needs to hold a property which allows to distinguish between different
  16:../xf/ixfevent.h ****  *   types of events.
  17:../xf/ixfevent.h ****  * - Use an enumeration to define the type for the type property.
  18:../xf/ixfevent.h ****  * - The type property needs to be set at initialization time and cannot be
  19:../xf/ixfevent.h ****  *   changed afterwards.
  20:../xf/ixfevent.h ****  */
  21:../xf/ixfevent.h **** class IXFEvent
  22:../xf/ixfevent.h **** {
  23:../xf/ixfevent.h **** public:
  24:../xf/ixfevent.h **** 	/**
  25:../xf/ixfevent.h **** 	 * Defines the types of events
  26:../xf/ixfevent.h **** 	 */
  27:../xf/ixfevent.h **** 	typedef enum
  28:../xf/ixfevent.h **** 	{
  29:../xf/ixfevent.h **** 		Unknown			= 0,		///< Unknown state (not initialized)
  30:../xf/ixfevent.h **** 		Initial			= 1,		///< Initial pseudo-state
  31:../xf/ixfevent.h **** 		NullTransition	= 2,		///< Event generated by the state machine to define a null transition
  32:../xf/ixfevent.h **** 		Event			= 3,		///< Normal event
  33:../xf/ixfevent.h **** 		Timeout			= 4,		///< Defines a timeout event.
  34:../xf/ixfevent.h **** 		Terminate		= -1		///< Defines a terminate state. Will end the state machine.
  35:../xf/ixfevent.h **** 	} eEventType;
  36:../xf/ixfevent.h **** 
  37:../xf/ixfevent.h **** public :
  38:../xf/ixfevent.h **** 	/**
  39:../xf/ixfevent.h **** 	 * Default class constructor
  40:../xf/ixfevent.h **** 	 */
  41:../xf/ixfevent.h **** 	IXFEvent(eEventType eventType, int id, IXFReactive * pBehavior) : _eventType(eventType), _id(id), 
  42:../xf/ixfevent.h **** 	virtual ~IXFEvent() {}		///< Class destructor
  43:../xf/ixfevent.h **** 
  44:../xf/ixfevent.h **** 	/** \brief Returns the type of the event.
  45:../xf/ixfevent.h **** 	 *
  46:../xf/ixfevent.h **** 	 * Can be used to distinguish between an event or a timeout.
  47:../xf/ixfevent.h **** 	 */
  48:../xf/ixfevent.h **** 	inline eEventType getEventType() const { return _eventType; }
  49:../xf/ixfevent.h **** 
  50:../xf/ixfevent.h **** 	/** \brief Returns pointer to behavioral class.
  51:../xf/ixfevent.h **** 	 *
  52:../xf/ixfevent.h **** 	 * Returns a pointer to the behavioral class processing the event (see #_pBehavior).
  53:../xf/ixfevent.h **** 	 */
  54:../xf/ixfevent.h **** 	inline IXFReactive * getBehavior() const { return _pBehavior; }
 18708              		.loc 58 54 0
 18709              		.cfi_startproc
 18710              		@ args = 0, pretend = 0, frame = 8
 18711              		@ frame_needed = 1, uses_anonymous_args = 0
 18712              		@ link register save eliminated.
 18713 0000 80B4     		push	{r7}
 18714              	.LCFI9:
 18715              		.cfi_def_cfa_offset 4
 18716 0002 83B0     		sub	sp, sp, #12
 18717              	.LCFI10:
 18718              		.cfi_def_cfa_offset 16
 18719 0004 00AF     		add	r7, sp, #0
 18720              		.cfi_offset 7, -4
 18721              	.LCFI11:
 18722              		.cfi_def_cfa_register 7
 18723 0006 7860     		str	r0, [r7, #4]
 18724              		.loc 58 54 0
 18725 0008 7B68     		ldr	r3, [r7, #4]
 18726 000a 1B69     		ldr	r3, [r3, #16]
 18727 000c 1846     		mov	r0, r3
 18728 000e 07F10C07 		add	r7, r7, #12
 18729 0012 BD46     		mov	sp, r7
 18730 0014 80BC     		pop	{r7}
 18731 0016 7047     		bx	lr
 18732              		.cfi_endproc
 18733              	.LFE331:
 18735              		.global	_ZN16XFTimeoutManager10_pInstanceE
 18736              		.section	.bss._ZN16XFTimeoutManager10_pInstanceE,"aw",%nobits
 18737              		.align	2
 18740              	_ZN16XFTimeoutManager10_pInstanceE:
 18741 0000 00000000 		.space	4
 18742              		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EED2Ev,"axG",%progbits,_ZNSt4listIP9XFTimeoutSaIS1_EED5
 18743              		.align	2
 18744              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EED2Ev
 18745              		.thumb
 18746              		.thumb_func
 18748              	_ZNSt4listIP9XFTimeoutSaIS1_EED2Ev:
 18749              	.LFB864:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // List implementation -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * Copyright (c) 1996,1997
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * representations about the suitability of this software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** /** @file stl_list.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifndef _STL_LIST_H
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #define _STL_LIST_H 1
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #include <bits/concept_check.h>
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #include <initializer_list>
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   // Supporting structures are split into common and templated types; the
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   // latter publicly inherits from the former in an effort to reduce code
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   // duplication.  This results in some "needless" static_cast'ing later on,
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   // but it's all safe downcasting.
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   /// Common part of a node in the %list. 
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   struct _List_node_base
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   {
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     _List_node_base* _M_next;
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     _List_node_base* _M_prev;
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     static void
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     swap(_List_node_base& __x, _List_node_base& __y) throw ();
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     void
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     _M_transfer(_List_node_base * const __first,
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 		_List_node_base * const __last) throw ();
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     void
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     _M_reverse() throw ();
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     void
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     _M_hook(_List_node_base * const __position) throw ();
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     void
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     _M_unhook() throw ();
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   };
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   /// An actual node in the %list.
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   template<typename _Tp>
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     struct _List_node : public _List_node_base
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     {
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       ///< User's data.
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Tp _M_data;
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename... _Args>
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _List_node(_Args&&... __args)
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	: _List_node_base(), _M_data(std::forward<_Args>(__args)...) { }
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     };
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   /**
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  @brief A list::iterator.
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  All the functions are op overloads.
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   */
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   template<typename _Tp>
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     struct _List_iterator
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     {
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _List_iterator<_Tp>                _Self;
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _List_node<_Tp>                    _Node;
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef ptrdiff_t                          difference_type;
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef std::bidirectional_iterator_tag    iterator_category;
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _Tp                                value_type;
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _Tp*                               pointer;
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _Tp&                               reference;
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_iterator()
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_node() { }
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       explicit
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_iterator(_List_node_base* __x)
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_node(__x) { }
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Must downcast from List_node_base to _List_node to get to _M_data.
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       reference
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator*() const
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return static_cast<_Node*>(_M_node)->_M_data; }
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       pointer
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator->() const
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return &static_cast<_Node*>(_M_node)->_M_data; }
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Self&
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator++()
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_next;
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *this;
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Self
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator++(int)
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_Self __tmp = *this;
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_next;
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return __tmp;
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Self&
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator--()
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_prev;
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *this;
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Self
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator--(int)
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_Self __tmp = *this;
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_prev;
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return __tmp;
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       bool
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator==(const _Self& __x) const
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_node == __x._M_node; }
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       bool
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator!=(const _Self& __x) const
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_node != __x._M_node; }
 177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // The only member points to the %list element.
 179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_node_base* _M_node;
 180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     };
 181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   /**
 183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  @brief A list::const_iterator.
 184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  All the functions are op overloads.
 186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   */
 187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   template<typename _Tp>
 188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     struct _List_const_iterator
 189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     {
 190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _List_const_iterator<_Tp>          _Self;
 191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef const _List_node<_Tp>              _Node;
 192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _List_iterator<_Tp>                iterator;
 193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef ptrdiff_t                          difference_type;
 195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef std::bidirectional_iterator_tag    iterator_category;
 196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _Tp                                value_type;
 197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef const _Tp*                         pointer;
 198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef const _Tp&                         reference;
 199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_const_iterator()
 201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_node() { }
 202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       explicit
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_const_iterator(const _List_node_base* __x)
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_node(__x) { }
 206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_const_iterator(const iterator& __x)
 208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_node(__x._M_node) { }
 209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Must downcast from List_node_base to _List_node to get to
 211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // _M_data.
 212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       reference
 213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator*() const
 214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return static_cast<_Node*>(_M_node)->_M_data; }
 215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       pointer
 217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator->() const
 218:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return &static_cast<_Node*>(_M_node)->_M_data; }
 219:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 220:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Self&
 221:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator++()
 222:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 223:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_next;
 224:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *this;
 225:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 226:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 227:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Self
 228:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator++(int)
 229:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 230:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_Self __tmp = *this;
 231:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_next;
 232:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return __tmp;
 233:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 234:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 235:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Self&
 236:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator--()
 237:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 238:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_prev;
 239:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *this;
 240:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 241:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 242:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Self
 243:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator--(int)
 244:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 245:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_Self __tmp = *this;
 246:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_prev;
 247:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return __tmp;
 248:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 249:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 250:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       bool
 251:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator==(const _Self& __x) const
 252:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_node == __x._M_node; }
 253:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 254:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       bool
 255:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator!=(const _Self& __x) const
 256:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_node != __x._M_node; }
 257:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 258:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // The only member points to the %list element.
 259:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const _List_node_base* _M_node;
 260:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     };
 261:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 262:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   template<typename _Val>
 263:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     inline bool
 264:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     operator==(const _List_iterator<_Val>& __x,
 265:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	       const _List_const_iterator<_Val>& __y)
 266:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     { return __x._M_node == __y._M_node; }
 267:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 268:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   template<typename _Val>
 269:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     inline bool
 270:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     operator!=(const _List_iterator<_Val>& __x,
 271:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****                const _List_const_iterator<_Val>& __y)
 272:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     { return __x._M_node != __y._M_node; }
 273:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 274:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 275:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
 276:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   template<typename _Tp, typename _Alloc>
 277:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     class _List_base
 278:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     {
 279:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     protected:
 280:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // NOTA BENE
 281:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // The stored instance is not actually of "allocator_type"'s
 282:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // type.  Instead we rebind the type to
 283:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Allocator<List_node<Tp>>, which according to [20.1.5]/4
 284:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // should probably be the same.  List_node<Tp> is not the same
 285:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // size as Tp (it's two pointers larger), and specializations on
 286:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Tp may go unused because List_node<Tp> is being bound
 287:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // instead.
 288:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       //
 289:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // We put this to the test in the constructors and in
 290:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // get_allocator, where we use conversions between
 291:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // allocator_type and _Node_alloc_type. The conversion is
 292:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // required by table 32 in [20.1.5].
 293:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef typename _Alloc::template rebind<_List_node<_Tp> >::other
 294:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _Node_alloc_type;
 295:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 296:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;
 297:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 298:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       struct _List_impl 
 299:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : public _Node_alloc_type
 300:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 301:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_List_node_base _M_node;
 302:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 303:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_List_impl()
 304:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	: _Node_alloc_type(), _M_node()
 305:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	{ }
 306:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 307:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_List_impl(const _Node_alloc_type& __a)
 308:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	: _Node_alloc_type(__a), _M_node()
 309:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	{ }
 310:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       };
 311:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 312:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_impl _M_impl;
 313:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 314:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_node<_Tp>*
 315:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_get_node()
 316:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_impl._Node_alloc_type::allocate(1); }
 317:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       
 318:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 319:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_put_node(_List_node<_Tp>* __p)
 320:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_impl._Node_alloc_type::deallocate(__p, 1); }
 321:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       
 322:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   public:
 323:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _Alloc allocator_type;
 324:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 325:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Node_alloc_type&
 326:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_get_Node_allocator()
 327:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return *static_cast<_Node_alloc_type*>(&this->_M_impl); }
 328:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 329:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const _Node_alloc_type&
 330:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_get_Node_allocator() const
 331:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }
 332:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 333:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Tp_alloc_type
 334:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_get_Tp_allocator() const
 335:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _Tp_alloc_type(_M_get_Node_allocator()); }
 336:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 337:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       allocator_type
 338:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       get_allocator() const
 339:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return allocator_type(_M_get_Node_allocator()); }
 340:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 341:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_base()
 342:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_impl()
 343:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_init(); }
 344:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 345:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_base(const allocator_type& __a)
 346:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_impl(__a)
 347:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_init(); }
 348:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 349:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 350:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_base(_List_base&& __x)
 351:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_impl(__x._M_get_Node_allocator())
 352:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 353:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_init();
 354:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_List_node_base::swap(this->_M_impl._M_node, __x._M_impl._M_node);	
 355:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 356:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 357:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 358:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // This is what actually destroys the list.
 359:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       ~_List_base()
 360:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_clear(); }
 361:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 362:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 363:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_clear();
 364:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 365:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 366:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_init()
 367:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 368:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 369:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 370:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 371:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     };
 372:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 373:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   /**
 374:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  @brief A standard container with linear time access to elements,
 375:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  and fixed time insertion/deletion at any point in the sequence.
 376:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 377:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  @ingroup sequences
 378:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 379:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 380:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 381:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  <a href="tables.html#67">sequence</a>, including the
 382:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 383:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  %exception of @c at and @c operator[].
 384:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 385:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  This is a @e doubly @e linked %list.  Traversal up and down the
 386:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  %list requires linear time, but adding and removing elements (or
 387:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  @e nodes) is done in constant time, regardless of where the
 388:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  change takes place.  Unlike std::vector and std::deque,
 389:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  random-access iterators are not provided, so subscripting ( @c
 390:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  [] ) access is not allowed.  For algorithms which only need
 391:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  sequential access, this lack makes no difference.
 392:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 393:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  Also unlike the other standard containers, std::list provides
 394:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  specialized algorithms %unique to linked lists, such as
 395:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  splicing, sorting, and in-place reversal.
 396:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 397:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  A couple points on memory allocation for list<Tp>:
 398:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 399:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  First, we never actually allocate a Tp, we allocate
 400:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  List_node<Tp>'s and trust [20.1.5]/4 to DTRT.  This is to ensure
 401:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  that after elements from %list<X,Alloc1> are spliced into
 402:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  %list<X,Alloc2>, destroying the memory of the second %list is a
 403:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  valid operation, i.e., Alloc1 giveth and Alloc2 taketh away.
 404:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *
 405:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  Second, a %list conceptually represented as
 406:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  @code
 407:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *    A <---> B <---> C <---> D
 408:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  @endcode
 409:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  is actually circular; a link exists between A and D.  The %list
 410:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  class holds (as its only data member) a private list::iterator
 411:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  pointing to @e D, not to @e A!  To get to the head of the %list,
 412:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  we start at the tail and move forward by one.  When this member
 413:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  iterator's next/previous pointers refer to itself, the %list is
 414:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****    *  %empty. 
 415:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   */
 416:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 417:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     class list : protected _List_base<_Tp, _Alloc>
 418:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     {
 18750              		.loc 54 418 0
 18751              		.cfi_startproc
 18752              		@ args = 0, pretend = 0, frame = 8
 18753              		@ frame_needed = 1, uses_anonymous_args = 0
 18754 0000 80B5     		push	{r7, lr}
 18755              	.LCFI12:
 18756              		.cfi_def_cfa_offset 8
 18757 0002 82B0     		sub	sp, sp, #8
 18758              	.LCFI13:
 18759              		.cfi_def_cfa_offset 16
 18760 0004 00AF     		add	r7, sp, #0
 18761              		.cfi_offset 14, -4
 18762              		.cfi_offset 7, -8
 18763              	.LCFI14:
 18764              		.cfi_def_cfa_register 7
 18765 0006 7860     		str	r0, [r7, #4]
 18766              	.LBB2:
 18767              		.loc 54 418 0
 18768 0008 7B68     		ldr	r3, [r7, #4]
 18769 000a 1846     		mov	r0, r3
 18770 000c FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev
 18771              	.LBE2:
 18772 0010 7B68     		ldr	r3, [r7, #4]
 18773 0012 1846     		mov	r0, r3
 18774 0014 07F10807 		add	r7, r7, #8
 18775 0018 BD46     		mov	sp, r7
 18776 001a 80BD     		pop	{r7, pc}
 18777              		.cfi_endproc
 18778              	.LFE864:
 18780              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EED1Ev
 18781              		.thumb_set _ZNSt4listIP9XFTimeoutSaIS1_EED1Ev,_ZNSt4listIP9XFTimeoutSaIS1_EED2Ev
 18782              		.section	.text._ZN16XFTimeoutManagerC2Ev,"ax",%progbits
 18783              		.align	2
 18784              		.global	_ZN16XFTimeoutManagerC2Ev
 18785              		.thumb
 18786              		.thumb_func
 18788              	_ZN16XFTimeoutManagerC2Ev:
 18789              	.LFB866:
   1:../xf/xftimeoutmanager.cpp **** #include <assert.h>
   2:../xf/xftimeoutmanager.cpp **** 
   3:../xf/xftimeoutmanager.cpp **** #ifdef TC_STM32 /**********************************************************************************
   4:../xf/xftimeoutmanager.cpp **** 
   5:../xf/xftimeoutmanager.cpp **** #include <target.h>
   6:../xf/xftimeoutmanager.cpp **** #include <critical.h>
   7:../xf/xftimeoutmanager.cpp **** 
   8:../xf/xftimeoutmanager.cpp **** #elif defined( TC_MESHSIM ) /**********************************************************************
   9:../xf/xftimeoutmanager.cpp **** 
  10:../xf/xftimeoutmanager.cpp **** // We do not have threads on desktop XF, so we o not need the enterCritical() and exitCritical() fu
  11:../xf/xftimeoutmanager.cpp **** #define enterCritical()
  12:../xf/xftimeoutmanager.cpp **** #define exitCritical()
  13:../xf/xftimeoutmanager.cpp **** 
  14:../xf/xftimeoutmanager.cpp **** // Support to stop XF execution with mesh simulator.
  15:../xf/xftimeoutmanager.cpp **** volatile bool __XF_PAUSED = false;
  16:../xf/xftimeoutmanager.cpp **** 
  17:../xf/xftimeoutmanager.cpp **** #endif /*******************************************************************************************
  18:../xf/xftimeoutmanager.cpp **** 
  19:../xf/xftimeoutmanager.cpp **** 
  20:../xf/xftimeoutmanager.cpp **** #include "xftimeoutmanager.h"
  21:../xf/xftimeoutmanager.cpp **** #include "ixfreactive.h"
  22:../xf/xftimeoutmanager.cpp **** #include "xftimeout.h"
  23:../xf/xftimeoutmanager.cpp **** 
  24:../xf/xftimeoutmanager.cpp **** 
  25:../xf/xftimeoutmanager.cpp **** // Initialization of static class attributes
  26:../xf/xftimeoutmanager.cpp **** XFTimeoutManager * XFTimeoutManager::_pInstance = NULL;
  27:../xf/xftimeoutmanager.cpp **** 
  28:../xf/xftimeoutmanager.cpp **** 
  29:../xf/xftimeoutmanager.cpp **** XFTimeoutManager::XFTimeoutManager()
 18790              		.loc 1 29 0
 18791              		.cfi_startproc
 18792              		@ args = 0, pretend = 0, frame = 8
 18793              		@ frame_needed = 1, uses_anonymous_args = 0
 18794 0000 80B5     		push	{r7, lr}
 18795              	.LCFI15:
 18796              		.cfi_def_cfa_offset 8
 18797 0002 82B0     		sub	sp, sp, #8
 18798              	.LCFI16:
 18799              		.cfi_def_cfa_offset 16
 18800 0004 00AF     		add	r7, sp, #0
 18801              		.cfi_offset 14, -4
 18802              		.cfi_offset 7, -8
 18803              	.LCFI17:
 18804              		.cfi_def_cfa_register 7
 18805 0006 7860     		str	r0, [r7, #4]
 18806              	.LBB3:
  30:../xf/xftimeoutmanager.cpp ****  : _tickInterval(0)
 18807              		.loc 1 30 0
 18808 0008 7B68     		ldr	r3, [r7, #4]
 18809 000a 094A     		ldr	r2, .L13
 18810 000c 1A60     		str	r2, [r3, #0]
 18811 000e 7B68     		ldr	r3, [r7, #4]
 18812 0010 4FF00002 		mov	r2, #0
 18813 0014 5A60     		str	r2, [r3, #4]
 18814 0016 7B68     		ldr	r3, [r7, #4]
 18815 0018 03F10803 		add	r3, r3, #8
 18816 001c 1846     		mov	r0, r3
 18817 001e FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EEC1Ev
 18818              	.LBE3:
  31:../xf/xftimeoutmanager.cpp **** {
  32:../xf/xftimeoutmanager.cpp **** }
 18819              		.loc 1 32 0
 18820 0022 7B68     		ldr	r3, [r7, #4]
 18821 0024 1846     		mov	r0, r3
 18822 0026 07F10807 		add	r7, r7, #8
 18823 002a BD46     		mov	sp, r7
 18824 002c 80BD     		pop	{r7, pc}
 18825              	.L14:
 18826 002e 00BF     		.align	2
 18827              	.L13:
 18828 0030 08000000 		.word	_ZTV16XFTimeoutManager+8
 18829              		.cfi_endproc
 18830              	.LFE866:
 18832              		.global	_ZN16XFTimeoutManagerC1Ev
 18833              		.thumb_set _ZN16XFTimeoutManagerC1Ev,_ZN16XFTimeoutManagerC2Ev
 18834              		.section	.text._ZN16XFTimeoutManagerD2Ev,"ax",%progbits
 18835              		.align	2
 18836              		.global	_ZN16XFTimeoutManagerD2Ev
 18837              		.thumb
 18838              		.thumb_func
 18840              	_ZN16XFTimeoutManagerD2Ev:
 18841              	.LFB869:
  33:../xf/xftimeoutmanager.cpp **** 
  34:../xf/xftimeoutmanager.cpp **** XFTimeoutManager::~XFTimeoutManager()
 18842              		.loc 1 34 0
 18843              		.cfi_startproc
 18844              		@ args = 0, pretend = 0, frame = 8
 18845              		@ frame_needed = 1, uses_anonymous_args = 0
 18846 0000 80B5     		push	{r7, lr}
 18847              	.LCFI18:
 18848              		.cfi_def_cfa_offset 8
 18849 0002 82B0     		sub	sp, sp, #8
 18850              	.LCFI19:
 18851              		.cfi_def_cfa_offset 16
 18852 0004 00AF     		add	r7, sp, #0
 18853              		.cfi_offset 14, -4
 18854              		.cfi_offset 7, -8
 18855              	.LCFI20:
 18856              		.cfi_def_cfa_register 7
 18857 0006 7860     		str	r0, [r7, #4]
 18858              	.LBB4:
 18859              		.loc 1 34 0
 18860 0008 7B68     		ldr	r3, [r7, #4]
 18861 000a 0C4A     		ldr	r2, .L18
 18862 000c 1A60     		str	r2, [r3, #0]
 18863 000e 7B68     		ldr	r3, [r7, #4]
 18864 0010 03F10803 		add	r3, r3, #8
  35:../xf/xftimeoutmanager.cpp **** {
  36:../xf/xftimeoutmanager.cpp **** }
 18865              		.loc 1 36 0
 18866 0014 1846     		mov	r0, r3
 18867 0016 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EED1Ev
 18868              	.LBE4:
 18869 001a 4FF00003 		mov	r3, #0
 18870 001e 03F00103 		and	r3, r3, #1
 18871 0022 DBB2     		uxtb	r3, r3
 18872 0024 002B     		cmp	r3, #0
 18873 0026 02D0     		beq	.L17
 18874              		.loc 1 36 0 is_stmt 0 discriminator 2
 18875 0028 7868     		ldr	r0, [r7, #4]
 18876 002a FFF7FEFF 		bl	_ZdlPv
 18877              	.L17:
 18878              		.loc 1 36 0 discriminator 3
 18879 002e 7B68     		ldr	r3, [r7, #4]
 18880 0030 1846     		mov	r0, r3
 18881 0032 07F10807 		add	r7, r7, #8
 18882 0036 BD46     		mov	sp, r7
 18883 0038 80BD     		pop	{r7, pc}
 18884              	.L19:
 18885 003a 00BF     		.align	2
 18886              	.L18:
 18887 003c 08000000 		.word	_ZTV16XFTimeoutManager+8
 18888              		.cfi_endproc
 18889              	.LFE869:
 18891              		.global	_ZN16XFTimeoutManagerD1Ev
 18892              		.thumb_set _ZN16XFTimeoutManagerD1Ev,_ZN16XFTimeoutManagerD2Ev
 18893              		.section	.text._ZN16XFTimeoutManagerD0Ev,"ax",%progbits
 18894              		.align	2
 18895              		.global	_ZN16XFTimeoutManagerD0Ev
 18896              		.thumb
 18897              		.thumb_func
 18899              	_ZN16XFTimeoutManagerD0Ev:
 18900              	.LFB871:
  34:../xf/xftimeoutmanager.cpp **** XFTimeoutManager::~XFTimeoutManager()
 18901              		.loc 1 34 0 is_stmt 1
 18902              		.cfi_startproc
 18903              		@ args = 0, pretend = 0, frame = 8
 18904              		@ frame_needed = 1, uses_anonymous_args = 0
 18905 0000 80B5     		push	{r7, lr}
 18906              	.LCFI21:
 18907              		.cfi_def_cfa_offset 8
 18908 0002 82B0     		sub	sp, sp, #8
 18909              	.LCFI22:
 18910              		.cfi_def_cfa_offset 16
 18911 0004 00AF     		add	r7, sp, #0
 18912              		.cfi_offset 14, -4
 18913              		.cfi_offset 7, -8
 18914              	.LCFI23:
 18915              		.cfi_def_cfa_register 7
 18916 0006 7860     		str	r0, [r7, #4]
 18917              		.loc 1 36 0
 18918 0008 7868     		ldr	r0, [r7, #4]
 18919 000a FFF7FEFF 		bl	_ZN16XFTimeoutManagerD1Ev
 18920 000e 7868     		ldr	r0, [r7, #4]
 18921 0010 FFF7FEFF 		bl	_ZdlPv
 18922 0014 7B68     		ldr	r3, [r7, #4]
 18923 0016 1846     		mov	r0, r3
 18924 0018 07F10807 		add	r7, r7, #8
 18925 001c BD46     		mov	sp, r7
 18926 001e 80BD     		pop	{r7, pc}
 18927              		.cfi_endproc
 18928              	.LFE871:
 18930              		.section	.text._ZN16XFTimeoutManager11getInstanceEv,"ax",%progbits
 18931              		.align	2
 18932              		.global	_ZN16XFTimeoutManager11getInstanceEv
 18933              		.thumb
 18934              		.thumb_func
 18936              	_ZN16XFTimeoutManager11getInstanceEv:
 18937              	.LFB872:
  37:../xf/xftimeoutmanager.cpp **** 
  38:../xf/xftimeoutmanager.cpp **** XFTimeoutManager * XFTimeoutManager::getInstance()
  39:../xf/xftimeoutmanager.cpp **** {
 18938              		.loc 1 39 0
 18939              		.cfi_startproc
 18940              		@ args = 0, pretend = 0, frame = 0
 18941              		@ frame_needed = 1, uses_anonymous_args = 0
 18942 0000 98B5     		push	{r3, r4, r7, lr}
 18943              	.LCFI24:
 18944              		.cfi_def_cfa_offset 16
 18945 0002 00AF     		add	r7, sp, #0
 18946              		.cfi_offset 14, -4
 18947              		.cfi_offset 7, -8
 18948              		.cfi_offset 4, -12
 18949              		.cfi_offset 3, -16
 18950              	.LCFI25:
 18951              		.cfi_def_cfa_register 7
  40:../xf/xftimeoutmanager.cpp **** 	if (!_pInstance)
 18952              		.loc 1 40 0
 18953 0004 40F20003 		movw	r3, #:lower16:_ZN16XFTimeoutManager10_pInstanceE
 18954 0008 C0F20003 		movt	r3, #:upper16:_ZN16XFTimeoutManager10_pInstanceE
 18955 000c 1B68     		ldr	r3, [r3, #0]
 18956 000e 002B     		cmp	r3, #0
 18957 0010 0ED1     		bne	.L23
  41:../xf/xftimeoutmanager.cpp **** 	{
  42:../xf/xftimeoutmanager.cpp **** 		_pInstance = new XFTimeoutManager;
 18958              		.loc 1 42 0
 18959 0012 4FF01000 		mov	r0, #16
 18960 0016 FFF7FEFF 		bl	_Znwj
 18961 001a 0446     		mov	r4, r0
 18962 001c 2346     		mov	r3, r4
 18963 001e 1846     		mov	r0, r3
 18964 0020 FFF7FEFF 		bl	_ZN16XFTimeoutManagerC1Ev
 18965 0024 2246     		mov	r2, r4
 18966 0026 40F20003 		movw	r3, #:lower16:_ZN16XFTimeoutManager10_pInstanceE
 18967 002a C0F20003 		movt	r3, #:upper16:_ZN16XFTimeoutManager10_pInstanceE
 18968 002e 1A60     		str	r2, [r3, #0]
 18969              	.L23:
  43:../xf/xftimeoutmanager.cpp **** 	}
  44:../xf/xftimeoutmanager.cpp **** 
  45:../xf/xftimeoutmanager.cpp **** 	return _pInstance;
 18970              		.loc 1 45 0
 18971 0030 40F20003 		movw	r3, #:lower16:_ZN16XFTimeoutManager10_pInstanceE
 18972 0034 C0F20003 		movt	r3, #:upper16:_ZN16XFTimeoutManager10_pInstanceE
 18973 0038 1B68     		ldr	r3, [r3, #0]
  46:../xf/xftimeoutmanager.cpp **** }
 18974              		.loc 1 46 0
 18975 003a 1846     		mov	r0, r3
 18976 003c 98BD     		pop	{r3, r4, r7, pc}
 18977              		.cfi_endproc
 18978              	.LFE872:
 18980 003e 00BF     		.section	.text._ZN16XFTimeoutManager15setTickIntervalEi,"ax",%progbits
 18981              		.align	2
 18982              		.global	_ZN16XFTimeoutManager15setTickIntervalEi
 18983              		.thumb
 18984              		.thumb_func
 18986              	_ZN16XFTimeoutManager15setTickIntervalEi:
 18987              	.LFB873:
  47:../xf/xftimeoutmanager.cpp **** 
  48:../xf/xftimeoutmanager.cpp **** /**
  49:../xf/xftimeoutmanager.cpp ****  * Sets the time interval in milliseconds in which the timeout manager
  50:../xf/xftimeoutmanager.cpp ****  * should handle the timeouts.
  51:../xf/xftimeoutmanager.cpp ****  */
  52:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::setTickInterval(int tickInterval)
  53:../xf/xftimeoutmanager.cpp **** {
 18988              		.loc 1 53 0
 18989              		.cfi_startproc
 18990              		@ args = 0, pretend = 0, frame = 8
 18991              		@ frame_needed = 1, uses_anonymous_args = 0
 18992              		@ link register save eliminated.
 18993 0000 80B4     		push	{r7}
 18994              	.LCFI26:
 18995              		.cfi_def_cfa_offset 4
 18996 0002 83B0     		sub	sp, sp, #12
 18997              	.LCFI27:
 18998              		.cfi_def_cfa_offset 16
 18999 0004 00AF     		add	r7, sp, #0
 19000              		.cfi_offset 7, -4
 19001              	.LCFI28:
 19002              		.cfi_def_cfa_register 7
 19003 0006 7860     		str	r0, [r7, #4]
 19004 0008 3960     		str	r1, [r7, #0]
  54:../xf/xftimeoutmanager.cpp **** 	_tickInterval = tickInterval;
 19005              		.loc 1 54 0
 19006 000a 7B68     		ldr	r3, [r7, #4]
 19007 000c 3A68     		ldr	r2, [r7, #0]
 19008 000e 5A60     		str	r2, [r3, #4]
  55:../xf/xftimeoutmanager.cpp **** }
 19009              		.loc 1 55 0
 19010 0010 07F10C07 		add	r7, r7, #12
 19011 0014 BD46     		mov	sp, r7
 19012 0016 80BC     		pop	{r7}
 19013 0018 7047     		bx	lr
 19014              		.cfi_endproc
 19015              	.LFE873:
 19017 001a 00BF     		.section	.text._ZN16XFTimeoutManager5startEv,"ax",%progbits
 19018              		.align	2
 19019              		.global	_ZN16XFTimeoutManager5startEv
 19020              		.thumb
 19021              		.thumb_func
 19023              	_ZN16XFTimeoutManager5startEv:
 19024              	.LFB874:
  56:../xf/xftimeoutmanager.cpp **** 
  57:../xf/xftimeoutmanager.cpp **** /**
  58:../xf/xftimeoutmanager.cpp ****  * Starts the timeout manager.
  59:../xf/xftimeoutmanager.cpp ****  */
  60:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::start()
  61:../xf/xftimeoutmanager.cpp **** {
 19025              		.loc 1 61 0
 19026              		.cfi_startproc
 19027              		@ args = 0, pretend = 0, frame = 8
 19028              		@ frame_needed = 1, uses_anonymous_args = 0
 19029 0000 80B5     		push	{r7, lr}
 19030              	.LCFI29:
 19031              		.cfi_def_cfa_offset 8
 19032 0002 82B0     		sub	sp, sp, #8
 19033              	.LCFI30:
 19034              		.cfi_def_cfa_offset 16
 19035 0004 00AF     		add	r7, sp, #0
 19036              		.cfi_offset 14, -4
 19037              		.cfi_offset 7, -8
 19038              	.LCFI31:
 19039              		.cfi_def_cfa_register 7
 19040 0006 7860     		str	r0, [r7, #4]
  62:../xf/xftimeoutmanager.cpp **** 	// Check tickInterval. Set default value if not set
  63:../xf/xftimeoutmanager.cpp **** 	if (_tickInterval == 0)
 19041              		.loc 1 63 0
 19042 0008 7B68     		ldr	r3, [r7, #4]
 19043 000a 5B68     		ldr	r3, [r3, #4]
 19044 000c 002B     		cmp	r3, #0
 19045 000e 03D1     		bne	.L26
  64:../xf/xftimeoutmanager.cpp **** 	{
  65:../xf/xftimeoutmanager.cpp **** 		_tickInterval = 10;
 19046              		.loc 1 65 0
 19047 0010 7B68     		ldr	r3, [r7, #4]
 19048 0012 4FF00A02 		mov	r2, #10
 19049 0016 5A60     		str	r2, [r3, #4]
 19050              	.L26:
  66:../xf/xftimeoutmanager.cpp **** 	}
  67:../xf/xftimeoutmanager.cpp **** 
  68:../xf/xftimeoutmanager.cpp **** 	startHardwareTimer(_tickInterval);
 19051              		.loc 1 68 0
 19052 0018 7B68     		ldr	r3, [r7, #4]
 19053 001a 5B68     		ldr	r3, [r3, #4]
 19054 001c 7868     		ldr	r0, [r7, #4]
 19055 001e 1946     		mov	r1, r3
 19056 0020 FFF7FEFF 		bl	_ZN16XFTimeoutManager18startHardwareTimerEi
  69:../xf/xftimeoutmanager.cpp **** }
 19057              		.loc 1 69 0
 19058 0024 07F10807 		add	r7, r7, #8
 19059 0028 BD46     		mov	sp, r7
 19060 002a 80BD     		pop	{r7, pc}
 19061              		.cfi_endproc
 19062              	.LFE874:
 19064              		.section	.text._ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive,"ax",%progbits
 19065              		.align	2
 19066              		.global	_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive
 19067              		.thumb
 19068              		.thumb_func
 19070              	_ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive:
 19071              	.LFB875:
  70:../xf/xftimeoutmanager.cpp **** 
  71:../xf/xftimeoutmanager.cpp **** /**
  72:../xf/xftimeoutmanager.cpp ****  * Adds a timeout to the timeout manager.
  73:../xf/xftimeoutmanager.cpp ****  *
  74:../xf/xftimeoutmanager.cpp ****  * \param timeoutId The timeout id known by the reactive parameter. Is needed by the reactive part 
  75:../xf/xftimeoutmanager.cpp ****  * \param interval The time in milliseconds to wait until the timeout expires.
  76:../xf/xftimeoutmanager.cpp ****  * \param pReactive The reactive instance where to inject the timeout when it timeouts.
  77:../xf/xftimeoutmanager.cpp ****  */
  78:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::scheduleTimeout(int timeoutId, int interval, IXFReactive * pReactive)
  79:../xf/xftimeoutmanager.cpp **** {
 19072              		.loc 1 79 0
 19073              		.cfi_startproc
 19074              		@ args = 0, pretend = 0, frame = 24
 19075              		@ frame_needed = 1, uses_anonymous_args = 0
 19076 0000 90B5     		push	{r4, r7, lr}
 19077              	.LCFI32:
 19078              		.cfi_def_cfa_offset 12
 19079 0002 87B0     		sub	sp, sp, #28
 19080              	.LCFI33:
 19081              		.cfi_def_cfa_offset 40
 19082 0004 00AF     		add	r7, sp, #0
 19083              		.cfi_offset 14, -4
 19084              		.cfi_offset 7, -8
 19085              		.cfi_offset 4, -12
 19086              	.LCFI34:
 19087              		.cfi_def_cfa_register 7
 19088 0006 F860     		str	r0, [r7, #12]
 19089 0008 B960     		str	r1, [r7, #8]
 19090 000a 7A60     		str	r2, [r7, #4]
 19091 000c 3B60     		str	r3, [r7, #0]
 19092              	.LBB5:
  80:../xf/xftimeoutmanager.cpp **** 	XFTimeout * pTimeout = new XFTimeout(timeoutId, interval, pReactive);
 19093              		.loc 1 80 0
 19094 000e 4FF01C00 		mov	r0, #28
 19095 0012 FFF7FEFF 		bl	_Znwj
 19096 0016 0446     		mov	r4, r0
 19097 0018 2346     		mov	r3, r4
 19098 001a 1846     		mov	r0, r3
 19099 001c B968     		ldr	r1, [r7, #8]
 19100 001e 7A68     		ldr	r2, [r7, #4]
 19101 0020 3B68     		ldr	r3, [r7, #0]
 19102 0022 FFF7FEFF 		bl	_ZN9XFTimeoutC1EiiP11IXFReactive
 19103 0026 7C61     		str	r4, [r7, #20]
  81:../xf/xftimeoutmanager.cpp **** 
  82:../xf/xftimeoutmanager.cpp **** 	if (pTimeout)
 19104              		.loc 1 82 0
 19105 0028 7B69     		ldr	r3, [r7, #20]
 19106 002a 002B     		cmp	r3, #0
 19107 002c 03D0     		beq	.L27
  83:../xf/xftimeoutmanager.cpp **** 	{
  84:../xf/xftimeoutmanager.cpp **** 		addTimeout(pTimeout);
 19108              		.loc 1 84 0
 19109 002e F868     		ldr	r0, [r7, #12]
 19110 0030 7969     		ldr	r1, [r7, #20]
 19111 0032 FFF7FEFF 		bl	_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout
 19112              	.L27:
 19113              	.LBE5:
  85:../xf/xftimeoutmanager.cpp **** 	}
  86:../xf/xftimeoutmanager.cpp **** }
 19114              		.loc 1 86 0
 19115 0036 07F11C07 		add	r7, r7, #28
 19116 003a BD46     		mov	sp, r7
 19117 003c 90BD     		pop	{r4, r7, pc}
 19118              		.cfi_endproc
 19119              	.LFE875:
 19121 003e 00BF     		.section	.text._ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive,"ax",%progbits
 19122              		.align	2
 19123              		.global	_ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive
 19124              		.thumb
 19125              		.thumb_func
 19127              	_ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive:
 19128              	.LFB876:
  87:../xf/xftimeoutmanager.cpp **** 
  88:../xf/xftimeoutmanager.cpp **** /**
  89:../xf/xftimeoutmanager.cpp ****  * Removes all timeouts corresponding the given parameters.
  90:../xf/xftimeoutmanager.cpp ****  */
  91:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::unscheduleTimeout(int timeoutId, IXFReactive * pReactive)
  92:../xf/xftimeoutmanager.cpp **** {
 19129              		.loc 1 92 0
 19130              		.cfi_startproc
 19131              		@ args = 0, pretend = 0, frame = 16
 19132              		@ frame_needed = 1, uses_anonymous_args = 0
 19133 0000 80B5     		push	{r7, lr}
 19134              	.LCFI35:
 19135              		.cfi_def_cfa_offset 8
 19136 0002 84B0     		sub	sp, sp, #16
 19137              	.LCFI36:
 19138              		.cfi_def_cfa_offset 24
 19139 0004 00AF     		add	r7, sp, #0
 19140              		.cfi_offset 14, -4
 19141              		.cfi_offset 7, -8
 19142              	.LCFI37:
 19143              		.cfi_def_cfa_register 7
 19144 0006 F860     		str	r0, [r7, #12]
 19145 0008 B960     		str	r1, [r7, #8]
 19146 000a 7A60     		str	r2, [r7, #4]
  93:../xf/xftimeoutmanager.cpp **** 	removeTimeouts(timeoutId, pReactive);
 19147              		.loc 1 93 0
 19148 000c F868     		ldr	r0, [r7, #12]
 19149 000e B968     		ldr	r1, [r7, #8]
 19150 0010 7A68     		ldr	r2, [r7, #4]
 19151 0012 FFF7FEFF 		bl	_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive
  94:../xf/xftimeoutmanager.cpp **** }
 19152              		.loc 1 94 0
 19153 0016 07F11007 		add	r7, r7, #16
 19154 001a BD46     		mov	sp, r7
 19155 001c 80BD     		pop	{r7, pc}
 19156              		.cfi_endproc
 19157              	.LFE876:
 19159 001e 00BF     		.section	.text._ZN16XFTimeoutManager4tickEv,"ax",%progbits
 19160              		.align	2
 19161              		.global	_ZN16XFTimeoutManager4tickEv
 19162              		.thumb
 19163              		.thumb_func
 19165              	_ZN16XFTimeoutManager4tickEv:
 19166              	.LFB877:
  95:../xf/xftimeoutmanager.cpp **** 
  96:../xf/xftimeoutmanager.cpp **** /**
  97:../xf/xftimeoutmanager.cpp ****  * On each call to this method, XFTimeoutManager::_tickInterval will be removed from the
  98:../xf/xftimeoutmanager.cpp ****  * timeouts. When a timeout expires it is injected back to its reactive instance.
  99:../xf/xftimeoutmanager.cpp ****  */
 100:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::tick()
 101:../xf/xftimeoutmanager.cpp **** {
 19167              		.loc 1 101 0
 19168              		.cfi_startproc
 19169              		@ args = 0, pretend = 0, frame = 16
 19170              		@ frame_needed = 1, uses_anonymous_args = 0
 19171 0000 80B5     		push	{r7, lr}
 19172              	.LCFI38:
 19173              		.cfi_def_cfa_offset 8
 19174 0002 84B0     		sub	sp, sp, #16
 19175              	.LCFI39:
 19176              		.cfi_def_cfa_offset 24
 19177 0004 00AF     		add	r7, sp, #0
 19178              		.cfi_offset 14, -4
 19179              		.cfi_offset 7, -8
 19180              	.LCFI40:
 19181              		.cfi_def_cfa_register 7
 19182 0006 7860     		str	r0, [r7, #4]
 19183              	.LBB6:
 19184              	.LBB7:
 102:../xf/xftimeoutmanager.cpp **** 	if (!_timeouts.empty())
 19185              		.loc 1 102 0
 19186 0008 7B68     		ldr	r3, [r7, #4]
 19187 000a 03F10803 		add	r3, r3, #8
 19188 000e 1846     		mov	r0, r3
 19189 0010 FFF7FEFF 		bl	_ZNKSt4listIP9XFTimeoutSaIS1_EE5emptyEv
 19190 0014 0346     		mov	r3, r0
 19191 0016 83F00103 		eor	r3, r3, #1
 19192 001a DBB2     		uxtb	r3, r3
 19193 001c 002B     		cmp	r3, #0
 19194 001e 46D0     		beq	.L30
 19195              	.LBB8:
 103:../xf/xftimeoutmanager.cpp **** 	{
 104:../xf/xftimeoutmanager.cpp **** 		XFTimeout * pFirstTimeout = _timeouts.front();
 19196              		.loc 1 104 0
 19197 0020 7B68     		ldr	r3, [r7, #4]
 19198 0022 03F10803 		add	r3, r3, #8
 19199 0026 1846     		mov	r0, r3
 19200 0028 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE5frontEv
 19201 002c 0346     		mov	r3, r0
 19202 002e 1B68     		ldr	r3, [r3, #0]
 19203 0030 FB60     		str	r3, [r7, #12]
 105:../xf/xftimeoutmanager.cpp **** 
 106:../xf/xftimeoutmanager.cpp **** 		// Subtract time elapsed
 107:../xf/xftimeoutmanager.cpp **** 		pFirstTimeout->_relTicks -= _tickInterval;
 19204              		.loc 1 107 0
 19205 0032 FB68     		ldr	r3, [r7, #12]
 19206 0034 9A69     		ldr	r2, [r3, #24]
 19207 0036 7B68     		ldr	r3, [r7, #4]
 19208 0038 5B68     		ldr	r3, [r3, #4]
 19209 003a D21A     		subs	r2, r2, r3
 19210 003c FB68     		ldr	r3, [r7, #12]
 19211 003e 9A61     		str	r2, [r3, #24]
 19212              	.LBB9:
 108:../xf/xftimeoutmanager.cpp **** 
 109:../xf/xftimeoutmanager.cpp **** 		// Check timeout timed out
 110:../xf/xftimeoutmanager.cpp **** 		if (pFirstTimeout->_relTicks <= 0)
 19213              		.loc 1 110 0
 19214 0040 FB68     		ldr	r3, [r7, #12]
 19215 0042 9B69     		ldr	r3, [r3, #24]
 19216 0044 002B     		cmp	r3, #0
 19217 0046 32DC     		bgt	.L30
 19218              	.LBB10:
 19219              	.LBB11:
 111:../xf/xftimeoutmanager.cpp **** 		{
 112:../xf/xftimeoutmanager.cpp **** 			// Check remaining ticks can be given further
 113:../xf/xftimeoutmanager.cpp **** 			if (_timeouts.size() > 1)
 19220              		.loc 1 113 0
 19221 0048 7B68     		ldr	r3, [r7, #4]
 19222 004a 03F10803 		add	r3, r3, #8
 19223 004e 1846     		mov	r0, r3
 19224 0050 FFF7FEFF 		bl	_ZNKSt4listIP9XFTimeoutSaIS1_EE4sizeEv
 19225 0054 0346     		mov	r3, r0
 19226 0056 012B     		cmp	r3, #1
 19227 0058 94BF     		ite	ls
 19228 005a 0023     		movls	r3, #0
 19229 005c 0123     		movhi	r3, #1
 19230 005e DBB2     		uxtb	r3, r3
 19231 0060 002B     		cmp	r3, #0
 19232 0062 1AD0     		beq	.L32
 19233              	.LBB12:
 114:../xf/xftimeoutmanager.cpp **** 			{
 115:../xf/xftimeoutmanager.cpp **** 				TimeoutList::iterator i = _timeouts.begin();
 19234              		.loc 1 115 0
 19235 0064 7B68     		ldr	r3, [r7, #4]
 19236 0066 03F10803 		add	r3, r3, #8
 19237 006a 1846     		mov	r0, r3
 19238 006c FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv
 19239 0070 0346     		mov	r3, r0
 19240 0072 BB60     		str	r3, [r7, #8]
 116:../xf/xftimeoutmanager.cpp **** 
 117:../xf/xftimeoutmanager.cpp **** 				// Add ticks overrun to next timeout
 118:../xf/xftimeoutmanager.cpp **** 				i++;
 19241              		.loc 1 118 0
 19242 0074 07F10803 		add	r3, r7, #8
 19243 0078 1846     		mov	r0, r3
 19244 007a 4FF00001 		mov	r1, #0
 19245 007e FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEppEi
 119:../xf/xftimeoutmanager.cpp **** 				(*i)->_relTicks -= pFirstTimeout->_relTicks;
 19246              		.loc 1 119 0
 19247 0082 07F10803 		add	r3, r7, #8
 19248 0086 1846     		mov	r0, r3
 19249 0088 FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19250 008c 0346     		mov	r3, r0
 19251 008e 1B68     		ldr	r3, [r3, #0]
 19252 0090 9969     		ldr	r1, [r3, #24]
 19253 0092 FA68     		ldr	r2, [r7, #12]
 19254 0094 9269     		ldr	r2, [r2, #24]
 19255 0096 8A1A     		subs	r2, r1, r2
 19256 0098 9A61     		str	r2, [r3, #24]
 19257              	.L32:
 19258              	.LBE12:
 19259              	.LBE11:
 120:../xf/xftimeoutmanager.cpp **** 			}
 121:../xf/xftimeoutmanager.cpp **** 
 122:../xf/xftimeoutmanager.cpp **** 			// Inject the timeout back to the behavioral class
 123:../xf/xftimeoutmanager.cpp **** 			returnTimeout(pFirstTimeout);
 19260              		.loc 1 123 0
 19261 009a 7868     		ldr	r0, [r7, #4]
 19262 009c F968     		ldr	r1, [r7, #12]
 19263 009e FFF7FEFF 		bl	_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout
 124:../xf/xftimeoutmanager.cpp **** 
 125:../xf/xftimeoutmanager.cpp **** 			// Remove timeout
 126:../xf/xftimeoutmanager.cpp **** 			_timeouts.pop_front();
 19264              		.loc 1 126 0
 19265 00a2 7B68     		ldr	r3, [r7, #4]
 19266 00a4 03F10803 		add	r3, r3, #8
 19267 00a8 1846     		mov	r0, r3
 19268 00aa FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE9pop_frontEv
 19269              	.L30:
 19270              	.LBE10:
 19271              	.LBE9:
 19272              	.LBE8:
 19273              	.LBE7:
 19274              	.LBE6:
 127:../xf/xftimeoutmanager.cpp **** 		}
 128:../xf/xftimeoutmanager.cpp **** 	}
 129:../xf/xftimeoutmanager.cpp **** }
 19275              		.loc 1 129 0
 19276 00ae 07F11007 		add	r7, r7, #16
 19277 00b2 BD46     		mov	sp, r7
 19278 00b4 80BD     		pop	{r7, pc}
 19279              		.cfi_endproc
 19280              	.LFE877:
 19282 00b6 00BF     		.section	.rodata
 19283              		.align	2
 19284              	.LC0:
 19285 0000 2E2E2F78 		.ascii	"../xf/xftimeoutmanager.cpp\000"
 19285      662F7866 
 19285      74696D65 
 19285      6F75746D 
 19285      616E6167 
 19286 001b 00       		.align	2
 19287              	.LC1:
 19288 001c 6920213D 		.ascii	"i != _timeouts.end()\000"
 19288      205F7469 
 19288      6D656F75 
 19288      74732E65 
 19288      6E642829 
 19289 0031 000000   		.section	.text._ZN16XFTimeoutManager10addTimeoutEP9XFTimeout,"ax",%progbits
 19290              		.align	2
 19291              		.global	_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout
 19292              		.thumb
 19293              		.thumb_func
 19295              	_ZN16XFTimeoutManager10addTimeoutEP9XFTimeout:
 19296              	.LFB878:
 130:../xf/xftimeoutmanager.cpp **** 
 131:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::addTimeout(XFTimeout * pNewTimeout)
 132:../xf/xftimeoutmanager.cpp **** {
 19297              		.loc 1 132 0
 19298              		.cfi_startproc
 19299              		@ args = 0, pretend = 0, frame = 24
 19300              		@ frame_needed = 1, uses_anonymous_args = 0
 19301 0000 B0B5     		push	{r4, r5, r7, lr}
 19302              	.LCFI41:
 19303              		.cfi_def_cfa_offset 16
 19304 0002 86B0     		sub	sp, sp, #24
 19305              	.LCFI42:
 19306              		.cfi_def_cfa_offset 40
 19307 0004 00AF     		add	r7, sp, #0
 19308              		.cfi_offset 14, -4
 19309              		.cfi_offset 7, -8
 19310              		.cfi_offset 5, -12
 19311              		.cfi_offset 4, -16
 19312              	.LCFI43:
 19313              		.cfi_def_cfa_register 7
 19314 0006 7860     		str	r0, [r7, #4]
 19315 0008 3960     		str	r1, [r7, #0]
 19316              	.LBB13:
 133:../xf/xftimeoutmanager.cpp **** 	enterCritical();
 19317              		.loc 1 133 0
 19318 000a FFF7FEFF 		bl	enterCritical
 19319              	.LBB14:
 134:../xf/xftimeoutmanager.cpp **** 
 135:../xf/xftimeoutmanager.cpp **** 	if (!_timeouts.empty())
 19320              		.loc 1 135 0
 19321 000e 7B68     		ldr	r3, [r7, #4]
 19322 0010 03F10803 		add	r3, r3, #8
 19323 0014 1846     		mov	r0, r3
 19324 0016 FFF7FEFF 		bl	_ZNKSt4listIP9XFTimeoutSaIS1_EE5emptyEv
 19325 001a 0346     		mov	r3, r0
 19326 001c 83F00103 		eor	r3, r3, #1
 19327 0020 DBB2     		uxtb	r3, r3
 19328 0022 002B     		cmp	r3, #0
 19329 0024 00F0DB80 		beq	.L34
 19330              	.LBB15:
 136:../xf/xftimeoutmanager.cpp **** 	{
 137:../xf/xftimeoutmanager.cpp **** 		// Insert timeout before timeout(s) triggering later
 138:../xf/xftimeoutmanager.cpp **** 		TimeoutList::iterator i = _timeouts.begin();
 19331              		.loc 1 138 0
 19332 0028 7B68     		ldr	r3, [r7, #4]
 19333 002a 03F10803 		add	r3, r3, #8
 19334 002e 1846     		mov	r0, r3
 19335 0030 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv
 19336 0034 0346     		mov	r3, r0
 19337 0036 BB60     		str	r3, [r7, #8]
 19338              	.LBB16:
 139:../xf/xftimeoutmanager.cpp **** 
 140:../xf/xftimeoutmanager.cpp **** 		if ((*i)->_relTicks >= pNewTimeout->_relTicks)
 19339              		.loc 1 140 0
 19340 0038 07F10803 		add	r3, r7, #8
 19341 003c 1846     		mov	r0, r3
 19342 003e FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19343 0042 0346     		mov	r3, r0
 19344 0044 1B68     		ldr	r3, [r3, #0]
 19345 0046 9A69     		ldr	r2, [r3, #24]
 19346 0048 3B68     		ldr	r3, [r7, #0]
 19347 004a 9B69     		ldr	r3, [r3, #24]
 19348 004c 9A42     		cmp	r2, r3
 19349 004e B4BF     		ite	lt
 19350 0050 0023     		movlt	r3, #0
 19351 0052 0123     		movge	r3, #1
 19352 0054 DBB2     		uxtb	r3, r3
 19353 0056 002B     		cmp	r3, #0
 19354 0058 14D0     		beq	.L35
 141:../xf/xftimeoutmanager.cpp **** 		{
 142:../xf/xftimeoutmanager.cpp **** 			// A new timeout at the beginning
 143:../xf/xftimeoutmanager.cpp **** 			_timeouts.push_front(pNewTimeout);
 19355              		.loc 1 143 0
 19356 005a 7B68     		ldr	r3, [r7, #4]
 19357 005c 03F10802 		add	r2, r3, #8
 19358 0060 3B46     		mov	r3, r7
 19359 0062 1046     		mov	r0, r2
 19360 0064 1946     		mov	r1, r3
 19361 0066 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE10push_frontERKS1_
 144:../xf/xftimeoutmanager.cpp **** 
 145:../xf/xftimeoutmanager.cpp **** 			// Remove time from following timeout
 146:../xf/xftimeoutmanager.cpp **** 			(*i)->_relTicks -= pNewTimeout->_relTicks;
 19362              		.loc 1 146 0
 19363 006a 07F10803 		add	r3, r7, #8
 19364 006e 1846     		mov	r0, r3
 19365 0070 FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19366 0074 0346     		mov	r3, r0
 19367 0076 1B68     		ldr	r3, [r3, #0]
 19368 0078 9969     		ldr	r1, [r3, #24]
 19369 007a 3A68     		ldr	r2, [r7, #0]
 19370 007c 9269     		ldr	r2, [r2, #24]
 19371 007e 8A1A     		subs	r2, r1, r2
 19372 0080 9A61     		str	r2, [r3, #24]
 19373 0082 B4E0     		b	.L36
 19374              	.L35:
 19375              	.LBB17:
 147:../xf/xftimeoutmanager.cpp **** 		}
 148:../xf/xftimeoutmanager.cpp **** 		else
 149:../xf/xftimeoutmanager.cpp **** 		{
 150:../xf/xftimeoutmanager.cpp **** 			unsigned int index = 0;
 19376              		.loc 1 150 0
 19377 0084 4FF00003 		mov	r3, #0
 19378 0088 7B61     		str	r3, [r7, #20]
 151:../xf/xftimeoutmanager.cpp **** 
 152:../xf/xftimeoutmanager.cpp **** 			// Remove time from new timeout
 153:../xf/xftimeoutmanager.cpp **** 			pNewTimeout->_relTicks -= (*i)->_relTicks;
 19379              		.loc 1 153 0
 19380 008a 3C68     		ldr	r4, [r7, #0]
 19381 008c 3B68     		ldr	r3, [r7, #0]
 19382 008e 9D69     		ldr	r5, [r3, #24]
 19383 0090 07F10803 		add	r3, r7, #8
 19384 0094 1846     		mov	r0, r3
 19385 0096 FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19386 009a 0346     		mov	r3, r0
 19387 009c 1B68     		ldr	r3, [r3, #0]
 19388 009e 9B69     		ldr	r3, [r3, #24]
 19389 00a0 EB1A     		subs	r3, r5, r3
 19390 00a2 A361     		str	r3, [r4, #24]
 154:../xf/xftimeoutmanager.cpp **** 			i++; index++;
 19391              		.loc 1 154 0
 19392 00a4 07F10803 		add	r3, r7, #8
 19393 00a8 1846     		mov	r0, r3
 19394 00aa 4FF00001 		mov	r1, #0
 19395 00ae FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEppEi
 19396 00b2 7B69     		ldr	r3, [r7, #20]
 19397 00b4 03F10103 		add	r3, r3, #1
 19398 00b8 7B61     		str	r3, [r7, #20]
 155:../xf/xftimeoutmanager.cpp **** 
 156:../xf/xftimeoutmanager.cpp **** 			while (i != _timeouts.end() &&
 19399              		.loc 1 156 0
 19400 00ba 17E0     		b	.L37
 19401              	.L40:
 157:../xf/xftimeoutmanager.cpp **** 				   (*i)->_relTicks < pNewTimeout->_relTicks)
 158:../xf/xftimeoutmanager.cpp **** 			{
 159:../xf/xftimeoutmanager.cpp **** 				pNewTimeout->_relTicks -= (*i)->_relTicks;
 19402              		.loc 1 159 0
 19403 00bc 3C68     		ldr	r4, [r7, #0]
 19404 00be 3B68     		ldr	r3, [r7, #0]
 19405 00c0 9D69     		ldr	r5, [r3, #24]
 19406 00c2 07F10803 		add	r3, r7, #8
 19407 00c6 1846     		mov	r0, r3
 19408 00c8 FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19409 00cc 0346     		mov	r3, r0
 19410 00ce 1B68     		ldr	r3, [r3, #0]
 19411 00d0 9B69     		ldr	r3, [r3, #24]
 19412 00d2 EB1A     		subs	r3, r5, r3
 19413 00d4 A361     		str	r3, [r4, #24]
 160:../xf/xftimeoutmanager.cpp **** 				i++; index++;
 19414              		.loc 1 160 0
 19415 00d6 07F10803 		add	r3, r7, #8
 19416 00da 1846     		mov	r0, r3
 19417 00dc 4FF00001 		mov	r1, #0
 19418 00e0 FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEppEi
 19419 00e4 7B69     		ldr	r3, [r7, #20]
 19420 00e6 03F10103 		add	r3, r3, #1
 19421 00ea 7B61     		str	r3, [r7, #20]
 19422              	.L37:
 156:../xf/xftimeoutmanager.cpp **** 			while (i != _timeouts.end() &&
 19423              		.loc 1 156 0 discriminator 1
 19424 00ec 7B68     		ldr	r3, [r7, #4]
 19425 00ee 03F10803 		add	r3, r3, #8
 19426 00f2 1846     		mov	r0, r3
 19427 00f4 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE3endEv
 19428 00f8 0346     		mov	r3, r0
 19429 00fa FB60     		str	r3, [r7, #12]
 19430 00fc 07F10802 		add	r2, r7, #8
 19431 0100 07F10C03 		add	r3, r7, #12
 19432 0104 1046     		mov	r0, r2
 19433 0106 1946     		mov	r1, r3
 19434 0108 FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_
 19435 010c 0346     		mov	r3, r0
 19436 010e 002B     		cmp	r3, #0
 19437 0110 0ED0     		beq	.L38
 157:../xf/xftimeoutmanager.cpp **** 				   (*i)->_relTicks < pNewTimeout->_relTicks)
 19438              		.loc 1 157 0 discriminator 2
 19439 0112 07F10803 		add	r3, r7, #8
 19440 0116 1846     		mov	r0, r3
 19441 0118 FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19442 011c 0346     		mov	r3, r0
 156:../xf/xftimeoutmanager.cpp **** 			while (i != _timeouts.end() &&
 19443              		.loc 1 156 0 discriminator 2
 19444 011e 1B68     		ldr	r3, [r3, #0]
 19445 0120 9A69     		ldr	r2, [r3, #24]
 19446 0122 3B68     		ldr	r3, [r7, #0]
 19447 0124 9B69     		ldr	r3, [r3, #24]
 19448 0126 9A42     		cmp	r2, r3
 19449 0128 02DA     		bge	.L38
 156:../xf/xftimeoutmanager.cpp **** 			while (i != _timeouts.end() &&
 19450              		.loc 1 156 0 is_stmt 0 discriminator 4
 19451 012a 4FF00103 		mov	r3, #1
 19452 012e 01E0     		b	.L39
 19453              	.L38:
 156:../xf/xftimeoutmanager.cpp **** 			while (i != _timeouts.end() &&
 19454              		.loc 1 156 0 discriminator 3
 19455 0130 4FF00003 		mov	r3, #0
 19456              	.L39:
 156:../xf/xftimeoutmanager.cpp **** 			while (i != _timeouts.end() &&
 19457              		.loc 1 156 0 discriminator 5
 19458 0134 002B     		cmp	r3, #0
 19459 0136 C1D1     		bne	.L40
 161:../xf/xftimeoutmanager.cpp **** 			}
 162:../xf/xftimeoutmanager.cpp **** 			// Insert new timeout before
 163:../xf/xftimeoutmanager.cpp **** 			i = _timeouts.insert(i, pNewTimeout);
 19460              		.loc 1 163 0 is_stmt 1
 19461 0138 7B68     		ldr	r3, [r7, #4]
 19462 013a 03F10802 		add	r2, r3, #8
 19463 013e 3B46     		mov	r3, r7
 19464 0140 1046     		mov	r0, r2
 19465 0142 B968     		ldr	r1, [r7, #8]
 19466 0144 1A46     		mov	r2, r3
 19467 0146 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE6insertESt14_List_iteratorIS1_ERKS1_
 19468 014a 0346     		mov	r3, r0
 19469 014c BB60     		str	r3, [r7, #8]
 164:../xf/xftimeoutmanager.cpp **** 
 165:../xf/xftimeoutmanager.cpp **** 			if (_timeouts.size() > index + 1)
 19470              		.loc 1 165 0
 19471 014e 7B68     		ldr	r3, [r7, #4]
 19472 0150 03F10803 		add	r3, r3, #8
 19473 0154 1846     		mov	r0, r3
 19474 0156 FFF7FEFF 		bl	_ZNKSt4listIP9XFTimeoutSaIS1_EE4sizeEv
 19475 015a 0246     		mov	r2, r0
 19476 015c 7B69     		ldr	r3, [r7, #20]
 19477 015e 03F10103 		add	r3, r3, #1
 19478 0162 9A42     		cmp	r2, r3
 19479 0164 94BF     		ite	ls
 19480 0166 0023     		movls	r3, #0
 19481 0168 0123     		movhi	r3, #1
 19482 016a DBB2     		uxtb	r3, r3
 19483 016c 002B     		cmp	r3, #0
 19484 016e 3ED0     		beq	.L36
 166:../xf/xftimeoutmanager.cpp **** 			{
 167:../xf/xftimeoutmanager.cpp **** 				// Remove time from following timeout
 168:../xf/xftimeoutmanager.cpp **** 				i++;
 19485              		.loc 1 168 0
 19486 0170 07F10803 		add	r3, r7, #8
 19487 0174 1846     		mov	r0, r3
 19488 0176 4FF00001 		mov	r1, #0
 19489 017a FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEppEi
 169:../xf/xftimeoutmanager.cpp **** 				assert(i != _timeouts.end());
 19490              		.loc 1 169 0
 19491 017e 7B68     		ldr	r3, [r7, #4]
 19492 0180 03F10803 		add	r3, r3, #8
 19493 0184 1846     		mov	r0, r3
 19494 0186 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE3endEv
 19495 018a 0346     		mov	r3, r0
 19496 018c 3B61     		str	r3, [r7, #16]
 19497 018e 07F10802 		add	r2, r7, #8
 19498 0192 07F11003 		add	r3, r7, #16
 19499 0196 1046     		mov	r0, r2
 19500 0198 1946     		mov	r1, r3
 19501 019a FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_
 19502 019e 0346     		mov	r3, r0
 19503 01a0 002B     		cmp	r3, #0
 19504 01a2 0FD1     		bne	.L41
 19505              		.loc 1 169 0 is_stmt 0 discriminator 1
 19506 01a4 40F20000 		movw	r0, #:lower16:.LC0
 19507 01a8 C0F20000 		movt	r0, #:upper16:.LC0
 19508 01ac 4FF0A901 		mov	r1, #169
 19509 01b0 40F20002 		movw	r2, #:lower16:_ZZN16XFTimeoutManager10addTimeoutEP9XFTimeoutE19__PRETTY_FUNCTION__
 19510 01b4 C0F20002 		movt	r2, #:upper16:_ZZN16XFTimeoutManager10addTimeoutEP9XFTimeoutE19__PRETTY_FUNCTION__
 19511 01b8 40F20003 		movw	r3, #:lower16:.LC1
 19512 01bc C0F20003 		movt	r3, #:upper16:.LC1
 19513 01c0 FFF7FEFF 		bl	__assert_func
 19514              	.L41:
 170:../xf/xftimeoutmanager.cpp **** 				(*i)->_relTicks -= pNewTimeout->_relTicks;
 19515              		.loc 1 170 0 is_stmt 1
 19516 01c4 07F10803 		add	r3, r7, #8
 19517 01c8 1846     		mov	r0, r3
 19518 01ca FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19519 01ce 0346     		mov	r3, r0
 19520 01d0 1B68     		ldr	r3, [r3, #0]
 19521 01d2 9969     		ldr	r1, [r3, #24]
 19522 01d4 3A68     		ldr	r2, [r7, #0]
 19523 01d6 9269     		ldr	r2, [r2, #24]
 19524 01d8 8A1A     		subs	r2, r1, r2
 19525 01da 9A61     		str	r2, [r3, #24]
 19526 01dc 07E0     		b	.L36
 19527              	.L34:
 19528              	.LBE17:
 19529              	.LBE16:
 19530              	.LBE15:
 171:../xf/xftimeoutmanager.cpp **** 			}
 172:../xf/xftimeoutmanager.cpp **** 		}
 173:../xf/xftimeoutmanager.cpp **** 	}
 174:../xf/xftimeoutmanager.cpp **** 	else
 175:../xf/xftimeoutmanager.cpp **** 	{
 176:../xf/xftimeoutmanager.cpp **** 		_timeouts.push_front(pNewTimeout);
 19531              		.loc 1 176 0
 19532 01de 7B68     		ldr	r3, [r7, #4]
 19533 01e0 03F10802 		add	r2, r3, #8
 19534 01e4 3B46     		mov	r3, r7
 19535 01e6 1046     		mov	r0, r2
 19536 01e8 1946     		mov	r1, r3
 19537 01ea FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE10push_frontERKS1_
 19538              	.L36:
 19539              	.LBE14:
 177:../xf/xftimeoutmanager.cpp **** 	}
 178:../xf/xftimeoutmanager.cpp **** 
 179:../xf/xftimeoutmanager.cpp **** 	exitCritical();
 19540              		.loc 1 179 0
 19541 01ee FFF7FEFF 		bl	exitCritical
 19542              	.LBE13:
 180:../xf/xftimeoutmanager.cpp **** }
 19543              		.loc 1 180 0
 19544 01f2 07F11807 		add	r7, r7, #24
 19545 01f6 BD46     		mov	sp, r7
 19546 01f8 B0BD     		pop	{r4, r5, r7, pc}
 19547              		.cfi_endproc
 19548              	.LFE878:
 19550 01fa 00BF     		.section	.text._ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive,"ax",%progbits
 19551              		.align	2
 19552              		.global	_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive
 19553              		.thumb
 19554              		.thumb_func
 19556              	_ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive:
 19557              	.LFB879:
 181:../xf/xftimeoutmanager.cpp **** 
 182:../xf/xftimeoutmanager.cpp **** /**
 183:../xf/xftimeoutmanager.cpp ****  * Removes all timeouts corresponding the given parameters.
 184:../xf/xftimeoutmanager.cpp ****  */
 185:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::removeTimeouts(int timeoutId, IXFReactive * pReactive)
 186:../xf/xftimeoutmanager.cpp **** {
 19558              		.loc 1 186 0
 19559              		.cfi_startproc
 19560              		@ args = 0, pretend = 0, frame = 64
 19561              		@ frame_needed = 1, uses_anonymous_args = 0
 19562 0000 90B5     		push	{r4, r7, lr}
 19563              	.LCFI44:
 19564              		.cfi_def_cfa_offset 12
 19565 0002 91B0     		sub	sp, sp, #68
 19566              	.LCFI45:
 19567              		.cfi_def_cfa_offset 80
 19568 0004 00AF     		add	r7, sp, #0
 19569              		.cfi_offset 14, -4
 19570              		.cfi_offset 7, -8
 19571              		.cfi_offset 4, -12
 19572              	.LCFI46:
 19573              		.cfi_def_cfa_register 7
 19574 0006 F860     		str	r0, [r7, #12]
 19575 0008 B960     		str	r1, [r7, #8]
 19576 000a 7A60     		str	r2, [r7, #4]
 19577              	.LBB18:
 187:../xf/xftimeoutmanager.cpp **** 	const XFTimeout timeout(timeoutId, 0, pReactive);
 19578              		.loc 1 187 0
 19579 000c 07F11803 		add	r3, r7, #24
 19580 0010 1846     		mov	r0, r3
 19581 0012 B968     		ldr	r1, [r7, #8]
 19582 0014 4FF00002 		mov	r2, #0
 19583 0018 7B68     		ldr	r3, [r7, #4]
 19584 001a FFF7FEFF 		bl	_ZN9XFTimeoutC1EiiP11IXFReactive
 188:../xf/xftimeoutmanager.cpp **** 	XFTimeout * pTimeout;
 189:../xf/xftimeoutmanager.cpp **** 
 190:../xf/xftimeoutmanager.cpp **** 	enterCritical();
 19585              		.loc 1 190 0
 19586 001e FFF7FEFF 		bl	enterCritical
 19587              	.LBB19:
 191:../xf/xftimeoutmanager.cpp **** 
 192:../xf/xftimeoutmanager.cpp **** 	for (TimeoutList::iterator i = _timeouts.begin();
 19588              		.loc 1 192 0
 19589 0022 FB68     		ldr	r3, [r7, #12]
 19590 0024 03F10803 		add	r3, r3, #8
 19591 0028 1846     		mov	r0, r3
 19592 002a FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv
 19593 002e 0346     		mov	r3, r0
 19594 0030 7B61     		str	r3, [r7, #20]
 19595 0032 50E0     		b	.L43
 19596              	.L46:
 19597              	.LBB20:
 193:../xf/xftimeoutmanager.cpp **** 		 i != _timeouts.end();)
 194:../xf/xftimeoutmanager.cpp **** 	{
 195:../xf/xftimeoutmanager.cpp **** 		pTimeout = *i;
 19598              		.loc 1 195 0
 19599 0034 07F11403 		add	r3, r7, #20
 19600 0038 1846     		mov	r0, r3
 19601 003a FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19602 003e 0346     		mov	r3, r0
 19603 0040 1B68     		ldr	r3, [r3, #0]
 19604 0042 FB63     		str	r3, [r7, #60]
 19605              	.LBB21:
 196:../xf/xftimeoutmanager.cpp **** 
 197:../xf/xftimeoutmanager.cpp **** 		// Check if behavior and timeout id are equal
 198:../xf/xftimeoutmanager.cpp **** 		if (*pTimeout == timeout)
 19606              		.loc 1 198 0
 19607 0044 07F11803 		add	r3, r7, #24
 19608 0048 F86B     		ldr	r0, [r7, #60]
 19609 004a 1946     		mov	r1, r3
 19610 004c FFF7FEFF 		bl	_ZNK9XFTimeouteqERKS_
 19611 0050 0346     		mov	r3, r0
 19612 0052 002B     		cmp	r3, #0
 19613 0054 38D0     		beq	.L44
 19614              	.LBB22:
 199:../xf/xftimeoutmanager.cpp **** 		{
 200:../xf/xftimeoutmanager.cpp **** 			TimeoutList::iterator next = i;
 19615              		.loc 1 200 0
 19616 0056 7B69     		ldr	r3, [r7, #20]
 19617 0058 3B61     		str	r3, [r7, #16]
 201:../xf/xftimeoutmanager.cpp **** 
 202:../xf/xftimeoutmanager.cpp **** 			// Check if remaining ticks can be given further
 203:../xf/xftimeoutmanager.cpp **** 			if (++next != _timeouts.end())
 19618              		.loc 1 203 0
 19619 005a 07F11003 		add	r3, r7, #16
 19620 005e 1846     		mov	r0, r3
 19621 0060 FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEppEv
 19622 0064 0446     		mov	r4, r0
 19623 0066 FB68     		ldr	r3, [r7, #12]
 19624 0068 03F10803 		add	r3, r3, #8
 19625 006c 1846     		mov	r0, r3
 19626 006e FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE3endEv
 19627 0072 0346     		mov	r3, r0
 19628 0074 BB63     		str	r3, [r7, #56]
 19629 0076 07F13803 		add	r3, r7, #56
 19630 007a 2046     		mov	r0, r4
 19631 007c 1946     		mov	r1, r3
 19632 007e FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_
 19633 0082 0346     		mov	r3, r0
 19634 0084 002B     		cmp	r3, #0
 19635 0086 0BD0     		beq	.L45
 204:../xf/xftimeoutmanager.cpp **** 			{
 205:../xf/xftimeoutmanager.cpp **** 				// Add (remaining) ticks to next timeout in list
 206:../xf/xftimeoutmanager.cpp **** 				(*next)->_relTicks += pTimeout->_relTicks;
 19636              		.loc 1 206 0
 19637 0088 07F11003 		add	r3, r7, #16
 19638 008c 1846     		mov	r0, r3
 19639 008e FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 19640 0092 0346     		mov	r3, r0
 19641 0094 1B68     		ldr	r3, [r3, #0]
 19642 0096 9969     		ldr	r1, [r3, #24]
 19643 0098 FA6B     		ldr	r2, [r7, #60]
 19644 009a 9269     		ldr	r2, [r2, #24]
 19645 009c 8A18     		adds	r2, r1, r2
 19646 009e 9A61     		str	r2, [r3, #24]
 19647              	.L45:
 207:../xf/xftimeoutmanager.cpp **** 			}
 208:../xf/xftimeoutmanager.cpp **** 
 209:../xf/xftimeoutmanager.cpp **** 			i = _timeouts.erase(i);
 19648              		.loc 1 209 0
 19649 00a0 FB68     		ldr	r3, [r7, #12]
 19650 00a2 03F10803 		add	r3, r3, #8
 19651 00a6 1846     		mov	r0, r3
 19652 00a8 7969     		ldr	r1, [r7, #20]
 19653 00aa FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE5eraseESt14_List_iteratorIS1_E
 19654 00ae 0346     		mov	r3, r0
 19655 00b0 7B61     		str	r3, [r7, #20]
 210:../xf/xftimeoutmanager.cpp **** 
 211:../xf/xftimeoutmanager.cpp **** 			delete pTimeout;
 19656              		.loc 1 211 0
 19657 00b2 FB6B     		ldr	r3, [r7, #60]
 19658 00b4 002B     		cmp	r3, #0
 19659 00b6 0ED0     		beq	.L43
 19660              		.loc 1 211 0 is_stmt 0 discriminator 1
 19661 00b8 FB6B     		ldr	r3, [r7, #60]
 19662 00ba 1B68     		ldr	r3, [r3, #0]
 19663 00bc 03F10403 		add	r3, r3, #4
 19664 00c0 1B68     		ldr	r3, [r3, #0]
 19665 00c2 F86B     		ldr	r0, [r7, #60]
 19666 00c4 9847     		blx	r3
 19667 00c6 06E0     		b	.L43
 19668              	.L44:
 19669              	.LBE22:
 212:../xf/xftimeoutmanager.cpp **** 		}
 213:../xf/xftimeoutmanager.cpp **** 		else
 214:../xf/xftimeoutmanager.cpp **** 		{
 215:../xf/xftimeoutmanager.cpp **** 			i++;
 19670              		.loc 1 215 0 is_stmt 1
 19671 00c8 07F11403 		add	r3, r7, #20
 19672 00cc 1846     		mov	r0, r3
 19673 00ce 4FF00001 		mov	r1, #0
 19674 00d2 FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEppEi
 19675              	.L43:
 19676              	.LBE21:
 19677              	.LBE20:
 193:../xf/xftimeoutmanager.cpp **** 		 i != _timeouts.end();)
 19678              		.loc 1 193 0 discriminator 1
 19679 00d6 FB68     		ldr	r3, [r7, #12]
 19680 00d8 03F10803 		add	r3, r3, #8
 19681 00dc 1846     		mov	r0, r3
 19682 00de FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE3endEv
 19683 00e2 0346     		mov	r3, r0
 19684 00e4 7B63     		str	r3, [r7, #52]
 19685 00e6 07F11402 		add	r2, r7, #20
 192:../xf/xftimeoutmanager.cpp **** 	for (TimeoutList::iterator i = _timeouts.begin();
 19686              		.loc 1 192 0 discriminator 1
 19687 00ea 07F13403 		add	r3, r7, #52
 19688 00ee 1046     		mov	r0, r2
 19689 00f0 1946     		mov	r1, r3
 19690 00f2 FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_
 19691 00f6 0346     		mov	r3, r0
 19692 00f8 002B     		cmp	r3, #0
 19693 00fa 9BD1     		bne	.L46
 19694              	.LBE19:
 216:../xf/xftimeoutmanager.cpp **** 		}
 217:../xf/xftimeoutmanager.cpp **** 	}
 218:../xf/xftimeoutmanager.cpp **** 
 219:../xf/xftimeoutmanager.cpp **** 	exitCritical();
 19695              		.loc 1 219 0
 19696 00fc FFF7FEFF 		bl	exitCritical
 19697 0100 07F11803 		add	r3, r7, #24
 19698 0104 1846     		mov	r0, r3
 19699 0106 FFF7FEFF 		bl	_ZN9XFTimeoutD1Ev
 19700              	.LBE18:
 220:../xf/xftimeoutmanager.cpp **** }
 19701              		.loc 1 220 0
 19702 010a 07F14407 		add	r7, r7, #68
 19703 010e BD46     		mov	sp, r7
 19704 0110 90BD     		pop	{r4, r7, pc}
 19705              		.cfi_endproc
 19706              	.LFE879:
 19708 0112 00BF     		.section	.text._ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout,"ax",%progbits
 19709              		.align	2
 19710              		.global	_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout
 19711              		.thumb
 19712              		.thumb_func
 19714              	_ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout:
 19715              	.LFB880:
 221:../xf/xftimeoutmanager.cpp **** 
 222:../xf/xftimeoutmanager.cpp **** /**
 223:../xf/xftimeoutmanager.cpp ****  * Returns the timeout back to the queue of the thread executing
 224:../xf/xftimeoutmanager.cpp ****  * the behavioral instance.
 225:../xf/xftimeoutmanager.cpp ****  */
 226:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::returnTimeout(XFTimeout * pTimeout)
 227:../xf/xftimeoutmanager.cpp **** {
 19716              		.loc 1 227 0
 19717              		.cfi_startproc
 19718              		@ args = 0, pretend = 0, frame = 8
 19719              		@ frame_needed = 1, uses_anonymous_args = 0
 19720 0000 80B5     		push	{r7, lr}
 19721              	.LCFI47:
 19722              		.cfi_def_cfa_offset 8
 19723 0002 82B0     		sub	sp, sp, #8
 19724              	.LCFI48:
 19725              		.cfi_def_cfa_offset 16
 19726 0004 00AF     		add	r7, sp, #0
 19727              		.cfi_offset 14, -4
 19728              		.cfi_offset 7, -8
 19729              	.LCFI49:
 19730              		.cfi_def_cfa_register 7
 19731 0006 7860     		str	r0, [r7, #4]
 19732 0008 3960     		str	r1, [r7, #0]
 228:../xf/xftimeoutmanager.cpp **** 	pTimeout->getBehavior()->pushEvent(pTimeout);
 19733              		.loc 1 228 0
 19734 000a 3B68     		ldr	r3, [r7, #0]
 19735 000c 1846     		mov	r0, r3
 19736 000e FFF7FEFF 		bl	_ZNK8IXFEvent11getBehaviorEv
 19737 0012 0346     		mov	r3, r0
 19738 0014 1A68     		ldr	r2, [r3, #0]
 19739 0016 02F10C02 		add	r2, r2, #12
 19740 001a 1268     		ldr	r2, [r2, #0]
 19741 001c 3968     		ldr	r1, [r7, #0]
 19742 001e 1846     		mov	r0, r3
 19743 0020 9047     		blx	r2
 229:../xf/xftimeoutmanager.cpp **** }
 19744              		.loc 1 229 0
 19745 0022 07F10807 		add	r7, r7, #8
 19746 0026 BD46     		mov	sp, r7
 19747 0028 80BD     		pop	{r7, pc}
 19748              		.cfi_endproc
 19749              	.LFE880:
 19751 002a 00BF     		.section	.text._ZN16XFTimeoutManager18startHardwareTimerEi,"ax",%progbits
 19752              		.align	2
 19753              		.global	_ZN16XFTimeoutManager18startHardwareTimerEi
 19754              		.thumb
 19755              		.thumb_func
 19757              	_ZN16XFTimeoutManager18startHardwareTimerEi:
 19758              	.LFB881:
 230:../xf/xftimeoutmanager.cpp **** 
 231:../xf/xftimeoutmanager.cpp **** 
 232:../xf/xftimeoutmanager.cpp **** /**
 233:../xf/xftimeoutmanager.cpp ****  * Initializes and starts a hardware timer, which will call XFTimeoutManager::tick()
 234:../xf/xftimeoutmanager.cpp ****  * in a regular interval given by parameter tickTime
 235:../xf/xftimeoutmanager.cpp ****  *
 236:../xf/xftimeoutmanager.cpp ****  * \param tickTime Time in milliseconds the hardware timer should call XFTimeoutManager::tick()
 237:../xf/xftimeoutmanager.cpp ****  */
 238:../xf/xftimeoutmanager.cpp **** void XFTimeoutManager::startHardwareTimer(int tickTime)
 239:../xf/xftimeoutmanager.cpp **** {
 19759              		.loc 1 239 0
 19760              		.cfi_startproc
 19761              		@ args = 0, pretend = 0, frame = 8
 19762              		@ frame_needed = 1, uses_anonymous_args = 0
 19763 0000 80B5     		push	{r7, lr}
 19764              	.LCFI50:
 19765              		.cfi_def_cfa_offset 8
 19766 0002 82B0     		sub	sp, sp, #8
 19767              	.LCFI51:
 19768              		.cfi_def_cfa_offset 16
 19769 0004 00AF     		add	r7, sp, #0
 19770              		.cfi_offset 14, -4
 19771              		.cfi_offset 7, -8
 19772              	.LCFI52:
 19773              		.cfi_def_cfa_register 7
 19774 0006 7860     		str	r0, [r7, #4]
 19775 0008 3960     		str	r1, [r7, #0]
 240:../xf/xftimeoutmanager.cpp **** 	//
 241:../xf/xftimeoutmanager.cpp **** 	// Configure SysTick to interrupt at requested interval
 242:../xf/xftimeoutmanager.cpp **** 	//
 243:../xf/xftimeoutmanager.cpp **** 
 244:../xf/xftimeoutmanager.cpp **** 
 245:../xf/xftimeoutmanager.cpp **** #ifdef TC_STM32 /**********************************************************************************
 246:../xf/xftimeoutmanager.cpp **** 
 247:../xf/xftimeoutmanager.cpp **** 	// Update SystemCoreClock according to Clock Register Values
 248:../xf/xftimeoutmanager.cpp **** 	SystemCoreClockUpdate();
 19776              		.loc 1 248 0
 19777 000a FFF7FEFF 		bl	SystemCoreClockUpdate
 249:../xf/xftimeoutmanager.cpp **** 
 250:../xf/xftimeoutmanager.cpp **** 	// Set tick interval to tickTime. Timer interrupt (SysTickHandler())
 251:../xf/xftimeoutmanager.cpp **** 	// should be called every tickTime milliseconds.
 252:../xf/xftimeoutmanager.cpp **** 	SysTick_Config(SystemCoreClock * tickTime / 1000);
 19778              		.loc 1 252 0
 19779 000e 40F20003 		movw	r3, #:lower16:SystemCoreClock
 19780 0012 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 19781 0016 1B68     		ldr	r3, [r3, #0]
 19782 0018 3A68     		ldr	r2, [r7, #0]
 19783 001a 02FB03F2 		mul	r2, r2, r3
 19784 001e 44F6D353 		movw	r3, #19923
 19785 0022 C1F26203 		movt	r3, 4194
 19786 0026 A3FB0213 		umull	r1, r3, r3, r2
 19787 002a 4FEA9313 		lsr	r3, r3, #6
 19788 002e 1846     		mov	r0, r3
 19789 0030 FFF7FEFF 		bl	SysTick_Config
 253:../xf/xftimeoutmanager.cpp **** 
 254:../xf/xftimeoutmanager.cpp **** 	NVIC_SetPriority(SysTick_IRQn, 0x00);
 19790              		.loc 1 254 0
 19791 0034 4FF0FF30 		mov	r0, #-1
 19792 0038 4FF00001 		mov	r1, #0
 19793 003c FFF7FEFF 		bl	NVIC_SetPriority
 255:../xf/xftimeoutmanager.cpp **** 
 256:../xf/xftimeoutmanager.cpp **** #elif defined( TC_MESHSIM ) /**********************************************************************
 257:../xf/xftimeoutmanager.cpp **** 
 258:../xf/xftimeoutmanager.cpp **** 	startTimer( tickTime );
 259:../xf/xftimeoutmanager.cpp **** 
 260:../xf/xftimeoutmanager.cpp **** #endif /*******************************************************************************************
 261:../xf/xftimeoutmanager.cpp **** 
 262:../xf/xftimeoutmanager.cpp **** 
 263:../xf/xftimeoutmanager.cpp **** }
 19794              		.loc 1 263 0
 19795 0040 07F10807 		add	r7, r7, #8
 19796 0044 BD46     		mov	sp, r7
 19797 0046 80BD     		pop	{r7, pc}
 19798              		.cfi_endproc
 19799              	.LFE881:
 19801              		.section	.text._Z14SysTickHandlerv,"ax",%progbits
 19802              		.align	2
 19803              		.global	_Z14SysTickHandlerv
 19804              		.thumb
 19805              		.thumb_func
 19807              	_Z14SysTickHandlerv:
 19808              	.LFB882:
 264:../xf/xftimeoutmanager.cpp **** 
 265:../xf/xftimeoutmanager.cpp **** 
 266:../xf/xftimeoutmanager.cpp **** #ifdef TC_STM32 /**********************************************************************************
 267:../xf/xftimeoutmanager.cpp **** 
 268:../xf/xftimeoutmanager.cpp **** /**
 269:../xf/xftimeoutmanager.cpp ****  * SysTick Interrupt Service Routine
 270:../xf/xftimeoutmanager.cpp ****  */
 271:../xf/xftimeoutmanager.cpp **** void SysTickHandler()
 272:../xf/xftimeoutmanager.cpp **** {
 19809              		.loc 1 272 0
 19810              		.cfi_startproc
 19811              		@ args = 0, pretend = 0, frame = 0
 19812              		@ frame_needed = 1, uses_anonymous_args = 0
 19813 0000 80B5     		push	{r7, lr}
 19814              	.LCFI53:
 19815              		.cfi_def_cfa_offset 8
 19816 0002 00AF     		add	r7, sp, #0
 19817              		.cfi_offset 14, -4
 19818              		.cfi_offset 7, -8
 19819              	.LCFI54:
 19820              		.cfi_def_cfa_register 7
 273:../xf/xftimeoutmanager.cpp **** 	enterISR();
 19821              		.loc 1 273 0
 19822 0004 40F20003 		movw	r3, #:lower16:bInISR
 19823 0008 C0F20003 		movt	r3, #:upper16:bInISR
 19824 000c 4FF00102 		mov	r2, #1
 19825 0010 1A70     		strb	r2, [r3, #0]
 274:../xf/xftimeoutmanager.cpp **** 	XFTimeoutManager::getInstance()->tick();	// Call Framework hook tick function
 19826              		.loc 1 274 0
 19827 0012 FFF7FEFF 		bl	_ZN16XFTimeoutManager11getInstanceEv
 19828 0016 0346     		mov	r3, r0
 19829 0018 1846     		mov	r0, r3
 19830 001a FFF7FEFF 		bl	_ZN16XFTimeoutManager4tickEv
 275:../xf/xftimeoutmanager.cpp **** 	exitISR();
 19831              		.loc 1 275 0
 19832 001e 40F20003 		movw	r3, #:lower16:bInISR
 19833 0022 C0F20003 		movt	r3, #:upper16:bInISR
 19834 0026 4FF00002 		mov	r2, #0
 19835 002a 1A70     		strb	r2, [r3, #0]
 276:../xf/xftimeoutmanager.cpp **** }
 19836              		.loc 1 276 0
 19837 002c 80BD     		pop	{r7, pc}
 19838              		.cfi_endproc
 19839              	.LFE882:
 19841 002e 00BF     		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EEC2Ev,"axG",%progbits,_ZNSt4listIP9XFTimeoutSaIS1_EEC5
 19842              		.align	2
 19843              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EEC2Ev
 19844              		.thumb
 19845              		.thumb_func
 19847              	_ZNSt4listIP9XFTimeoutSaIS1_EEC2Ev:
 19848              	.LFB895:
 419:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // concept requirements
 420:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 421:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 422:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 423:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 424:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _List_base<_Tp, _Alloc>                    _Base;
 425:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 426:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 427:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     public:
 428:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _Tp                                        value_type;
 429:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef typename _Tp_alloc_type::pointer           pointer;
 430:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef typename _Tp_alloc_type::const_pointer     const_pointer;
 431:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef typename _Tp_alloc_type::reference         reference;
 432:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef typename _Tp_alloc_type::const_reference   const_reference;
 433:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _List_iterator<_Tp>                        iterator;
 434:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _List_const_iterator<_Tp>                  const_iterator;
 435:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef std::reverse_iterator<const_iterator>      const_reverse_iterator;
 436:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef std::reverse_iterator<iterator>            reverse_iterator;
 437:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef size_t                                     size_type;
 438:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef ptrdiff_t                                  difference_type;
 439:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _Alloc                                     allocator_type;
 440:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 441:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     protected:
 442:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Note that pointers-to-_Node's can be ctor-converted to
 443:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // iterator types.
 444:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       typedef _List_node<_Tp>				 _Node;
 445:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 446:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       using _Base::_M_impl;
 447:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       using _Base::_M_put_node;
 448:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       using _Base::_M_get_node;
 449:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       using _Base::_M_get_Tp_allocator;
 450:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       using _Base::_M_get_Node_allocator;
 451:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 452:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 453:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  An instance of user data.
 454:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 455:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Allocates space for a new node and constructs a copy of @a x in it.
 456:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 457:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifndef __GXX_EXPERIMENTAL_CXX0X__
 458:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _Node*
 459:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_create_node(const value_type& __x)
 460:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 461:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_Node* __p = this->_M_get_node();
 462:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	__try
 463:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  {
 464:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    _M_get_Tp_allocator().construct(&__p->_M_data, __x);
 465:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  }
 466:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	__catch(...)
 467:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  {
 468:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    _M_put_node(__p);
 469:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    __throw_exception_again;
 470:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  }
 471:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return __p;
 472:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 473:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #else
 474:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename... _Args>
 475:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _Node*
 476:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _M_create_node(_Args&&... __args)
 477:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	{
 478:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  _Node* __p = this->_M_get_node();
 479:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  __try
 480:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    {
 481:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	      _M_get_Node_allocator().construct(__p,
 482:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 						std::forward<_Args>(__args)...);
 483:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    }
 484:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  __catch(...)
 485:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    {
 486:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	      _M_put_node(__p);
 487:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	      __throw_exception_again;
 488:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    }
 489:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  return __p;
 490:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	}
 491:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 492:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 493:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     public:
 494:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // [23.2.2.1] construct/copy/destroy
 495:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // (assign() and get_allocator() are also listed in this section)
 496:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 497:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Default constructor creates no elements.
 498:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 499:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list()
 19849              		.loc 54 499 0
 19850              		.cfi_startproc
 19851              		@ args = 0, pretend = 0, frame = 8
 19852              		@ frame_needed = 1, uses_anonymous_args = 0
 19853 0000 80B5     		push	{r7, lr}
 19854              	.LCFI55:
 19855              		.cfi_def_cfa_offset 8
 19856 0002 82B0     		sub	sp, sp, #8
 19857              	.LCFI56:
 19858              		.cfi_def_cfa_offset 16
 19859 0004 00AF     		add	r7, sp, #0
 19860              		.cfi_offset 14, -4
 19861              		.cfi_offset 7, -8
 19862              	.LCFI57:
 19863              		.cfi_def_cfa_register 7
 19864 0006 7860     		str	r0, [r7, #4]
 19865              	.LBB23:
 500:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _Base() { }
 19866              		.loc 54 500 0
 19867 0008 7B68     		ldr	r3, [r7, #4]
 19868 000a 1846     		mov	r0, r3
 19869 000c FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev
 19870              	.LBE23:
 19871 0010 7B68     		ldr	r3, [r7, #4]
 19872 0012 1846     		mov	r0, r3
 19873 0014 07F10807 		add	r7, r7, #8
 19874 0018 BD46     		mov	sp, r7
 19875 001a 80BD     		pop	{r7, pc}
 19876              		.cfi_endproc
 19877              	.LFE895:
 19879              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EEC1Ev
 19880              		.thumb_set _ZNSt4listIP9XFTimeoutSaIS1_EEC1Ev,_ZNSt4listIP9XFTimeoutSaIS1_EEC2Ev
 19881              		.section	.text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD2Ev,"axG",%progbits,_ZNSt10_List_
 19882              		.align	2
 19883              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD2Ev
 19884              		.thumb
 19885              		.thumb_func
 19887              	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD2Ev:
 19888              	.LFB899:
 300:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 19889              		.loc 54 300 0
 19890              		.cfi_startproc
 19891              		@ args = 0, pretend = 0, frame = 8
 19892              		@ frame_needed = 1, uses_anonymous_args = 0
 19893 0000 80B5     		push	{r7, lr}
 19894              	.LCFI58:
 19895              		.cfi_def_cfa_offset 8
 19896 0002 82B0     		sub	sp, sp, #8
 19897              	.LCFI59:
 19898              		.cfi_def_cfa_offset 16
 19899 0004 00AF     		add	r7, sp, #0
 19900              		.cfi_offset 14, -4
 19901              		.cfi_offset 7, -8
 19902              	.LCFI60:
 19903              		.cfi_def_cfa_register 7
 19904 0006 7860     		str	r0, [r7, #4]
 19905              	.LBB24:
 300:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 19906              		.loc 54 300 0
 19907 0008 7B68     		ldr	r3, [r7, #4]
 19908 000a 1846     		mov	r0, r3
 19909 000c FFF7FEFF 		bl	_ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev
 19910              	.LBE24:
 19911 0010 7B68     		ldr	r3, [r7, #4]
 19912 0012 1846     		mov	r0, r3
 19913 0014 07F10807 		add	r7, r7, #8
 19914 0018 BD46     		mov	sp, r7
 19915 001a 80BD     		pop	{r7, pc}
 19916              		.cfi_endproc
 19917              	.LFE899:
 19919              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD1Ev
 19920              		.thumb_set _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD1Ev,_ZNSt10_List_baseIP9XFTimeoutSaIS
 19921              		.section	.text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev,"axG",%progbits,_ZNSt10_List_baseIP9XFTim
 19922              		.align	2
 19923              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev
 19924              		.thumb
 19925              		.thumb_func
 19927              	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev:
 19928              	.LFB901:
 359:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       ~_List_base()
 19929              		.loc 54 359 0
 19930              		.cfi_startproc
 19931              		@ args = 0, pretend = 0, frame = 8
 19932              		@ frame_needed = 1, uses_anonymous_args = 0
 19933 0000 80B5     		push	{r7, lr}
 19934              	.LCFI61:
 19935              		.cfi_def_cfa_offset 8
 19936 0002 82B0     		sub	sp, sp, #8
 19937              	.LCFI62:
 19938              		.cfi_def_cfa_offset 16
 19939 0004 00AF     		add	r7, sp, #0
 19940              		.cfi_offset 14, -4
 19941              		.cfi_offset 7, -8
 19942              	.LCFI63:
 19943              		.cfi_def_cfa_register 7
 19944 0006 7860     		str	r0, [r7, #4]
 19945              	.LBB25:
 360:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_clear(); }
 19946              		.loc 54 360 0
 19947 0008 7868     		ldr	r0, [r7, #4]
 19948 000a FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE8_M_clearEv
 19949 000e 7B68     		ldr	r3, [r7, #4]
 19950 0010 1846     		mov	r0, r3
 19951 0012 FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD1Ev
 19952              	.LBE25:
 19953 0016 7B68     		ldr	r3, [r7, #4]
 19954 0018 1846     		mov	r0, r3
 19955 001a 07F10807 		add	r7, r7, #8
 19956 001e BD46     		mov	sp, r7
 19957 0020 80BD     		pop	{r7, pc}
 19958              		.cfi_endproc
 19959              	.LFE901:
 19961              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EED1Ev
 19962              		.thumb_set _ZNSt10_List_baseIP9XFTimeoutSaIS1_EED1Ev,_ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev
 19963 0022 00BF     		.section	.text._ZNKSt4listIP9XFTimeoutSaIS1_EE5emptyEv,"axG",%progbits,_ZNKSt4listIP9XFTimeoutSaIS
 19964              		.align	2
 19965              		.weak	_ZNKSt4listIP9XFTimeoutSaIS1_EE5emptyEv
 19966              		.thumb
 19967              		.thumb_func
 19969              	_ZNKSt4listIP9XFTimeoutSaIS1_EE5emptyEv:
 19970              	.LFB903:
 501:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 502:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 503:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Creates a %list with no elements.
 504:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  a  An allocator object.
 505:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 506:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       explicit
 507:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list(const allocator_type& __a)
 508:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _Base(__a) { }
 509:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 510:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 511:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Creates a %list with copies of an exemplar element.
 512:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  n  The number of elements to initially create.
 513:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  value  An element to copy.
 514:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  a  An allocator object.
 515:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 516:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This constructor fills the %list with @a n copies of @a value.
 517:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 518:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       explicit
 519:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list(size_type __n, const value_type& __value = value_type(),
 520:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	   const allocator_type& __a = allocator_type())
 521:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _Base(__a)
 522:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_fill_initialize(__n, __value); }
 523:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 524:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 525:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  %List copy constructor.
 526:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  A %list of identical element and allocator types.
 527:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 528:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  The newly-created %list uses a copy of the allocation object used
 529:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  by @a x.
 530:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 531:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list(const list& __x)
 532:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _Base(__x._M_get_Node_allocator())
 533:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_initialize_dispatch(__x.begin(), __x.end(), __false_type()); }
 534:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 535:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 536:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 537:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  %List move constructor.
 538:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  A %list of identical element and allocator types.
 539:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 540:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  The newly-created %list contains the exact contents of @a x.
 541:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  The contents of @a x are a valid, but unspecified %list.
 542:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 543:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list(list&& __x)
 544:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _Base(std::forward<_Base>(__x)) { }
 545:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 546:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 547:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Builds a %list from an initializer_list
 548:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  l  An initializer_list of value_type.
 549:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  a  An allocator object.
 550:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 551:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Create a %list consisting of copies of the elements in the
 552:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  initializer_list @a l.  This is linear in l.size().
 553:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 554:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list(initializer_list<value_type> __l,
 555:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****            const allocator_type& __a = allocator_type())
 556:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _Base(__a)
 557:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_initialize_dispatch(__l.begin(), __l.end(), __false_type()); }
 558:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 559:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 560:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 561:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Builds a %list from a range.
 562:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  first  An input iterator.
 563:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  last  An input iterator.
 564:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  a  An allocator object.
 565:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 566:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Create a %list consisting of copies of the elements from
 567:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  [@a first,@a last).  This is linear in N (where N is
 568:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  distance(@a first,@a last)).
 569:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 570:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _InputIterator>
 571:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         list(_InputIterator __first, _InputIterator __last,
 572:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	     const allocator_type& __a = allocator_type())
 573:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         : _Base(__a)
 574:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         { 
 575:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 576:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 577:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 578:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	}
 579:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 580:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 581:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  No explicit dtor needed as the _Base dtor takes care of
 582:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  things.  The _Base dtor only erases the elements, and note
 583:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  that if the elements themselves are pointers, the pointed-to
 584:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  memory is not touched in any way.  Managing the pointer is
 585:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the user's responsibility.
 586:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 587:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 588:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 589:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  %List assignment operator.
 590:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  A %list of identical element and allocator types.
 591:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 592:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  All the elements of @a x are copied, but unlike the copy
 593:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  constructor, the allocator object is not copied.
 594:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 595:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list&
 596:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator=(const list& __x);
 597:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 598:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 599:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 600:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  %List move assignment operator.
 601:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  A %list of identical element and allocator types.
 602:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 603:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  The contents of @a x are moved into this %list (without copying).
 604:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @a x is a valid, but unspecified %list
 605:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 606:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list&
 607:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator=(list&& __x)
 608:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 609:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	// NB: DR 1204.
 610:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	// NB: DR 675.
 611:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	this->clear();
 612:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	this->swap(__x);
 613:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *this;
 614:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 615:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 616:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 617:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  %List initializer list assignment operator.
 618:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  l  An initializer_list of value_type.
 619:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 620:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Replace the contents of the %list with copies of the elements
 621:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  in the initializer_list @a l.  This is linear in l.size().
 622:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 623:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       list&
 624:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator=(initializer_list<value_type> __l)
 625:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
 626:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	this->assign(__l.begin(), __l.end());
 627:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *this;
 628:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 629:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 630:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 631:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 632:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Assigns a given value to a %list.
 633:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  n  Number of elements to be assigned.
 634:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  val  Value to be assigned.
 635:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 636:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function fills a %list with @a n copies of the given
 637:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  value.  Note that the assignment completely changes the %list
 638:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  and that the resulting %list's size is the same as the number
 639:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  of elements assigned.  Old data may be lost.
 640:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 641:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 642:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       assign(size_type __n, const value_type& __val)
 643:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_fill_assign(__n, __val); }
 644:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 645:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 646:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Assigns a range to a %list.
 647:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  first  An input iterator.
 648:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  last   An input iterator.
 649:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 650:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function fills a %list with copies of the elements in the
 651:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  range [@a first,@a last).
 652:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 653:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Note that the assignment completely changes the %list and
 654:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  that the resulting %list's size is the same as the number of
 655:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  elements assigned.  Old data may be lost.
 656:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 657:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _InputIterator>
 658:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
 659:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         assign(_InputIterator __first, _InputIterator __last)
 660:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         {
 661:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 662:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 663:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 664:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	}
 665:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 666:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 667:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 668:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Assigns an initializer_list to a %list.
 669:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  l  An initializer_list of value_type.
 670:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 671:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Replace the contents of the %list with copies of the elements
 672:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  in the initializer_list @a l.  This is linear in l.size().
 673:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 674:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 675:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       assign(initializer_list<value_type> __l)
 676:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->assign(__l.begin(), __l.end()); }
 677:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 678:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 679:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /// Get a copy of the memory allocation object.
 680:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       allocator_type
 681:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       get_allocator() const
 682:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _Base::get_allocator(); }
 683:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 684:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // iterators
 685:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 686:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read/write iterator that points to the first element in the
 687:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  %list.  Iteration is done in ordinary element order.
 688:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 689:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       iterator
 690:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       begin()
 691:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return iterator(this->_M_impl._M_node._M_next); }
 692:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 693:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 694:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) iterator that points to the
 695:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  first element in the %list.  Iteration is done in ordinary
 696:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element order.
 697:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 698:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_iterator
 699:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       begin() const
 700:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_iterator(this->_M_impl._M_node._M_next); }
 701:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 702:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 703:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read/write iterator that points one past the last
 704:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element in the %list.  Iteration is done in ordinary element
 705:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  order.
 706:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 707:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       iterator
 708:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       end()
 709:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return iterator(&this->_M_impl._M_node); }
 710:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 711:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 712:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) iterator that points one past
 713:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the last element in the %list.  Iteration is done in ordinary
 714:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element order.
 715:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 716:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_iterator
 717:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       end() const
 718:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_iterator(&this->_M_impl._M_node); }
 719:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 720:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 721:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read/write reverse iterator that points to the last
 722:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element in the %list.  Iteration is done in reverse element
 723:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  order.
 724:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 725:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       reverse_iterator
 726:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       rbegin()
 727:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return reverse_iterator(end()); }
 728:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 729:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 730:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) reverse iterator that points to
 731:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the last element in the %list.  Iteration is done in reverse
 732:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element order.
 733:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 734:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_reverse_iterator
 735:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       rbegin() const
 736:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_reverse_iterator(end()); }
 737:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 738:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 739:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read/write reverse iterator that points to one
 740:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  before the first element in the %list.  Iteration is done in
 741:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  reverse element order.
 742:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 743:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       reverse_iterator
 744:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       rend()
 745:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return reverse_iterator(begin()); }
 746:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 747:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 748:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) reverse iterator that points to one
 749:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  before the first element in the %list.  Iteration is done in reverse
 750:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element order.
 751:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 752:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_reverse_iterator
 753:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       rend() const
 754:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_reverse_iterator(begin()); }
 755:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 756:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 757:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 758:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) iterator that points to the
 759:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  first element in the %list.  Iteration is done in ordinary
 760:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element order.
 761:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 762:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_iterator
 763:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       cbegin() const
 764:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_iterator(this->_M_impl._M_node._M_next); }
 765:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 766:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 767:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) iterator that points one past
 768:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the last element in the %list.  Iteration is done in ordinary
 769:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element order.
 770:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 771:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_iterator
 772:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       cend() const
 773:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_iterator(&this->_M_impl._M_node); }
 774:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 775:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 776:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) reverse iterator that points to
 777:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the last element in the %list.  Iteration is done in reverse
 778:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element order.
 779:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 780:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_reverse_iterator
 781:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       crbegin() const
 782:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_reverse_iterator(end()); }
 783:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 784:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 785:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) reverse iterator that points to one
 786:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  before the first element in the %list.  Iteration is done in reverse
 787:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element order.
 788:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 789:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_reverse_iterator
 790:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       crend() const
 791:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_reverse_iterator(begin()); }
 792:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 793:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 794:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // [23.2.2.2] capacity
 795:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 796:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns true if the %list is empty.  (Thus begin() would equal
 797:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  end().)
 798:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 799:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       bool
 800:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       empty() const
 19971              		.loc 54 800 0
 19972              		.cfi_startproc
 19973              		@ args = 0, pretend = 0, frame = 8
 19974              		@ frame_needed = 1, uses_anonymous_args = 0
 19975              		@ link register save eliminated.
 19976 0000 80B4     		push	{r7}
 19977              	.LCFI64:
 19978              		.cfi_def_cfa_offset 4
 19979 0002 83B0     		sub	sp, sp, #12
 19980              	.LCFI65:
 19981              		.cfi_def_cfa_offset 16
 19982 0004 00AF     		add	r7, sp, #0
 19983              		.cfi_offset 7, -4
 19984              	.LCFI66:
 19985              		.cfi_def_cfa_register 7
 19986 0006 7860     		str	r0, [r7, #4]
 801:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return this->_M_impl._M_node._M_next == &this->_M_impl._M_node; }
 19987              		.loc 54 801 0
 19988 0008 7B68     		ldr	r3, [r7, #4]
 19989 000a 1A68     		ldr	r2, [r3, #0]
 19990 000c 7B68     		ldr	r3, [r7, #4]
 19991 000e 9A42     		cmp	r2, r3
 19992 0010 14BF     		ite	ne
 19993 0012 0023     		movne	r3, #0
 19994 0014 0123     		moveq	r3, #1
 19995 0016 DBB2     		uxtb	r3, r3
 19996 0018 1846     		mov	r0, r3
 19997 001a 07F10C07 		add	r7, r7, #12
 19998 001e BD46     		mov	sp, r7
 19999 0020 80BC     		pop	{r7}
 20000 0022 7047     		bx	lr
 20001              		.cfi_endproc
 20002              	.LFE903:
 20004              		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE5frontEv,"axG",%progbits,_ZNSt4listIP9XFTimeoutSaIS1_
 20005              		.align	2
 20006              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE5frontEv
 20007              		.thumb
 20008              		.thumb_func
 20010              	_ZNSt4listIP9XFTimeoutSaIS1_EE5frontEv:
 20011              	.LFB904:
 802:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 803:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**  Returns the number of elements in the %list.  */
 804:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       size_type
 805:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       size() const
 806:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return std::distance(begin(), end()); }
 807:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 808:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**  Returns the size() of the largest possible %list.  */
 809:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       size_type
 810:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       max_size() const
 811:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_get_Node_allocator().max_size(); }
 812:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 813:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 814:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief Resizes the %list to the specified number of elements.
 815:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param new_size Number of elements the %list should contain.
 816:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param x Data with which new elements should be populated.
 817:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 818:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will %resize the %list to the specified number
 819:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  of elements.  If the number is smaller than the %list's
 820:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  current size the %list is truncated, otherwise the %list is
 821:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  extended and new elements are populated with given data.
 822:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 823:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 824:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       resize(size_type __new_size, value_type __x = value_type());
 825:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 826:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // element access
 827:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 828:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read/write reference to the data at the first
 829:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element of the %list.
 830:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 831:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       reference
 832:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       front()
 20012              		.loc 54 832 0
 20013              		.cfi_startproc
 20014              		@ args = 0, pretend = 0, frame = 16
 20015              		@ frame_needed = 1, uses_anonymous_args = 0
 20016 0000 80B5     		push	{r7, lr}
 20017              	.LCFI67:
 20018              		.cfi_def_cfa_offset 8
 20019 0002 84B0     		sub	sp, sp, #16
 20020              	.LCFI68:
 20021              		.cfi_def_cfa_offset 24
 20022 0004 00AF     		add	r7, sp, #0
 20023              		.cfi_offset 14, -4
 20024              		.cfi_offset 7, -8
 20025              	.LCFI69:
 20026              		.cfi_def_cfa_register 7
 20027 0006 7860     		str	r0, [r7, #4]
 833:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return *begin(); }
 20028              		.loc 54 833 0
 20029 0008 7868     		ldr	r0, [r7, #4]
 20030 000a FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv
 20031 000e 0346     		mov	r3, r0
 20032 0010 FB60     		str	r3, [r7, #12]
 20033 0012 07F10C03 		add	r3, r7, #12
 20034 0016 1846     		mov	r0, r3
 20035 0018 FFF7FEFF 		bl	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 20036 001c 0346     		mov	r3, r0
 20037 001e 1846     		mov	r0, r3
 20038 0020 07F11007 		add	r7, r7, #16
 20039 0024 BD46     		mov	sp, r7
 20040 0026 80BD     		pop	{r7, pc}
 20041              		.cfi_endproc
 20042              	.LFE904:
 20044              		.section	.text._ZNKSt4listIP9XFTimeoutSaIS1_EE4sizeEv,"axG",%progbits,_ZNKSt4listIP9XFTimeoutSaIS1
 20045              		.align	2
 20046              		.weak	_ZNKSt4listIP9XFTimeoutSaIS1_EE4sizeEv
 20047              		.thumb
 20048              		.thumb_func
 20050              	_ZNKSt4listIP9XFTimeoutSaIS1_EE4sizeEv:
 20051              	.LFB905:
 805:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       size() const
 20052              		.loc 54 805 0
 20053              		.cfi_startproc
 20054              		@ args = 0, pretend = 0, frame = 8
 20055              		@ frame_needed = 1, uses_anonymous_args = 0
 20056 0000 90B5     		push	{r4, r7, lr}
 20057              	.LCFI70:
 20058              		.cfi_def_cfa_offset 12
 20059 0002 83B0     		sub	sp, sp, #12
 20060              	.LCFI71:
 20061              		.cfi_def_cfa_offset 24
 20062 0004 00AF     		add	r7, sp, #0
 20063              		.cfi_offset 14, -4
 20064              		.cfi_offset 7, -8
 20065              		.cfi_offset 4, -12
 20066              	.LCFI72:
 20067              		.cfi_def_cfa_register 7
 20068 0006 7860     		str	r0, [r7, #4]
 806:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return std::distance(begin(), end()); }
 20069              		.loc 54 806 0
 20070 0008 7868     		ldr	r0, [r7, #4]
 20071 000a FFF7FEFF 		bl	_ZNKSt4listIP9XFTimeoutSaIS1_EE5beginEv
 20072 000e 0446     		mov	r4, r0
 20073 0010 7868     		ldr	r0, [r7, #4]
 20074 0012 FFF7FEFF 		bl	_ZNKSt4listIP9XFTimeoutSaIS1_EE3endEv
 20075 0016 0346     		mov	r3, r0
 20076 0018 2046     		mov	r0, r4
 20077 001a 1946     		mov	r1, r3
 20078 001c FFF7FEFF 		bl	_ZSt8distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES
 20079 0020 0346     		mov	r3, r0
 20080 0022 1846     		mov	r0, r3
 20081 0024 07F10C07 		add	r7, r7, #12
 20082 0028 BD46     		mov	sp, r7
 20083 002a 90BD     		pop	{r4, r7, pc}
 20084              		.cfi_endproc
 20085              	.LFE905:
 20087              		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv,"axG",%progbits,_ZNSt4listIP9XFTimeoutSaIS1_
 20088              		.align	2
 20089              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv
 20090              		.thumb
 20091              		.thumb_func
 20093              	_ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv:
 20094              	.LFB906:
 690:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       begin()
 20095              		.loc 54 690 0
 20096              		.cfi_startproc
 20097              		@ args = 0, pretend = 0, frame = 16
 20098              		@ frame_needed = 1, uses_anonymous_args = 0
 20099 0000 80B5     		push	{r7, lr}
 20100              	.LCFI73:
 20101              		.cfi_def_cfa_offset 8
 20102 0002 84B0     		sub	sp, sp, #16
 20103              	.LCFI74:
 20104              		.cfi_def_cfa_offset 24
 20105 0004 00AF     		add	r7, sp, #0
 20106              		.cfi_offset 14, -4
 20107              		.cfi_offset 7, -8
 20108              	.LCFI75:
 20109              		.cfi_def_cfa_register 7
 20110 0006 7860     		str	r0, [r7, #4]
 691:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return iterator(this->_M_impl._M_node._M_next); }
 20111              		.loc 54 691 0
 20112 0008 7B68     		ldr	r3, [r7, #4]
 20113 000a 1B68     		ldr	r3, [r3, #0]
 20114 000c 07F10C02 		add	r2, r7, #12
 20115 0010 1046     		mov	r0, r2
 20116 0012 1946     		mov	r1, r3
 20117 0014 FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEC1EPSt15_List_node_base
 20118 0018 FB68     		ldr	r3, [r7, #12]
 20119 001a 1846     		mov	r0, r3
 20120 001c 07F11007 		add	r7, r7, #16
 20121 0020 BD46     		mov	sp, r7
 20122 0022 80BD     		pop	{r7, pc}
 20123              		.cfi_endproc
 20124              	.LFE906:
 20126              		.section	.text._ZNSt14_List_iteratorIP9XFTimeoutEppEi,"axG",%progbits,_ZNSt14_List_iteratorIP9XFTi
 20127              		.align	2
 20128              		.weak	_ZNSt14_List_iteratorIP9XFTimeoutEppEi
 20129              		.thumb
 20130              		.thumb_func
 20132              	_ZNSt14_List_iteratorIP9XFTimeoutEppEi:
 20133              	.LFB907:
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator++(int)
 20134              		.loc 54 148 0
 20135              		.cfi_startproc
 20136              		@ args = 0, pretend = 0, frame = 16
 20137              		@ frame_needed = 1, uses_anonymous_args = 0
 20138              		@ link register save eliminated.
 20139 0000 80B4     		push	{r7}
 20140              	.LCFI76:
 20141              		.cfi_def_cfa_offset 4
 20142 0002 85B0     		sub	sp, sp, #20
 20143              	.LCFI77:
 20144              		.cfi_def_cfa_offset 24
 20145 0004 00AF     		add	r7, sp, #0
 20146              		.cfi_offset 7, -4
 20147              	.LCFI78:
 20148              		.cfi_def_cfa_register 7
 20149 0006 7860     		str	r0, [r7, #4]
 20150 0008 3960     		str	r1, [r7, #0]
 20151              	.LBB26:
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_Self __tmp = *this;
 20152              		.loc 54 150 0
 20153 000a 7B68     		ldr	r3, [r7, #4]
 20154 000c 1B68     		ldr	r3, [r3, #0]
 20155 000e FB60     		str	r3, [r7, #12]
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_next;
 20156              		.loc 54 151 0
 20157 0010 7B68     		ldr	r3, [r7, #4]
 20158 0012 1B68     		ldr	r3, [r3, #0]
 20159 0014 1A68     		ldr	r2, [r3, #0]
 20160 0016 7B68     		ldr	r3, [r7, #4]
 20161 0018 1A60     		str	r2, [r3, #0]
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return __tmp;
 20162              		.loc 54 152 0
 20163 001a FB68     		ldr	r3, [r7, #12]
 20164              	.LBE26:
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 20165              		.loc 54 153 0
 20166 001c 1846     		mov	r0, r3
 20167 001e 07F11407 		add	r7, r7, #20
 20168 0022 BD46     		mov	sp, r7
 20169 0024 80BC     		pop	{r7}
 20170 0026 7047     		bx	lr
 20171              		.cfi_endproc
 20172              	.LFE907:
 20174              		.section	.text._ZNKSt14_List_iteratorIP9XFTimeoutEdeEv,"axG",%progbits,_ZNKSt14_List_iteratorIP9XF
 20175              		.align	2
 20176              		.weak	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
 20177              		.thumb
 20178              		.thumb_func
 20180              	_ZNKSt14_List_iteratorIP9XFTimeoutEdeEv:
 20181              	.LFB908:
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator*() const
 20182              		.loc 54 133 0
 20183              		.cfi_startproc
 20184              		@ args = 0, pretend = 0, frame = 8
 20185              		@ frame_needed = 1, uses_anonymous_args = 0
 20186              		@ link register save eliminated.
 20187 0000 80B4     		push	{r7}
 20188              	.LCFI79:
 20189              		.cfi_def_cfa_offset 4
 20190 0002 83B0     		sub	sp, sp, #12
 20191              	.LCFI80:
 20192              		.cfi_def_cfa_offset 16
 20193 0004 00AF     		add	r7, sp, #0
 20194              		.cfi_offset 7, -4
 20195              	.LCFI81:
 20196              		.cfi_def_cfa_register 7
 20197 0006 7860     		str	r0, [r7, #4]
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return static_cast<_Node*>(_M_node)->_M_data; }
 20198              		.loc 54 134 0
 20199 0008 7B68     		ldr	r3, [r7, #4]
 20200 000a 1B68     		ldr	r3, [r3, #0]
 20201 000c 03F10803 		add	r3, r3, #8
 20202 0010 1846     		mov	r0, r3
 20203 0012 07F10C07 		add	r7, r7, #12
 20204 0016 BD46     		mov	sp, r7
 20205 0018 80BC     		pop	{r7}
 20206 001a 7047     		bx	lr
 20207              		.cfi_endproc
 20208              	.LFE908:
 20210              		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE9pop_frontEv,"axG",%progbits,_ZNSt4listIP9XFTimeoutSa
 20211              		.align	2
 20212              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE9pop_frontEv
 20213              		.thumb
 20214              		.thumb_func
 20216              	_ZNSt4listIP9XFTimeoutSaIS1_EE9pop_frontEv:
 20217              	.LFB909:
 834:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 835:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 836:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) reference to the data at the first
 837:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element of the %list.
 838:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 839:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_reference
 840:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       front() const
 841:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return *begin(); }
 842:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 843:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 844:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read/write reference to the data at the last element
 845:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  of the %list.
 846:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 847:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       reference
 848:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       back()
 849:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { 
 850:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	iterator __tmp = end();
 851:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	--__tmp;
 852:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *__tmp;
 853:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 854:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 855:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 856:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Returns a read-only (constant) reference to the data at the last
 857:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element of the %list.
 858:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 859:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       const_reference
 860:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       back() const
 861:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { 
 862:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	const_iterator __tmp = end();
 863:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	--__tmp;
 864:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *__tmp;
 865:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 866:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 867:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // [23.2.2.3] modifiers
 868:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 869:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Add data to the front of the %list.
 870:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Data to be added.
 871:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 872:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This is a typical stack operation.  The function creates an
 873:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element at the front of the %list and assigns the given data
 874:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  to it.  Due to the nature of a %list this operation can be
 875:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  done in constant time, and does not invalidate iterators and
 876:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  references.
 877:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 878:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 879:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       push_front(const value_type& __x)
 880:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->_M_insert(begin(), __x); }
 881:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 882:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 883:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 884:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       push_front(value_type&& __x)
 885:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->_M_insert(begin(), std::move(__x)); }
 886:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 887:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename... _Args>
 888:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
 889:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         emplace_front(_Args&&... __args)
 890:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         { this->_M_insert(begin(), std::forward<_Args>(__args)...); }
 891:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 892:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 893:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 894:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Removes first element.
 895:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 896:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This is a typical stack operation.  It shrinks the %list by
 897:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  one.  Due to the nature of a %list this operation can be done
 898:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  in constant time, and only invalidates iterators/references to
 899:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the element being removed.
 900:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 901:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Note that no data is returned, and if the first element's data
 902:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  is needed, it should be retrieved before pop_front() is
 903:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  called.
 904:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 905:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 906:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       pop_front()
 20218              		.loc 54 906 0
 20219              		.cfi_startproc
 20220              		@ args = 0, pretend = 0, frame = 8
 20221              		@ frame_needed = 1, uses_anonymous_args = 0
 20222 0000 80B5     		push	{r7, lr}
 20223              	.LCFI82:
 20224              		.cfi_def_cfa_offset 8
 20225 0002 82B0     		sub	sp, sp, #8
 20226              	.LCFI83:
 20227              		.cfi_def_cfa_offset 16
 20228 0004 00AF     		add	r7, sp, #0
 20229              		.cfi_offset 14, -4
 20230              		.cfi_offset 7, -8
 20231              	.LCFI84:
 20232              		.cfi_def_cfa_register 7
 20233 0006 7860     		str	r0, [r7, #4]
 907:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->_M_erase(begin()); }
 20234              		.loc 54 907 0
 20235 0008 7868     		ldr	r0, [r7, #4]
 20236 000a FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv
 20237 000e 0346     		mov	r3, r0
 20238 0010 7868     		ldr	r0, [r7, #4]
 20239 0012 1946     		mov	r1, r3
 20240 0014 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E
 20241 0018 07F10807 		add	r7, r7, #8
 20242 001c BD46     		mov	sp, r7
 20243 001e 80BD     		pop	{r7, pc}
 20244              		.cfi_endproc
 20245              	.LFE909:
 20247              		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE10push_frontERKS1_,"axG",%progbits,_ZNSt4listIP9XFTim
 20248              		.align	2
 20249              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE10push_frontERKS1_
 20250              		.thumb
 20251              		.thumb_func
 20253              	_ZNSt4listIP9XFTimeoutSaIS1_EE10push_frontERKS1_:
 20254              	.LFB910:
 879:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       push_front(const value_type& __x)
 20255              		.loc 54 879 0
 20256              		.cfi_startproc
 20257              		@ args = 0, pretend = 0, frame = 8
 20258              		@ frame_needed = 1, uses_anonymous_args = 0
 20259 0000 80B5     		push	{r7, lr}
 20260              	.LCFI85:
 20261              		.cfi_def_cfa_offset 8
 20262 0002 82B0     		sub	sp, sp, #8
 20263              	.LCFI86:
 20264              		.cfi_def_cfa_offset 16
 20265 0004 00AF     		add	r7, sp, #0
 20266              		.cfi_offset 14, -4
 20267              		.cfi_offset 7, -8
 20268              	.LCFI87:
 20269              		.cfi_def_cfa_register 7
 20270 0006 7860     		str	r0, [r7, #4]
 20271 0008 3960     		str	r1, [r7, #0]
 880:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->_M_insert(begin(), __x); }
 20272              		.loc 54 880 0
 20273 000a 7868     		ldr	r0, [r7, #4]
 20274 000c FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv
 20275 0010 0346     		mov	r3, r0
 20276 0012 7868     		ldr	r0, [r7, #4]
 20277 0014 1946     		mov	r1, r3
 20278 0016 3A68     		ldr	r2, [r7, #0]
 20279 0018 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_
 20280 001c 07F10807 		add	r7, r7, #8
 20281 0020 BD46     		mov	sp, r7
 20282 0022 80BD     		pop	{r7, pc}
 20283              		.cfi_endproc
 20284              	.LFE910:
 20286              		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE3endEv,"axG",%progbits,_ZNSt4listIP9XFTimeoutSaIS1_EE
 20287              		.align	2
 20288              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE3endEv
 20289              		.thumb
 20290              		.thumb_func
 20292              	_ZNSt4listIP9XFTimeoutSaIS1_EE3endEv:
 20293              	.LFB911:
 708:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       end()
 20294              		.loc 54 708 0
 20295              		.cfi_startproc
 20296              		@ args = 0, pretend = 0, frame = 16
 20297              		@ frame_needed = 1, uses_anonymous_args = 0
 20298 0000 80B5     		push	{r7, lr}
 20299              	.LCFI88:
 20300              		.cfi_def_cfa_offset 8
 20301 0002 84B0     		sub	sp, sp, #16
 20302              	.LCFI89:
 20303              		.cfi_def_cfa_offset 24
 20304 0004 00AF     		add	r7, sp, #0
 20305              		.cfi_offset 14, -4
 20306              		.cfi_offset 7, -8
 20307              	.LCFI90:
 20308              		.cfi_def_cfa_register 7
 20309 0006 7860     		str	r0, [r7, #4]
 709:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return iterator(&this->_M_impl._M_node); }
 20310              		.loc 54 709 0
 20311 0008 7B68     		ldr	r3, [r7, #4]
 20312 000a 07F10C02 		add	r2, r7, #12
 20313 000e 1046     		mov	r0, r2
 20314 0010 1946     		mov	r1, r3
 20315 0012 FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEC1EPSt15_List_node_base
 20316 0016 FB68     		ldr	r3, [r7, #12]
 20317 0018 1846     		mov	r0, r3
 20318 001a 07F11007 		add	r7, r7, #16
 20319 001e BD46     		mov	sp, r7
 20320 0020 80BD     		pop	{r7, pc}
 20321              		.cfi_endproc
 20322              	.LFE911:
 20324 0022 00BF     		.section	.text._ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_,"axG",%progbits,_ZNKSt14_List_iteratorI
 20325              		.align	2
 20326              		.weak	_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_
 20327              		.thumb
 20328              		.thumb_func
 20330              	_ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_:
 20331              	.LFB912:
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator!=(const _Self& __x) const
 20332              		.loc 54 175 0
 20333              		.cfi_startproc
 20334              		@ args = 0, pretend = 0, frame = 8
 20335              		@ frame_needed = 1, uses_anonymous_args = 0
 20336              		@ link register save eliminated.
 20337 0000 80B4     		push	{r7}
 20338              	.LCFI91:
 20339              		.cfi_def_cfa_offset 4
 20340 0002 83B0     		sub	sp, sp, #12
 20341              	.LCFI92:
 20342              		.cfi_def_cfa_offset 16
 20343 0004 00AF     		add	r7, sp, #0
 20344              		.cfi_offset 7, -4
 20345              	.LCFI93:
 20346              		.cfi_def_cfa_register 7
 20347 0006 7860     		str	r0, [r7, #4]
 20348 0008 3960     		str	r1, [r7, #0]
 176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_node != __x._M_node; }
 20349              		.loc 54 176 0
 20350 000a 7B68     		ldr	r3, [r7, #4]
 20351 000c 1A68     		ldr	r2, [r3, #0]
 20352 000e 3B68     		ldr	r3, [r7, #0]
 20353 0010 1B68     		ldr	r3, [r3, #0]
 20354 0012 9A42     		cmp	r2, r3
 20355 0014 0CBF     		ite	eq
 20356 0016 0023     		moveq	r3, #0
 20357 0018 0123     		movne	r3, #1
 20358 001a DBB2     		uxtb	r3, r3
 20359 001c 1846     		mov	r0, r3
 20360 001e 07F10C07 		add	r7, r7, #12
 20361 0022 BD46     		mov	sp, r7
 20362 0024 80BC     		pop	{r7}
 20363 0026 7047     		bx	lr
 20364              		.cfi_endproc
 20365              	.LFE912:
 20367              		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE6insertESt14_List_iteratorIS1_ERKS1_,"axG",%progbits,
 20368              		.align	2
 20369              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE6insertESt14_List_iteratorIS1_ERKS1_
 20370              		.thumb
 20371              		.thumb_func
 20373              	_ZNSt4listIP9XFTimeoutSaIS1_EE6insertESt14_List_iteratorIS1_ERKS1_:
 20374              	.LFB913:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // List implementation (out of line) -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * Copyright (c) 1996,1997
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * representations about the suitability of this software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** /** @file list.tcc
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****  */
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** #ifndef _LIST_TCC
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** #define _LIST_TCC 1
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** _GLIBCXX_BEGIN_NESTED_NAMESPACE(std, _GLIBCXX_STD_D)
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****   template<typename _Tp, typename _Alloc>
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     void
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     _List_base<_Tp, _Alloc>::
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     _M_clear()
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     {
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       typedef _List_node<_Tp>  _Node;
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       while (__cur != &this->_M_impl._M_node)
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	{
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  _Node* __tmp = __cur;
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  __cur = static_cast<_Node*>(__cur->_M_next);
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  _M_get_Node_allocator().destroy(__tmp);
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** #else
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  _M_get_Tp_allocator().destroy(&__tmp->_M_data);
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** #endif
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  _M_put_node(__tmp);
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	}
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     }
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****   template<typename _Tp, typename _Alloc>
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     template<typename... _Args>
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       typename list<_Tp, _Alloc>::iterator
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       list<_Tp, _Alloc>::
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       emplace(iterator __position, _Args&&... __args)
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       {
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	_Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	__tmp->_M_hook(__position._M_node);
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	return iterator(__tmp);
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       }
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** #endif
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****   template<typename _Tp, typename _Alloc>
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     typename list<_Tp, _Alloc>::iterator
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     list<_Tp, _Alloc>::
 20375              		.loc 56 97 0
 20376              		.cfi_startproc
 20377              		@ args = 0, pretend = 0, frame = 24
 20378              		@ frame_needed = 1, uses_anonymous_args = 0
 20379 0000 80B5     		push	{r7, lr}
 20380              	.LCFI94:
 20381              		.cfi_def_cfa_offset 8
 20382 0002 86B0     		sub	sp, sp, #24
 20383              	.LCFI95:
 20384              		.cfi_def_cfa_offset 32
 20385 0004 00AF     		add	r7, sp, #0
 20386              		.cfi_offset 14, -4
 20387              		.cfi_offset 7, -8
 20388              	.LCFI96:
 20389              		.cfi_def_cfa_register 7
 20390 0006 F860     		str	r0, [r7, #12]
 20391 0008 B960     		str	r1, [r7, #8]
 20392 000a 7A60     		str	r2, [r7, #4]
 20393              	.LBB27:
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     insert(iterator __position, const value_type& __x)
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     {
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       _Node* __tmp = _M_create_node(__x);
 20394              		.loc 56 100 0
 20395 000c F868     		ldr	r0, [r7, #12]
 20396 000e 7968     		ldr	r1, [r7, #4]
 20397 0010 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE14_M_create_nodeERKS1_
 20398 0014 7861     		str	r0, [r7, #20]
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       __tmp->_M_hook(__position._M_node);
 20399              		.loc 56 101 0
 20400 0016 7A69     		ldr	r2, [r7, #20]
 20401 0018 BB68     		ldr	r3, [r7, #8]
 20402 001a 1046     		mov	r0, r2
 20403 001c 1946     		mov	r1, r3
 20404 001e FFF7FEFF 		bl	_ZNSt15_List_node_base7_M_hookEPS_
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       return iterator(__tmp);
 20405              		.loc 56 102 0
 20406 0022 7B69     		ldr	r3, [r7, #20]
 20407 0024 07F11002 		add	r2, r7, #16
 20408 0028 1046     		mov	r0, r2
 20409 002a 1946     		mov	r1, r3
 20410 002c FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEC1EPSt15_List_node_base
 20411 0030 3B69     		ldr	r3, [r7, #16]
 20412              	.LBE27:
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     }
 20413              		.loc 56 103 0
 20414 0032 1846     		mov	r0, r3
 20415 0034 07F11807 		add	r7, r7, #24
 20416 0038 BD46     		mov	sp, r7
 20417 003a 80BD     		pop	{r7, pc}
 20418              		.cfi_endproc
 20419              	.LFE913:
 20421              		.section	.text._ZNSt14_List_iteratorIP9XFTimeoutEppEv,"axG",%progbits,_ZNSt14_List_iteratorIP9XFTi
 20422              		.align	2
 20423              		.weak	_ZNSt14_List_iteratorIP9XFTimeoutEppEv
 20424              		.thumb
 20425              		.thumb_func
 20427              	_ZNSt14_List_iteratorIP9XFTimeoutEppEv:
 20428              	.LFB914:
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator++()
 20429              		.loc 54 141 0
 20430              		.cfi_startproc
 20431              		@ args = 0, pretend = 0, frame = 8
 20432              		@ frame_needed = 1, uses_anonymous_args = 0
 20433              		@ link register save eliminated.
 20434 0000 80B4     		push	{r7}
 20435              	.LCFI97:
 20436              		.cfi_def_cfa_offset 4
 20437 0002 83B0     		sub	sp, sp, #12
 20438              	.LCFI98:
 20439              		.cfi_def_cfa_offset 16
 20440 0004 00AF     		add	r7, sp, #0
 20441              		.cfi_offset 7, -4
 20442              	.LCFI99:
 20443              		.cfi_def_cfa_register 7
 20444 0006 7860     		str	r0, [r7, #4]
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_next;
 20445              		.loc 54 143 0
 20446 0008 7B68     		ldr	r3, [r7, #4]
 20447 000a 1B68     		ldr	r3, [r3, #0]
 20448 000c 1A68     		ldr	r2, [r3, #0]
 20449 000e 7B68     		ldr	r3, [r7, #4]
 20450 0010 1A60     		str	r2, [r3, #0]
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *this;
 20451              		.loc 54 144 0
 20452 0012 7B68     		ldr	r3, [r7, #4]
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 20453              		.loc 54 145 0
 20454 0014 1846     		mov	r0, r3
 20455 0016 07F10C07 		add	r7, r7, #12
 20456 001a BD46     		mov	sp, r7
 20457 001c 80BC     		pop	{r7}
 20458 001e 7047     		bx	lr
 20459              		.cfi_endproc
 20460              	.LFE914:
 20462              		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE5eraseESt14_List_iteratorIS1_E,"axG",%progbits,_ZNSt4
 20463              		.align	2
 20464              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE5eraseESt14_List_iteratorIS1_E
 20465              		.thumb
 20466              		.thumb_func
 20468              	_ZNSt4listIP9XFTimeoutSaIS1_EE5eraseESt14_List_iteratorIS1_E:
 20469              	.LFB915:
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****   template<typename _Tp, typename _Alloc>
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     typename list<_Tp, _Alloc>::iterator
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     list<_Tp, _Alloc>::
 20470              		.loc 56 107 0
 20471              		.cfi_startproc
 20472              		@ args = 0, pretend = 0, frame = 16
 20473              		@ frame_needed = 1, uses_anonymous_args = 0
 20474 0000 80B5     		push	{r7, lr}
 20475              	.LCFI100:
 20476              		.cfi_def_cfa_offset 8
 20477 0002 84B0     		sub	sp, sp, #16
 20478              	.LCFI101:
 20479              		.cfi_def_cfa_offset 24
 20480 0004 00AF     		add	r7, sp, #0
 20481              		.cfi_offset 14, -4
 20482              		.cfi_offset 7, -8
 20483              	.LCFI102:
 20484              		.cfi_def_cfa_register 7
 20485 0006 7860     		str	r0, [r7, #4]
 20486 0008 3960     		str	r1, [r7, #0]
 20487              	.LBB28:
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     erase(iterator __position)
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     {
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       iterator __ret = iterator(__position._M_node->_M_next);
 20488              		.loc 56 110 0
 20489 000a 3B68     		ldr	r3, [r7, #0]
 20490 000c 1B68     		ldr	r3, [r3, #0]
 20491 000e 07F10C02 		add	r2, r7, #12
 20492 0012 1046     		mov	r0, r2
 20493 0014 1946     		mov	r1, r3
 20494 0016 FFF7FEFF 		bl	_ZNSt14_List_iteratorIP9XFTimeoutEC1EPSt15_List_node_base
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       _M_erase(__position);
 20495              		.loc 56 111 0
 20496 001a 7868     		ldr	r0, [r7, #4]
 20497 001c 3968     		ldr	r1, [r7, #0]
 20498 001e FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       return __ret;
 20499              		.loc 56 112 0
 20500 0022 FB68     		ldr	r3, [r7, #12]
 20501              	.LBE28:
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     }
 20502              		.loc 56 113 0
 20503 0024 1846     		mov	r0, r3
 20504 0026 07F11007 		add	r7, r7, #16
 20505 002a BD46     		mov	sp, r7
 20506 002c 80BD     		pop	{r7, pc}
 20507              		.cfi_endproc
 20508              	.LFE915:
 20510 002e 00BF     		.section	.text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev,"axG",%progbits,_ZNSt10_List_baseIP9XFTim
 20511              		.align	2
 20512              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev
 20513              		.thumb
 20514              		.thumb_func
 20516              	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev:
 20517              	.LFB939:
 341:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_base()
 20518              		.loc 54 341 0
 20519              		.cfi_startproc
 20520              		@ args = 0, pretend = 0, frame = 8
 20521              		@ frame_needed = 1, uses_anonymous_args = 0
 20522 0000 80B5     		push	{r7, lr}
 20523              	.LCFI103:
 20524              		.cfi_def_cfa_offset 8
 20525 0002 82B0     		sub	sp, sp, #8
 20526              	.LCFI104:
 20527              		.cfi_def_cfa_offset 16
 20528 0004 00AF     		add	r7, sp, #0
 20529              		.cfi_offset 14, -4
 20530              		.cfi_offset 7, -8
 20531              	.LCFI105:
 20532              		.cfi_def_cfa_register 7
 20533 0006 7860     		str	r0, [r7, #4]
 20534              	.LBB29:
 342:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_impl()
 20535              		.loc 54 342 0
 20536 0008 7B68     		ldr	r3, [r7, #4]
 20537 000a 1846     		mov	r0, r3
 20538 000c FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC1Ev
 343:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_init(); }
 20539              		.loc 54 343 0
 20540 0010 7868     		ldr	r0, [r7, #4]
 20541 0012 FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE7_M_initEv
 20542              	.LBE29:
 20543 0016 7B68     		ldr	r3, [r7, #4]
 20544 0018 1846     		mov	r0, r3
 20545 001a 07F10807 		add	r7, r7, #8
 20546 001e BD46     		mov	sp, r7
 20547 0020 80BD     		pop	{r7, pc}
 20548              		.cfi_endproc
 20549              	.LFE939:
 20551              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC1Ev
 20552              		.thumb_set _ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC1Ev,_ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev
 20553 0022 00BF     		.section	.text._ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev,"axG",%progbits,_ZNSaISt10_List_nodeIP9XFTim
 20554              		.align	2
 20555              		.weak	_ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev
 20556              		.thumb
 20557              		.thumb_func
 20559              	_ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev:
 20560              	.LFB942:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * Copyright (c) 1996-1997
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  *
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * representations about the suitability of this software for any
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  */
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** /** @file allocator.h
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  *  You should not attempt to use it directly.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****  */
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** #ifndef _ALLOCATOR_H
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** #define _ALLOCATOR_H 1
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** // Define the base class to std::allocator.
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** #include <bits/c++allocator.h>
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE(std)
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   /**
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * @defgroup allocators Allocators
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * @ingroup memory
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    *
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * Classes encapsulating memory operations.
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    */
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   template<typename _Tp>
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     class allocator;
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   /// allocator<void> specialization.
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   template<>
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     class allocator<void>
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     {
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     public:
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef size_t      size_type;
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef void*       pointer;
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef const void* const_pointer;
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef void        value_type;
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       template<typename _Tp1>
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         struct rebind
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     };
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   /**
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    * @ingroup allocators
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    *
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    *  Further details:
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    */
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****   template<typename _Tp>
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     class allocator: public __glibcxx_base_allocator<_Tp>
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****     {
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****    public:
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef size_t     size_type;
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef _Tp*       pointer;
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef const _Tp* const_pointer;
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef _Tp&       reference;
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef const _Tp& const_reference;
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       typedef _Tp        value_type;
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       template<typename _Tp1>
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         struct rebind
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       allocator() throw() { }
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       allocator(const allocator& __a) throw()
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       : __glibcxx_base_allocator<_Tp>(__a) { }
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       template<typename _Tp1>
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h **** 
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       ~allocator() throw() { }
 20561              		.loc 49 109 0
 20562              		.cfi_startproc
 20563              		@ args = 0, pretend = 0, frame = 8
 20564              		@ frame_needed = 1, uses_anonymous_args = 0
 20565 0000 80B5     		push	{r7, lr}
 20566              	.LCFI106:
 20567              		.cfi_def_cfa_offset 8
 20568 0002 82B0     		sub	sp, sp, #8
 20569              	.LCFI107:
 20570              		.cfi_def_cfa_offset 16
 20571 0004 00AF     		add	r7, sp, #0
 20572              		.cfi_offset 14, -4
 20573              		.cfi_offset 7, -8
 20574              	.LCFI108:
 20575              		.cfi_def_cfa_register 7
 20576 0006 7860     		str	r0, [r7, #4]
 20577              	.LBB30:
 20578              		.loc 49 109 0
 20579 0008 7B68     		ldr	r3, [r7, #4]
 20580 000a 1846     		mov	r0, r3
 20581 000c FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED2Ev
 20582              	.LBE30:
 20583 0010 7B68     		ldr	r3, [r7, #4]
 20584 0012 1846     		mov	r0, r3
 20585 0014 07F10807 		add	r7, r7, #8
 20586 0018 BD46     		mov	sp, r7
 20587 001a 80BD     		pop	{r7, pc}
 20588              		.cfi_endproc
 20589              	.LFE942:
 20591              		.weak	_ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev
 20592              		.thumb_set _ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev,_ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev
 20593              		.section	.text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE8_M_clearEv,"axG",%progbits,_ZNSt10_List_baseI
 20594              		.align	2
 20595              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE8_M_clearEv
 20596              		.thumb
 20597              		.thumb_func
 20599              	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE8_M_clearEv:
 20600              	.LFB944:
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     _List_base<_Tp, _Alloc>::
 20601              		.loc 56 64 0
 20602              		.cfi_startproc
 20603              		@ args = 0, pretend = 0, frame = 24
 20604              		@ frame_needed = 1, uses_anonymous_args = 0
 20605 0000 80B5     		push	{r7, lr}
 20606              	.LCFI109:
 20607              		.cfi_def_cfa_offset 8
 20608 0002 86B0     		sub	sp, sp, #24
 20609              	.LCFI110:
 20610              		.cfi_def_cfa_offset 32
 20611 0004 00AF     		add	r7, sp, #0
 20612              		.cfi_offset 14, -4
 20613              		.cfi_offset 7, -8
 20614              	.LCFI111:
 20615              		.cfi_def_cfa_register 7
 20616 0006 7860     		str	r0, [r7, #4]
 20617              	.LBB31:
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       _Node* __cur = static_cast<_Node*>(this->_M_impl._M_node._M_next);
 20618              		.loc 56 68 0
 20619 0008 7B68     		ldr	r3, [r7, #4]
 20620 000a 1B68     		ldr	r3, [r3, #0]
 20621 000c 7B61     		str	r3, [r7, #20]
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       while (__cur != &this->_M_impl._M_node)
 20622              		.loc 56 69 0
 20623 000e 1CE0     		b	.L74
 20624              	.L75:
 20625              	.LBB32:
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  _Node* __tmp = __cur;
 20626              		.loc 56 71 0
 20627 0010 7B69     		ldr	r3, [r7, #20]
 20628 0012 3B61     		str	r3, [r7, #16]
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  __cur = static_cast<_Node*>(__cur->_M_next);
 20629              		.loc 56 72 0
 20630 0014 7B69     		ldr	r3, [r7, #20]
 20631 0016 1B68     		ldr	r3, [r3, #0]
 20632 0018 7B61     		str	r3, [r7, #20]
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  _M_get_Tp_allocator().destroy(&__tmp->_M_data);
 20633              		.loc 56 76 0
 20634 001a 07F10C03 		add	r3, r7, #12
 20635 001e 1846     		mov	r0, r3
 20636 0020 7968     		ldr	r1, [r7, #4]
 20637 0022 FFF7FEFF 		bl	_ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv
 20638 0026 07F10C02 		add	r2, r7, #12
 20639 002a 3B69     		ldr	r3, [r7, #16]
 20640 002c 03F10803 		add	r3, r3, #8
 20641 0030 1046     		mov	r0, r2
 20642 0032 1946     		mov	r1, r3
 20643 0034 FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE7destroyEPS2_
 20644 0038 07F10C03 		add	r3, r7, #12
 20645 003c 1846     		mov	r0, r3
 20646 003e FFF7FEFF 		bl	_ZNSaIP9XFTimeoutED1Ev
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc **** 	  _M_put_node(__tmp);
 20647              		.loc 56 78 0
 20648 0042 7868     		ldr	r0, [r7, #4]
 20649 0044 3969     		ldr	r1, [r7, #16]
 20650 0046 FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E
 20651              	.L74:
 20652              	.LBE32:
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****       while (__cur != &this->_M_impl._M_node)
 20653              		.loc 56 69 0 discriminator 1
 20654 004a 7A68     		ldr	r2, [r7, #4]
 20655 004c 7B69     		ldr	r3, [r7, #20]
 20656 004e 9A42     		cmp	r2, r3
 20657 0050 0CBF     		ite	eq
 20658 0052 0023     		moveq	r3, #0
 20659 0054 0123     		movne	r3, #1
 20660 0056 DBB2     		uxtb	r3, r3
 20661 0058 002B     		cmp	r3, #0
 20662 005a D9D1     		bne	.L75
 20663              	.LBE31:
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/list.tcc ****     }
 20664              		.loc 56 80 0
 20665 005c 07F11807 		add	r7, r7, #24
 20666 0060 BD46     		mov	sp, r7
 20667 0062 80BD     		pop	{r7, pc}
 20668              		.cfi_endproc
 20669              	.LFE944:
 20671              		.section	.text._ZNKSt4listIP9XFTimeoutSaIS1_EE5beginEv,"axG",%progbits,_ZNKSt4listIP9XFTimeoutSaIS
 20672              		.align	2
 20673              		.weak	_ZNKSt4listIP9XFTimeoutSaIS1_EE5beginEv
 20674              		.thumb
 20675              		.thumb_func
 20677              	_ZNKSt4listIP9XFTimeoutSaIS1_EE5beginEv:
 20678              	.LFB945:
 699:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       begin() const
 20679              		.loc 54 699 0
 20680              		.cfi_startproc
 20681              		@ args = 0, pretend = 0, frame = 16
 20682              		@ frame_needed = 1, uses_anonymous_args = 0
 20683 0000 80B5     		push	{r7, lr}
 20684              	.LCFI112:
 20685              		.cfi_def_cfa_offset 8
 20686 0002 84B0     		sub	sp, sp, #16
 20687              	.LCFI113:
 20688              		.cfi_def_cfa_offset 24
 20689 0004 00AF     		add	r7, sp, #0
 20690              		.cfi_offset 14, -4
 20691              		.cfi_offset 7, -8
 20692              	.LCFI114:
 20693              		.cfi_def_cfa_register 7
 20694 0006 7860     		str	r0, [r7, #4]
 700:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_iterator(this->_M_impl._M_node._M_next); }
 20695              		.loc 54 700 0
 20696 0008 7B68     		ldr	r3, [r7, #4]
 20697 000a 1B68     		ldr	r3, [r3, #0]
 20698 000c 07F10C02 		add	r2, r7, #12
 20699 0010 1046     		mov	r0, r2
 20700 0012 1946     		mov	r1, r3
 20701 0014 FFF7FEFF 		bl	_ZNSt20_List_const_iteratorIP9XFTimeoutEC1EPKSt15_List_node_base
 20702 0018 FB68     		ldr	r3, [r7, #12]
 20703 001a 1846     		mov	r0, r3
 20704 001c 07F11007 		add	r7, r7, #16
 20705 0020 BD46     		mov	sp, r7
 20706 0022 80BD     		pop	{r7, pc}
 20707              		.cfi_endproc
 20708              	.LFE945:
 20710              		.section	.text._ZNKSt4listIP9XFTimeoutSaIS1_EE3endEv,"axG",%progbits,_ZNKSt4listIP9XFTimeoutSaIS1_
 20711              		.align	2
 20712              		.weak	_ZNKSt4listIP9XFTimeoutSaIS1_EE3endEv
 20713              		.thumb
 20714              		.thumb_func
 20716              	_ZNKSt4listIP9XFTimeoutSaIS1_EE3endEv:
 20717              	.LFB946:
 717:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       end() const
 20718              		.loc 54 717 0
 20719              		.cfi_startproc
 20720              		@ args = 0, pretend = 0, frame = 16
 20721              		@ frame_needed = 1, uses_anonymous_args = 0
 20722 0000 80B5     		push	{r7, lr}
 20723              	.LCFI115:
 20724              		.cfi_def_cfa_offset 8
 20725 0002 84B0     		sub	sp, sp, #16
 20726              	.LCFI116:
 20727              		.cfi_def_cfa_offset 24
 20728 0004 00AF     		add	r7, sp, #0
 20729              		.cfi_offset 14, -4
 20730              		.cfi_offset 7, -8
 20731              	.LCFI117:
 20732              		.cfi_def_cfa_register 7
 20733 0006 7860     		str	r0, [r7, #4]
 718:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return const_iterator(&this->_M_impl._M_node); }
 20734              		.loc 54 718 0
 20735 0008 7B68     		ldr	r3, [r7, #4]
 20736 000a 07F10C02 		add	r2, r7, #12
 20737 000e 1046     		mov	r0, r2
 20738 0010 1946     		mov	r1, r3
 20739 0012 FFF7FEFF 		bl	_ZNSt20_List_const_iteratorIP9XFTimeoutEC1EPKSt15_List_node_base
 20740 0016 FB68     		ldr	r3, [r7, #12]
 20741 0018 1846     		mov	r0, r3
 20742 001a 07F11007 		add	r7, r7, #16
 20743 001e BD46     		mov	sp, r7
 20744 0020 80BD     		pop	{r7, pc}
 20745              		.cfi_endproc
 20746              	.LFE946:
 20748 0022 00BF     		.section	.text._ZSt8distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15diffe
 20749              		.align	2
 20750              		.weak	_ZSt8distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typ
 20751              		.thumb
 20752              		.thumb_func
 20754              	_ZSt8distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES5_S5
 20755              	.LFB947:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // Functions used by iterators -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * Copyright (c) 1996-1998
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * representations about the suitability of this software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** /** @file stl_iterator_base_funcs.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *  This file contains all of the general iterator-related utility
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  *  functions, such as distance() and advance().
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****  */
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** #ifndef _STL_ITERATOR_BASE_FUNCS_H
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** #define _STL_ITERATOR_BASE_FUNCS_H 1
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** #pragma GCC system_header
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** #include <bits/concept_check.h>
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** _GLIBCXX_BEGIN_NAMESPACE(std)
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     inline typename iterator_traits<_InputIterator>::difference_type
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****                input_iterator_tag)
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     {
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       // concept requirements
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_InputIteratorConcept<_InputIterator>)
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 	{
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 	  ++__first;
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 	  ++__n;
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 	}
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       return __n;
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     }
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****   template<typename _RandomAccessIterator>
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     inline typename iterator_traits<_RandomAccessIterator>::difference_type
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****                random_access_iterator_tag)
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     {
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       // concept requirements
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       __glibcxx_function_requires(_RandomAccessIteratorConcept<
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 				  _RandomAccessIterator>)
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       return __last - __first;
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     }
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****   /**
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *  @brief A generalization of pointer arithmetic.
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *  @param  first  An input iterator.
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *  @param  last  An input iterator.
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *  @return  The distance between them.
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *  Returns @c n such that first + n == last.  This requires that @p last
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *  must be reachable from @p first.  Note that @c n may be negative.
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *  For random access iterators, this uses their @c + and @c - operations
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****    *  and are constant time.  For other %iterator classes they are linear time.
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****   */
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****   template<typename _InputIterator>
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     inline typename iterator_traits<_InputIterator>::difference_type
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     distance(_InputIterator __first, _InputIterator __last)
 20756              		.loc 46 111 0
 20757              		.cfi_startproc
 20758              		@ args = 0, pretend = 0, frame = 16
 20759              		@ frame_needed = 1, uses_anonymous_args = 0
 20760 0000 80B5     		push	{r7, lr}
 20761              	.LCFI118:
 20762              		.cfi_def_cfa_offset 8
 20763 0002 84B0     		sub	sp, sp, #16
 20764              	.LCFI119:
 20765              		.cfi_def_cfa_offset 24
 20766 0004 00AF     		add	r7, sp, #0
 20767              		.cfi_offset 14, -4
 20768              		.cfi_offset 7, -8
 20769              	.LCFI120:
 20770              		.cfi_def_cfa_register 7
 20771 0006 7860     		str	r0, [r7, #4]
 20772 0008 3960     		str	r1, [r7, #0]
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     {
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       // concept requirements -- taken care of in __distance
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       return std::__distance(__first, __last,
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 			     std::__iterator_category(__first));
 20773              		.loc 46 115 0
 20774 000a 07F10403 		add	r3, r7, #4
 20775 000e 1846     		mov	r0, r3
 20776 0010 FFF7FEFF 		bl	_ZSt19__iterator_categoryISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E17itera
 20777 0014 7868     		ldr	r0, [r7, #4]
 20778 0016 3968     		ldr	r1, [r7, #0]
 20779 0018 1A46     		mov	r2, r3
 20780 001a FFF7FEFF 		bl	_ZSt10__distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typ
 20781 001e 0346     		mov	r3, r0
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     }
 20782              		.loc 46 116 0
 20783 0020 1846     		mov	r0, r3
 20784 0022 07F11007 		add	r7, r7, #16
 20785 0026 BD46     		mov	sp, r7
 20786 0028 80BD     		pop	{r7, pc}
 20787              		.cfi_endproc
 20788              	.LFE947:
 20790 002a 00BF     		.section	.text._ZNSt14_List_iteratorIP9XFTimeoutEC2EPSt15_List_node_base,"axG",%progbits,_ZNSt14_L
 20791              		.align	2
 20792              		.weak	_ZNSt14_List_iteratorIP9XFTimeoutEC2EPSt15_List_node_base
 20793              		.thumb
 20794              		.thumb_func
 20796              	_ZNSt14_List_iteratorIP9XFTimeoutEC2EPSt15_List_node_base:
 20797              	.LFB949:
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_iterator(_List_node_base* __x)
 20798              		.loc 54 128 0
 20799              		.cfi_startproc
 20800              		@ args = 0, pretend = 0, frame = 8
 20801              		@ frame_needed = 1, uses_anonymous_args = 0
 20802              		@ link register save eliminated.
 20803 0000 80B4     		push	{r7}
 20804              	.LCFI121:
 20805              		.cfi_def_cfa_offset 4
 20806 0002 83B0     		sub	sp, sp, #12
 20807              	.LCFI122:
 20808              		.cfi_def_cfa_offset 16
 20809 0004 00AF     		add	r7, sp, #0
 20810              		.cfi_offset 7, -4
 20811              	.LCFI123:
 20812              		.cfi_def_cfa_register 7
 20813 0006 7860     		str	r0, [r7, #4]
 20814 0008 3960     		str	r1, [r7, #0]
 20815              	.LBB33:
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_node(__x) { }
 20816              		.loc 54 129 0
 20817 000a 7B68     		ldr	r3, [r7, #4]
 20818 000c 3A68     		ldr	r2, [r7, #0]
 20819 000e 1A60     		str	r2, [r3, #0]
 20820              	.LBE33:
 20821 0010 7B68     		ldr	r3, [r7, #4]
 20822 0012 1846     		mov	r0, r3
 20823 0014 07F10C07 		add	r7, r7, #12
 20824 0018 BD46     		mov	sp, r7
 20825 001a 80BC     		pop	{r7}
 20826 001c 7047     		bx	lr
 20827              		.cfi_endproc
 20828              	.LFE949:
 20830              		.weak	_ZNSt14_List_iteratorIP9XFTimeoutEC1EPSt15_List_node_base
 20831              		.thumb_set _ZNSt14_List_iteratorIP9XFTimeoutEC1EPSt15_List_node_base,_ZNSt14_List_iteratorIP9XFTim
 20832 001e 00BF     		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E,"axG",%progbits,_ZN
 20833              		.align	2
 20834              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E
 20835              		.thumb
 20836              		.thumb_func
 20838              	_ZNSt4listIP9XFTimeoutSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E:
 20839              	.LFB951:
 908:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 909:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 910:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Add data to the end of the %list.
 911:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Data to be added.
 912:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 913:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This is a typical stack operation.  The function creates an
 914:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  element at the end of the %list and assigns the given data to
 915:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  it.  Due to the nature of a %list this operation can be done
 916:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  in constant time, and does not invalidate iterators and
 917:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  references.
 918:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 919:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 920:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       push_back(const value_type& __x)
 921:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->_M_insert(end(), __x); }
 922:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 923:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 924:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 925:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       push_back(value_type&& __x)
 926:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->_M_insert(end(), std::move(__x)); }
 927:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 928:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename... _Args>
 929:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
 930:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         emplace_back(_Args&&... __args)
 931:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         { this->_M_insert(end(), std::forward<_Args>(__args)...); }
 932:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 933:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 934:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 935:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Removes last element.
 936:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 937:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This is a typical stack operation.  It shrinks the %list by
 938:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  one.  Due to the nature of a %list this operation can be done
 939:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  in constant time, and only invalidates iterators/references to
 940:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the element being removed.
 941:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 942:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Note that no data is returned, and if the last element's data
 943:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  is needed, it should be retrieved before pop_back() is called.
 944:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 945:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
 946:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       pop_back()
 947:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->_M_erase(iterator(this->_M_impl._M_node._M_prev)); }
 948:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 949:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 950:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 951:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Constructs object in %list before specified iterator.
 952:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  A const_iterator into the %list.
 953:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  args  Arguments.
 954:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @return  An iterator that points to the inserted data.
 955:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 956:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will insert an object of type T constructed
 957:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  with T(std::forward<Args>(args)...) before the specified
 958:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  location.  Due to the nature of a %list this operation can
 959:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  be done in constant time, and does not invalidate iterators
 960:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  and references.
 961:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 962:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename... _Args>
 963:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         iterator
 964:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         emplace(iterator __position, _Args&&... __args);
 965:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
 966:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 967:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 968:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Inserts given value into %list before specified iterator.
 969:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  An iterator into the %list.
 970:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Data to be inserted.
 971:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @return  An iterator that points to the inserted data.
 972:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 973:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will insert a copy of the given value before
 974:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the specified location.  Due to the nature of a %list this
 975:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  operation can be done in constant time, and does not
 976:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  invalidate iterators and references.
 977:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
 978:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       iterator
 979:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       insert(iterator __position, const value_type& __x);
 980:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 981:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 982:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 983:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Inserts given rvalue into %list before specified iterator.
 984:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  An iterator into the %list.
 985:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Data to be inserted.
 986:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @return  An iterator that points to the inserted data.
 987:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
 988:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will insert a copy of the given rvalue before
 989:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the specified location.  Due to the nature of a %list this
 990:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  operation can be done in constant time, and does not
 991:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  invalidate iterators and references.
 992:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         */
 993:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       iterator
 994:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       insert(iterator __position, value_type&& __x)
 995:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return emplace(__position, std::move(__x)); }
 996:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
 997:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
 998:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Inserts the contents of an initializer_list into %list
 999:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *          before specified iterator.
1000:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  p  An iterator into the %list.
1001:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  l  An initializer_list of value_type.
1002:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1003:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will insert copies of the data in the
1004:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  initializer_list @a l into the %list before the location
1005:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  specified by @a p.
1006:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1007:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This operation is linear in the number of elements inserted and
1008:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  does not invalidate iterators and references.
1009:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1010:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1011:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       insert(iterator __p, initializer_list<value_type> __l)
1012:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->insert(__p, __l.begin(), __l.end()); }
1013:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1014:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1015:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1016:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Inserts a number of copies of given data into the %list.
1017:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  An iterator into the %list.
1018:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  n  Number of elements to be inserted.
1019:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Data to be inserted.
1020:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1021:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will insert a specified number of copies of the
1022:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  given data before the location specified by @a position.
1023:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1024:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This operation is linear in the number of elements inserted and
1025:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  does not invalidate iterators and references.
1026:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1027:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1028:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1029:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {  
1030:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	list __tmp(__n, __x, _M_get_Node_allocator());
1031:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	splice(__position, __tmp);
1032:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1033:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1034:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1035:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Inserts a range into the %list.
1036:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  An iterator into the %list.
1037:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  first  An input iterator.
1038:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  last   An input iterator.
1039:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1040:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will insert copies of the data in the range [@a
1041:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  first,@a last) into the %list before the location specified by
1042:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @a position.
1043:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1044:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This operation is linear in the number of elements inserted and
1045:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  does not invalidate iterators and references.
1046:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1047:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _InputIterator>
1048:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1049:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         insert(iterator __position, _InputIterator __first,
1050:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	       _InputIterator __last)
1051:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         {
1052:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  list __tmp(__first, __last, _M_get_Node_allocator());
1053:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  splice(__position, __tmp);
1054:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	}
1055:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1056:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1057:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Remove element at given position.
1058:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  Iterator pointing to element to be erased.
1059:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @return  An iterator pointing to the next element (or end()).
1060:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1061:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will erase the element at the given position and thus
1062:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  shorten the %list by one.
1063:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1064:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Due to the nature of a %list this operation can be done in
1065:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  constant time, and only invalidates iterators/references to
1066:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the element being removed.  The user is also cautioned that
1067:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  this function only erases the element, and that if the element
1068:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  is itself a pointer, the pointed-to memory is not touched in
1069:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  any way.  Managing the pointer is the user's responsibility.
1070:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1071:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       iterator
1072:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       erase(iterator __position);
1073:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1074:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1075:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Remove a range of elements.
1076:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  first  Iterator pointing to the first element to be erased.
1077:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  last  Iterator pointing to one past the last element to be
1078:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *                erased.
1079:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @return  An iterator pointing to the element pointed to by @a last
1080:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *           prior to erasing (or end()).
1081:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1082:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This function will erase the elements in the range @a
1083:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  [first,last) and shorten the %list accordingly.
1084:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1085:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This operation is linear time in the size of the range and only
1086:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  invalidates iterators/references to the element being removed.
1087:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  The user is also cautioned that this function only erases the
1088:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  elements, and that if the elements themselves are pointers, the
1089:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer
1090:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  is the user's responsibility.
1091:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1092:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       iterator
1093:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       erase(iterator __first, iterator __last)
1094:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1095:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	while (__first != __last)
1096:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  __first = erase(__first);
1097:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return __last;
1098:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1099:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Swaps data with another %list.
1102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  A %list of the same element and allocator types.
1103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  This exchanges the elements between two lists in constant
1105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  time.  Note that the global std::swap() function is
1106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  specialized such that std::swap(l1,l2) will feed to this
1107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  function.
1108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       swap(list& __x)
1111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_List_node_base::swap(this->_M_impl._M_node, __x._M_impl._M_node);
1113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
1115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	// 431. Swapping containers with unequal allocators.
1116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	std::__alloc_swap<typename _Base::_Node_alloc_type>::
1117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  _S_do_it(_M_get_Node_allocator(), __x._M_get_Node_allocator());
1118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Erases all the elements.  Note that this function only erases
1122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the elements, and that if the elements themselves are
1123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  pointers, the pointed-to memory is not touched in any way.
1124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Managing the pointer is the user's responsibility.
1125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       clear()
1128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _Base::_M_clear();
1130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _Base::_M_init();
1131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // [23.2.2.4] list operations
1134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Insert contents of another %list.
1136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  Iterator referencing the element to insert before.
1137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Source list.
1138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  The elements of @a x are inserted in constant time in front of
1140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the element referenced by @a position.  @a x becomes an empty
1141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  list.
1142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Requires this != @a x.
1144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list&& __x)
1148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #else
1149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list& __x)
1150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	if (!__x.empty())
1153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  {
1154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    _M_check_equal_allocators(__x);
1155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    this->_M_transfer(__position, __x.begin(), __x.end());
1157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  }
1158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list& __x)
1163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { splice(__position, std::move(__x)); }
1164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Insert element from another %list.
1168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  Iterator referencing the element to insert before.
1169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Source list.
1170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  i  Iterator referencing the element to move.
1171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Removes the element in list @a x referenced by @a i and
1173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  inserts it into the current list before @a position.
1174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1176:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1177:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list&& __x, iterator __i)
1178:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #else
1179:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list& __x, iterator __i)
1180:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1181:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1182:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	iterator __j = __i;
1183:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	++__j;
1184:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	if (__position == __i || __position == __j)
1185:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  return;
1186:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1187:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	if (this != &__x)
1188:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  _M_check_equal_allocators(__x);
1189:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1190:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	this->_M_transfer(__position, __i, __j);
1191:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1192:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1193:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1194:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1195:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list& __x, iterator __i)
1196:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { splice(__position, std::move(__x), __i); }
1197:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1198:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1199:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1200:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Insert range from another %list.
1201:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  position  Iterator referencing the element to insert before.
1202:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Source list.
1203:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  first  Iterator referencing the start of range in x.
1204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  last  Iterator referencing the end of range in x.
1205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1206:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Removes elements in the range [first,last) and inserts them
1207:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  before @a position in constant time.
1208:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1209:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Undefined if @a position is in [first,last).
1210:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1211:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1212:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1213:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list&& __x, iterator __first,
1214:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	     iterator __last)
1215:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #else
1216:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list& __x, iterator __first,
1217:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	     iterator __last)
1218:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1219:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1220:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	if (__first != __last)
1221:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  {
1222:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    if (this != &__x)
1223:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	      _M_check_equal_allocators(__x);
1224:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1225:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    this->_M_transfer(__position, __first, __last);
1226:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  }
1227:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1228:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1229:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1230:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1231:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       splice(iterator __position, list& __x, iterator __first, iterator __last)
1232:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { splice(__position, std::move(__x), __first, __last); }
1233:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1234:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1235:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1236:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Remove all elements equal to value.
1237:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  value  The value to remove.
1238:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1239:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Removes every element in the list equal to @a value.
1240:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Remaining elements stay in list order.  Note that this
1241:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  function only erases the elements, and that if the elements
1242:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  themselves are pointers, the pointed-to memory is not
1243:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  touched in any way.  Managing the pointer is the user's
1244:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  responsibility.
1245:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1246:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1247:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       remove(const _Tp& __value);
1248:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1249:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1250:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Remove all elements satisfying a predicate.
1251:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  Predicate  Unary predicate function or object.
1252:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1253:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Removes every element in the list for which the predicate
1254:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  returns true.  Remaining elements stay in list order.  Note
1255:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  that this function only erases the elements, and that if the
1256:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  elements themselves are pointers, the pointed-to memory is
1257:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  not touched in any way.  Managing the pointer is the user's
1258:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  responsibility.
1259:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1260:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _Predicate>
1261:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1262:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         remove_if(_Predicate);
1263:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1264:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1265:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Remove consecutive duplicate elements.
1266:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1267:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  For each consecutive set of elements with the same value,
1268:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  remove all but the first one.  Remaining elements stay in
1269:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  list order.  Note that this function only erases the
1270:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  elements, and that if the elements themselves are pointers,
1271:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the pointed-to memory is not touched in any way.  Managing
1272:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  the pointer is the user's responsibility.
1273:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1274:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1275:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       unique();
1276:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1277:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1278:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Remove consecutive elements satisfying a predicate.
1279:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  BinaryPredicate  Binary predicate function or object.
1280:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1281:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  For each consecutive set of elements [first,last) that
1282:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  satisfy predicate(first,i) where i is an iterator in
1283:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  [first,last), remove all but the first one.  Remaining
1284:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  elements stay in list order.  Note that this function only
1285:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  erases the elements, and that if the elements themselves are
1286:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  pointers, the pointed-to memory is not touched in any way.
1287:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Managing the pointer is the user's responsibility.
1288:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1289:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _BinaryPredicate>
1290:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1291:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         unique(_BinaryPredicate);
1292:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1293:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1294:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Merge sorted lists.
1295:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Sorted list to merge.
1296:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1297:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Assumes that both @a x and this list are sorted according to
1298:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  operator<().  Merges elements of @a x into this list in
1299:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  sorted order, leaving @a x empty when complete.  Elements in
1300:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  this list precede elements in @a x that are equal.
1301:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1302:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1303:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1304:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       merge(list&& __x);
1305:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1306:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1307:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       merge(list& __x)
1308:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { merge(std::move(__x)); }
1309:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #else
1310:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1311:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       merge(list& __x);
1312:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1313:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1314:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1315:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Merge sorted lists according to comparison function.
1316:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param  x  Sorted list to merge.
1317:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @param StrictWeakOrdering Comparison function defining
1318:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  sort order.
1319:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1320:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Assumes that both @a x and this list are sorted according to
1321:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  StrictWeakOrdering.  Merges elements of @a x into this list
1322:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  in sorted order, leaving @a x empty when complete.  Elements
1323:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  in this list precede elements in @a x that are equivalent
1324:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  according to StrictWeakOrdering().
1325:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1326:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1327:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _StrictWeakOrdering>
1328:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1329:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         merge(list&&, _StrictWeakOrdering);
1330:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1331:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _StrictWeakOrdering>
1332:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1333:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         merge(list& __x, _StrictWeakOrdering __comp)
1334:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         { merge(std::move(__x), __comp); }
1335:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #else
1336:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _StrictWeakOrdering>
1337:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1338:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         merge(list&, _StrictWeakOrdering);
1339:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1340:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1341:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1342:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Reverse the elements in list.
1343:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1344:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Reverse the order of elements in the list in linear time.
1345:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1346:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1347:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       reverse()
1348:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { this->_M_impl._M_node._M_reverse(); }
1349:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1350:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1351:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Sort the elements.
1352:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1353:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Sorts the elements of this list in NlogN time.  Equivalent
1354:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  elements remain in list order.
1355:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1356:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1357:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       sort();
1358:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1359:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       /**
1360:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  @brief  Sort the elements according to comparison function.
1361:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *
1362:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  Sorts the elements of this list in NlogN time.  Equivalent
1363:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        *  elements remain in list order.
1364:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        */
1365:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _StrictWeakOrdering>
1366:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1367:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         sort(_StrictWeakOrdering);
1368:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1369:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****     protected:
1370:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Internal constructor functions follow.
1371:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1372:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Called by the range constructor to implement [23.1.1]/9
1373:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1374:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1375:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // 438. Ambiguity in the "do the right thing" clause
1376:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _Integer>
1377:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1378:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
1379:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         { _M_fill_initialize(static_cast<size_type>(__n), __x); }
1380:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1381:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Called by the range constructor to implement [23.1.1]/9
1382:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _InputIterator>
1383:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1384:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1385:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 			       __false_type)
1386:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         {
1387:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  for (; __first != __last; ++__first)
1388:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    push_back(*__first);
1389:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	}
1390:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1391:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Called by list(n,v,a), and the range constructor when it turns out
1392:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // to be the same thing.
1393:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1394:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_fill_initialize(size_type __n, const value_type& __x)
1395:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1396:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	for (; __n > 0; --__n)
1397:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	  push_back(__x);
1398:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1399:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1400:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1401:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Internal assign functions follow.
1402:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1403:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Called by the range assign to implement [23.1.1]/9
1404:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1405:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1406:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // 438. Ambiguity in the "do the right thing" clause
1407:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _Integer>
1408:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1409:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1410:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         { _M_fill_assign(__n, __val); }
1411:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1412:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Called by the range assign to implement [23.1.1]/9
1413:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       template<typename _InputIterator>
1414:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         void
1415:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1416:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 			   __false_type);
1417:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1418:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Called by assign(n,t), and the range assign when it turns out
1419:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // to be the same thing.
1420:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1421:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1422:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1423:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1424:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Moves the elements from [first,last) before position.
1425:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1426:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_transfer(iterator __position, iterator __first, iterator __last)
1427:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { __position._M_node->_M_transfer(__first._M_node, __last._M_node); }
1428:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1429:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Inserts new element at position given and with value given.
1430:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifndef __GXX_EXPERIMENTAL_CXX0X__
1431:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1432:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_insert(iterator __position, const value_type& __x)
1433:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1434:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _Node* __tmp = _M_create_node(__x);
1435:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         __tmp->_M_hook(__position._M_node);
1436:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
1437:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #else
1438:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****      template<typename... _Args>
1439:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        void
1440:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        _M_insert(iterator __position, _Args&&... __args)
1441:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        {
1442:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
1443:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	 __tmp->_M_hook(__position._M_node);
1444:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****        }
1445:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1446:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 
1447:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       // Erases element at position given.
1448:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       void
1449:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_erase(iterator __position)
 20840              		.loc 54 1449 0
 20841              		.cfi_startproc
 20842              		@ args = 0, pretend = 0, frame = 16
 20843              		@ frame_needed = 1, uses_anonymous_args = 0
 20844 0000 80B5     		push	{r7, lr}
 20845              	.LCFI124:
 20846              		.cfi_def_cfa_offset 8
 20847 0002 84B0     		sub	sp, sp, #16
 20848              	.LCFI125:
 20849              		.cfi_def_cfa_offset 24
 20850 0004 00AF     		add	r7, sp, #0
 20851              		.cfi_offset 14, -4
 20852              		.cfi_offset 7, -8
 20853              	.LCFI126:
 20854              		.cfi_def_cfa_register 7
 20855 0006 7860     		str	r0, [r7, #4]
 20856 0008 3960     		str	r1, [r7, #0]
 20857              	.LBB34:
1450:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       {
1451:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         __position._M_node->_M_unhook();
 20858              		.loc 54 1451 0
 20859 000a 3B68     		ldr	r3, [r7, #0]
 20860 000c 1846     		mov	r0, r3
 20861 000e FFF7FEFF 		bl	_ZNSt15_List_node_base9_M_unhookEv
1452:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _Node* __n = static_cast<_Node*>(__position._M_node);
 20862              		.loc 54 1452 0
 20863 0012 3B68     		ldr	r3, [r7, #0]
 20864 0014 FB60     		str	r3, [r7, #12]
1453:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
1454:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _M_get_Node_allocator().destroy(__n);
1455:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #else
1456:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_get_Tp_allocator().destroy(&__n->_M_data);
 20865              		.loc 54 1456 0
 20866 0016 7B68     		ldr	r3, [r7, #4]
 20867 0018 07F10802 		add	r2, r7, #8
 20868 001c 1046     		mov	r0, r2
 20869 001e 1946     		mov	r1, r3
 20870 0020 FFF7FEFF 		bl	_ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv
 20871 0024 07F10802 		add	r2, r7, #8
 20872 0028 FB68     		ldr	r3, [r7, #12]
 20873 002a 03F10803 		add	r3, r3, #8
 20874 002e 1046     		mov	r0, r2
 20875 0030 1946     		mov	r1, r3
 20876 0032 FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE7destroyEPS2_
 20877 0036 07F10803 		add	r3, r7, #8
 20878 003a 1846     		mov	r0, r3
 20879 003c FFF7FEFF 		bl	_ZNSaIP9XFTimeoutED1Ev
1457:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** #endif
1458:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _M_put_node(__n);
 20880              		.loc 54 1458 0
 20881 0040 7B68     		ldr	r3, [r7, #4]
 20882 0042 1846     		mov	r0, r3
 20883 0044 F968     		ldr	r1, [r7, #12]
 20884 0046 FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E
 20885              	.LBE34:
1459:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 20886              		.loc 54 1459 0
 20887 004a 07F11007 		add	r7, r7, #16
 20888 004e BD46     		mov	sp, r7
 20889 0050 80BD     		pop	{r7, pc}
 20890              		.cfi_endproc
 20891              	.LFE951:
 20893 0052 00BF     		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_,"axG",%progbi
 20894              		.align	2
 20895              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_
 20896              		.thumb
 20897              		.thumb_func
 20899              	_ZNSt4listIP9XFTimeoutSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_:
 20900              	.LFB952:
1432:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_insert(iterator __position, const value_type& __x)
 20901              		.loc 54 1432 0
 20902              		.cfi_startproc
 20903              		@ args = 0, pretend = 0, frame = 24
 20904              		@ frame_needed = 1, uses_anonymous_args = 0
 20905 0000 80B5     		push	{r7, lr}
 20906              	.LCFI127:
 20907              		.cfi_def_cfa_offset 8
 20908 0002 86B0     		sub	sp, sp, #24
 20909              	.LCFI128:
 20910              		.cfi_def_cfa_offset 32
 20911 0004 00AF     		add	r7, sp, #0
 20912              		.cfi_offset 14, -4
 20913              		.cfi_offset 7, -8
 20914              	.LCFI129:
 20915              		.cfi_def_cfa_register 7
 20916 0006 F860     		str	r0, [r7, #12]
 20917 0008 B960     		str	r1, [r7, #8]
 20918 000a 7A60     		str	r2, [r7, #4]
 20919              	.LBB35:
1434:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         _Node* __tmp = _M_create_node(__x);
 20920              		.loc 54 1434 0
 20921 000c F868     		ldr	r0, [r7, #12]
 20922 000e 7968     		ldr	r1, [r7, #4]
 20923 0010 FFF7FEFF 		bl	_ZNSt4listIP9XFTimeoutSaIS1_EE14_M_create_nodeERKS1_
 20924 0014 7861     		str	r0, [r7, #20]
1435:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         __tmp->_M_hook(__position._M_node);
 20925              		.loc 54 1435 0
 20926 0016 7A69     		ldr	r2, [r7, #20]
 20927 0018 BB68     		ldr	r3, [r7, #8]
 20928 001a 1046     		mov	r0, r2
 20929 001c 1946     		mov	r1, r3
 20930 001e FFF7FEFF 		bl	_ZNSt15_List_node_base7_M_hookEPS_
 20931              	.LBE35:
1436:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 20932              		.loc 54 1436 0
 20933 0022 07F11807 		add	r7, r7, #24
 20934 0026 BD46     		mov	sp, r7
 20935 0028 80BD     		pop	{r7, pc}
 20936              		.cfi_endproc
 20937              	.LFE952:
 20939 002a 00BF     		.section	.text._ZNSt4listIP9XFTimeoutSaIS1_EE14_M_create_nodeERKS1_,"axG",%progbits,_ZNSt4listIP9X
 20940              		.align	2
 20941              		.weak	_ZNSt4listIP9XFTimeoutSaIS1_EE14_M_create_nodeERKS1_
 20942              		.thumb
 20943              		.thumb_func
 20945              	_ZNSt4listIP9XFTimeoutSaIS1_EE14_M_create_nodeERKS1_:
 20946              	.LFB953:
 459:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_create_node(const value_type& __x)
 20947              		.loc 54 459 0
 20948              		.cfi_startproc
 20949              		@ args = 0, pretend = 0, frame = 16
 20950              		@ frame_needed = 1, uses_anonymous_args = 0
 20951 0000 80B5     		push	{r7, lr}
 20952              	.LCFI130:
 20953              		.cfi_def_cfa_offset 8
 20954 0002 84B0     		sub	sp, sp, #16
 20955              	.LCFI131:
 20956              		.cfi_def_cfa_offset 24
 20957 0004 00AF     		add	r7, sp, #0
 20958              		.cfi_offset 14, -4
 20959              		.cfi_offset 7, -8
 20960              	.LCFI132:
 20961              		.cfi_def_cfa_register 7
 20962 0006 7860     		str	r0, [r7, #4]
 20963 0008 3960     		str	r1, [r7, #0]
 20964              	.LBB36:
 461:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_Node* __p = this->_M_get_node();
 20965              		.loc 54 461 0
 20966 000a 7B68     		ldr	r3, [r7, #4]
 20967 000c 1846     		mov	r0, r3
 20968 000e FFF7FEFF 		bl	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_get_nodeEv
 20969 0012 F860     		str	r0, [r7, #12]
 464:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	    _M_get_Tp_allocator().construct(&__p->_M_data, __x);
 20970              		.loc 54 464 0
 20971 0014 7B68     		ldr	r3, [r7, #4]
 20972 0016 07F10802 		add	r2, r7, #8
 20973 001a 1046     		mov	r0, r2
 20974 001c 1946     		mov	r1, r3
 20975 001e FFF7FEFF 		bl	_ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv
 20976 0022 07F10802 		add	r2, r7, #8
 20977 0026 FB68     		ldr	r3, [r7, #12]
 20978 0028 03F10803 		add	r3, r3, #8
 20979 002c 1046     		mov	r0, r2
 20980 002e 1946     		mov	r1, r3
 20981 0030 3A68     		ldr	r2, [r7, #0]
 20982 0032 FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE9constructEPS2_RKS2_
 20983 0036 07F10803 		add	r3, r7, #8
 20984 003a 1846     		mov	r0, r3
 20985 003c FFF7FEFF 		bl	_ZNSaIP9XFTimeoutED1Ev
 471:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return __p;
 20986              		.loc 54 471 0
 20987 0040 FB68     		ldr	r3, [r7, #12]
 20988              	.LBE36:
 472:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 20989              		.loc 54 472 0
 20990 0042 1846     		mov	r0, r3
 20991 0044 07F11007 		add	r7, r7, #16
 20992 0048 BD46     		mov	sp, r7
 20993 004a 80BD     		pop	{r7, pc}
 20994              		.cfi_endproc
 20995              	.LFE953:
 20997              		.section	.text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC2Ev,"axG",%progbits,_ZNSt10_List_
 20998              		.align	2
 20999              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC2Ev
 21000              		.thumb
 21001              		.thumb_func
 21003              	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC2Ev:
 21004              	.LFB975:
 303:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_List_impl()
 21005              		.loc 54 303 0
 21006              		.cfi_startproc
 21007              		@ args = 0, pretend = 0, frame = 8
 21008              		@ frame_needed = 1, uses_anonymous_args = 0
 21009 0000 80B5     		push	{r7, lr}
 21010              	.LCFI133:
 21011              		.cfi_def_cfa_offset 8
 21012 0002 82B0     		sub	sp, sp, #8
 21013              	.LCFI134:
 21014              		.cfi_def_cfa_offset 16
 21015 0004 00AF     		add	r7, sp, #0
 21016              		.cfi_offset 14, -4
 21017              		.cfi_offset 7, -8
 21018              	.LCFI135:
 21019              		.cfi_def_cfa_register 7
 21020 0006 7860     		str	r0, [r7, #4]
 21021              	.LBB37:
 304:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	: _Node_alloc_type(), _M_node()
 21022              		.loc 54 304 0
 21023 0008 7B68     		ldr	r3, [r7, #4]
 21024 000a 1846     		mov	r0, r3
 21025 000c FFF7FEFF 		bl	_ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev
 21026 0010 7B68     		ldr	r3, [r7, #4]
 21027 0012 4FF00002 		mov	r2, #0
 21028 0016 1A60     		str	r2, [r3, #0]
 21029 0018 7B68     		ldr	r3, [r7, #4]
 21030 001a 4FF00002 		mov	r2, #0
 21031 001e 5A60     		str	r2, [r3, #4]
 21032              	.LBE37:
 305:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	{ }
 21033              		.loc 54 305 0
 21034 0020 7B68     		ldr	r3, [r7, #4]
 21035 0022 1846     		mov	r0, r3
 21036 0024 07F10807 		add	r7, r7, #8
 21037 0028 BD46     		mov	sp, r7
 21038 002a 80BD     		pop	{r7, pc}
 21039              		.cfi_endproc
 21040              	.LFE975:
 21042              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC1Ev
 21043              		.thumb_set _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC1Ev,_ZNSt10_List_baseIP9XFTimeoutSaIS
 21044              		.section	.text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE7_M_initEv,"axG",%progbits,_ZNSt10_List_baseIP
 21045              		.align	2
 21046              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE7_M_initEv
 21047              		.thumb
 21048              		.thumb_func
 21050              	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE7_M_initEv:
 21051              	.LFB977:
 366:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_init()
 21052              		.loc 54 366 0
 21053              		.cfi_startproc
 21054              		@ args = 0, pretend = 0, frame = 8
 21055              		@ frame_needed = 1, uses_anonymous_args = 0
 21056              		@ link register save eliminated.
 21057 0000 80B4     		push	{r7}
 21058              	.LCFI136:
 21059              		.cfi_def_cfa_offset 4
 21060 0002 83B0     		sub	sp, sp, #12
 21061              	.LCFI137:
 21062              		.cfi_def_cfa_offset 16
 21063 0004 00AF     		add	r7, sp, #0
 21064              		.cfi_offset 7, -4
 21065              	.LCFI138:
 21066              		.cfi_def_cfa_register 7
 21067 0006 7860     		str	r0, [r7, #4]
 368:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         this->_M_impl._M_node._M_next = &this->_M_impl._M_node;
 21068              		.loc 54 368 0
 21069 0008 7A68     		ldr	r2, [r7, #4]
 21070 000a 7B68     		ldr	r3, [r7, #4]
 21071 000c 1A60     		str	r2, [r3, #0]
 369:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****         this->_M_impl._M_node._M_prev = &this->_M_impl._M_node;
 21072              		.loc 54 369 0
 21073 000e 7A68     		ldr	r2, [r7, #4]
 21074 0010 7B68     		ldr	r3, [r7, #4]
 21075 0012 5A60     		str	r2, [r3, #4]
 370:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 21076              		.loc 54 370 0
 21077 0014 07F10C07 		add	r7, r7, #12
 21078 0018 BD46     		mov	sp, r7
 21079 001a 80BC     		pop	{r7}
 21080 001c 7047     		bx	lr
 21081              		.cfi_endproc
 21082              	.LFE977:
 21084 001e 00BF     		.section	.text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED2Ev,"axG",%progbits,_ZN9_
 21085              		.align	2
 21086              		.weak	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED2Ev
 21087              		.thumb
 21088              		.thumb_func
 21090              	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED2Ev:
 21091              	.LFB979:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** /** @file ext/new_allocator.h
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****  */
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #include <new>
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #include <bits/move.h>
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****   using std::size_t;
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****   using std::ptrdiff_t;
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****   /**
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *  @ingroup allocators
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *    - all allocation calls operator new
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****    */
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****   template<typename _Tp>
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****     class new_allocator
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****     {
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****     public:
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef size_t     size_type;
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef _Tp*       pointer;
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef _Tp&       reference;
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       typedef _Tp        value_type;
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       template<typename _Tp1>
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****         struct rebind
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator() throw() { }
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator(const new_allocator&) throw() { }
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       template<typename _Tp1>
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) throw() { }
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       ~new_allocator() throw() { }
 21092              		.loc 51 73 0
 21093              		.cfi_startproc
 21094              		@ args = 0, pretend = 0, frame = 8
 21095              		@ frame_needed = 1, uses_anonymous_args = 0
 21096              		@ link register save eliminated.
 21097 0000 80B4     		push	{r7}
 21098              	.LCFI139:
 21099              		.cfi_def_cfa_offset 4
 21100 0002 83B0     		sub	sp, sp, #12
 21101              	.LCFI140:
 21102              		.cfi_def_cfa_offset 16
 21103 0004 00AF     		add	r7, sp, #0
 21104              		.cfi_offset 7, -4
 21105              	.LCFI141:
 21106              		.cfi_def_cfa_register 7
 21107 0006 7860     		str	r0, [r7, #4]
 21108              		.loc 51 73 0
 21109 0008 7B68     		ldr	r3, [r7, #4]
 21110 000a 1846     		mov	r0, r3
 21111 000c 07F10C07 		add	r7, r7, #12
 21112 0010 BD46     		mov	sp, r7
 21113 0012 80BC     		pop	{r7}
 21114 0014 7047     		bx	lr
 21115              		.cfi_endproc
 21116              	.LFE979:
 21118              		.weak	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev
 21119              		.thumb_set _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev,_ZN9__gnu_cxx13new_alloca
 21120 0016 00BF     		.section	.text._ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv,"axG",%progbits,_ZNKS
 21121              		.align	2
 21122              		.weak	_ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv
 21123              		.thumb
 21124              		.thumb_func
 21126              	_ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv:
 21127              	.LFB981:
 334:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_get_Tp_allocator() const
 21128              		.loc 54 334 0
 21129              		.cfi_startproc
 21130              		@ args = 0, pretend = 0, frame = 8
 21131              		@ frame_needed = 1, uses_anonymous_args = 0
 21132 0000 B0B5     		push	{r4, r5, r7, lr}
 21133              	.LCFI142:
 21134              		.cfi_def_cfa_offset 16
 21135 0002 82B0     		sub	sp, sp, #8
 21136              	.LCFI143:
 21137              		.cfi_def_cfa_offset 24
 21138 0004 00AF     		add	r7, sp, #0
 21139              		.cfi_offset 14, -4
 21140              		.cfi_offset 7, -8
 21141              		.cfi_offset 5, -12
 21142              		.cfi_offset 4, -16
 21143              	.LCFI144:
 21144              		.cfi_def_cfa_register 7
 21145 0006 0446     		mov	r4, r0
 21146 0008 7960     		str	r1, [r7, #4]
 335:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _Tp_alloc_type(_M_get_Node_allocator()); }
 21147              		.loc 54 335 0
 21148 000a 2546     		mov	r5, r4
 21149 000c 7868     		ldr	r0, [r7, #4]
 21150 000e FFF7FEFF 		bl	_ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE21_M_get_Node_allocatorEv
 21151 0012 0346     		mov	r3, r0
 21152 0014 2846     		mov	r0, r5
 21153 0016 1946     		mov	r1, r3
 21154 0018 FFF7FEFF 		bl	_ZNSaIP9XFTimeoutEC1ISt10_List_nodeIS0_EEERKSaIT_E
 21155 001c 2046     		mov	r0, r4
 21156 001e 2046     		mov	r0, r4
 21157 0020 07F10807 		add	r7, r7, #8
 21158 0024 BD46     		mov	sp, r7
 21159 0026 B0BD     		pop	{r4, r5, r7, pc}
 21160              		.cfi_endproc
 21161              	.LFE981:
 21163              		.section	.text._ZNSaIP9XFTimeoutED2Ev,"axG",%progbits,_ZNSaIP9XFTimeoutED5Ev,comdat
 21164              		.align	2
 21165              		.weak	_ZNSaIP9XFTimeoutED2Ev
 21166              		.thumb
 21167              		.thumb_func
 21169              	_ZNSaIP9XFTimeoutED2Ev:
 21170              	.LFB983:
 21171              		.loc 49 109 0
 21172              		.cfi_startproc
 21173              		@ args = 0, pretend = 0, frame = 8
 21174              		@ frame_needed = 1, uses_anonymous_args = 0
 21175 0000 80B5     		push	{r7, lr}
 21176              	.LCFI145:
 21177              		.cfi_def_cfa_offset 8
 21178 0002 82B0     		sub	sp, sp, #8
 21179              	.LCFI146:
 21180              		.cfi_def_cfa_offset 16
 21181 0004 00AF     		add	r7, sp, #0
 21182              		.cfi_offset 14, -4
 21183              		.cfi_offset 7, -8
 21184              	.LCFI147:
 21185              		.cfi_def_cfa_register 7
 21186 0006 7860     		str	r0, [r7, #4]
 21187              	.LBB38:
 21188              		.loc 49 109 0
 21189 0008 7B68     		ldr	r3, [r7, #4]
 21190 000a 1846     		mov	r0, r3
 21191 000c FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED2Ev
 21192              	.LBE38:
 21193 0010 7B68     		ldr	r3, [r7, #4]
 21194 0012 1846     		mov	r0, r3
 21195 0014 07F10807 		add	r7, r7, #8
 21196 0018 BD46     		mov	sp, r7
 21197 001a 80BD     		pop	{r7, pc}
 21198              		.cfi_endproc
 21199              	.LFE983:
 21201              		.weak	_ZNSaIP9XFTimeoutED1Ev
 21202              		.thumb_set _ZNSaIP9XFTimeoutED1Ev,_ZNSaIP9XFTimeoutED2Ev
 21203              		.section	.text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE7destroyEPS2_,"axG",%progbits,_ZN9__gnu_cx
 21204              		.align	2
 21205              		.weak	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE7destroyEPS2_
 21206              		.thumb
 21207              		.thumb_func
 21209              	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE7destroyEPS2_:
 21210              	.LFB985:
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       pointer
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       address(reference __x) const { return &__x; }
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       const_pointer
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       address(const_reference __x) const { return &__x; }
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       pointer
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { 
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	if (__n > this->max_size())
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       }
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       void
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { ::operator delete(__p); }
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       size_type
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       max_size() const throw() 
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       // 402. wrong new expression in [some_] allocator::construct
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       void 
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val) 
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       template<typename... _Args>
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****         void
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****         construct(pointer __p, _Args&&... __args)
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	{ ::new((void *)__p) _Tp(std::forward<_Args>(__args)...); }
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** #endif
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       void 
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       destroy(pointer __p) { __p->~_Tp(); }
 21211              		.loc 51 115 0
 21212              		.cfi_startproc
 21213              		@ args = 0, pretend = 0, frame = 8
 21214              		@ frame_needed = 1, uses_anonymous_args = 0
 21215              		@ link register save eliminated.
 21216 0000 80B4     		push	{r7}
 21217              	.LCFI148:
 21218              		.cfi_def_cfa_offset 4
 21219 0002 83B0     		sub	sp, sp, #12
 21220              	.LCFI149:
 21221              		.cfi_def_cfa_offset 16
 21222 0004 00AF     		add	r7, sp, #0
 21223              		.cfi_offset 7, -4
 21224              	.LCFI150:
 21225              		.cfi_def_cfa_register 7
 21226 0006 7860     		str	r0, [r7, #4]
 21227 0008 3960     		str	r1, [r7, #0]
 21228              		.loc 51 115 0
 21229 000a 07F10C07 		add	r7, r7, #12
 21230 000e BD46     		mov	sp, r7
 21231 0010 80BC     		pop	{r7}
 21232 0012 7047     		bx	lr
 21233              		.cfi_endproc
 21234              	.LFE985:
 21236              		.section	.text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E,"axG",%prog
 21237              		.align	2
 21238              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E
 21239              		.thumb
 21240              		.thumb_func
 21242              	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E:
 21243              	.LFB986:
 319:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_put_node(_List_node<_Tp>* __p)
 21244              		.loc 54 319 0
 21245              		.cfi_startproc
 21246              		@ args = 0, pretend = 0, frame = 8
 21247              		@ frame_needed = 1, uses_anonymous_args = 0
 21248 0000 80B5     		push	{r7, lr}
 21249              	.LCFI151:
 21250              		.cfi_def_cfa_offset 8
 21251 0002 82B0     		sub	sp, sp, #8
 21252              	.LCFI152:
 21253              		.cfi_def_cfa_offset 16
 21254 0004 00AF     		add	r7, sp, #0
 21255              		.cfi_offset 14, -4
 21256              		.cfi_offset 7, -8
 21257              	.LCFI153:
 21258              		.cfi_def_cfa_register 7
 21259 0006 7860     		str	r0, [r7, #4]
 21260 0008 3960     		str	r1, [r7, #0]
 320:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { _M_impl._Node_alloc_type::deallocate(__p, 1); }
 21261              		.loc 54 320 0
 21262 000a 7B68     		ldr	r3, [r7, #4]
 21263 000c 1846     		mov	r0, r3
 21264 000e 3968     		ldr	r1, [r7, #0]
 21265 0010 4FF00102 		mov	r2, #1
 21266 0014 FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j
 21267 0018 07F10807 		add	r7, r7, #8
 21268 001c BD46     		mov	sp, r7
 21269 001e 80BD     		pop	{r7, pc}
 21270              		.cfi_endproc
 21271              	.LFE986:
 21273              		.section	.text._ZNSt20_List_const_iteratorIP9XFTimeoutEC2EPKSt15_List_node_base,"axG",%progbits,_Z
 21274              		.align	2
 21275              		.weak	_ZNSt20_List_const_iteratorIP9XFTimeoutEC2EPKSt15_List_node_base
 21276              		.thumb
 21277              		.thumb_func
 21279              	_ZNSt20_List_const_iteratorIP9XFTimeoutEC2EPKSt15_List_node_base:
 21280              	.LFB988:
 204:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _List_const_iterator(const _List_node_base* __x)
 21281              		.loc 54 204 0
 21282              		.cfi_startproc
 21283              		@ args = 0, pretend = 0, frame = 8
 21284              		@ frame_needed = 1, uses_anonymous_args = 0
 21285              		@ link register save eliminated.
 21286 0000 80B4     		push	{r7}
 21287              	.LCFI154:
 21288              		.cfi_def_cfa_offset 4
 21289 0002 83B0     		sub	sp, sp, #12
 21290              	.LCFI155:
 21291              		.cfi_def_cfa_offset 16
 21292 0004 00AF     		add	r7, sp, #0
 21293              		.cfi_offset 7, -4
 21294              	.LCFI156:
 21295              		.cfi_def_cfa_register 7
 21296 0006 7860     		str	r0, [r7, #4]
 21297 0008 3960     		str	r1, [r7, #0]
 21298              	.LBB39:
 205:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       : _M_node(__x) { }
 21299              		.loc 54 205 0
 21300 000a 7B68     		ldr	r3, [r7, #4]
 21301 000c 3A68     		ldr	r2, [r7, #0]
 21302 000e 1A60     		str	r2, [r3, #0]
 21303              	.LBE39:
 21304 0010 7B68     		ldr	r3, [r7, #4]
 21305 0012 1846     		mov	r0, r3
 21306 0014 07F10C07 		add	r7, r7, #12
 21307 0018 BD46     		mov	sp, r7
 21308 001a 80BC     		pop	{r7}
 21309 001c 7047     		bx	lr
 21310              		.cfi_endproc
 21311              	.LFE988:
 21313              		.weak	_ZNSt20_List_const_iteratorIP9XFTimeoutEC1EPKSt15_List_node_base
 21314              		.thumb_set _ZNSt20_List_const_iteratorIP9XFTimeoutEC1EPKSt15_List_node_base,_ZNSt20_List_const_ite
 21315 001e 00BF     		.section	.text._ZSt19__iterator_categoryISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_trait
 21316              		.align	2
 21317              		.weak	_ZSt19__iterator_categoryISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E17it
 21318              		.thumb
 21319              		.thumb_func
 21321              	_ZSt19__iterator_categoryISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E17iterator_
 21322              	.LFB990:
   1:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
   3:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   4:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // Free Software Foundation, Inc.
   5:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** //
   6:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
   8:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   9:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // any later version.
  11:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  12:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  13:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // GNU General Public License for more details.
  16:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  17:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // 3.1, as published by the Free Software Foundation.
  20:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  21:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License and
  22:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** // <http://www.gnu.org/licenses/>.
  25:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  26:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** /*
  27:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *
  28:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * Copyright (c) 1994
  29:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * Hewlett-Packard Company
  30:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *
  31:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  34:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  35:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  37:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *
  39:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *
  40:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  41:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *
  43:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  46:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  47:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  49:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  */
  51:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  52:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** /** @file stl_iterator_base_types.h
  53:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  54:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *  You should not attempt to use it directly.
  55:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *
  56:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  57:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  58:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****  */
  59:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  60:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** #ifndef _STL_ITERATOR_BASE_TYPES_H
  61:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** #define _STL_ITERATOR_BASE_TYPES_H 1
  62:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  63:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** #pragma GCC system_header
  64:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  65:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** #include <bits/c++config.h>
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** #include <cstddef>
  67:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  68:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** _GLIBCXX_BEGIN_NAMESPACE(std)
  69:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  70:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /**
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  @defgroup iterators Iterators
  72:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  Abstractions for uniform iterating through various underlying types.
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   */
  74:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   //@{ 
  75:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  76:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /**
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  79:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  different operations supported by different iterator types.
  82:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   */
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   //@{ 
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   ///  Marking input iterators.
  85:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   struct input_iterator_tag { };
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   ///  Marking output iterators.
  88:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   struct output_iterator_tag { };
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  91:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag { };
  92:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  93:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /// operations.
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag { };
  96:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
  97:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /// iterator operations.
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
 100:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   //@}
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
 102:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /**
 103:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
 106:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  used in specializations and overloading.
 108:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *
 109:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 110:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 111:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   */
 112:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 113:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 114:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     struct iterator
 115:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     {
 116:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 117:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 118:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 119:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Tp        value_type;
 120:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 121:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 122:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 123:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 124:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 125:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Reference reference;
 126:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     };
 127:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
 128:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /**
 129:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  @brief  Traits class for iterators.
 130:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *
 131:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 132:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  version simply @a forwards the nested typedefs from the Iterator
 133:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 134:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 135:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   */
 136:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 137:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     struct iterator_traits
 138:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     {
 139:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 140:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 141:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 142:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 143:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 144:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     };
 145:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
 146:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /// Partial specialization for pointer types.
 147:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 148:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 149:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     {
 150:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 151:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 152:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 153:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 154:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 155:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     };
 156:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
 157:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /// Partial specialization for const pointer types.
 158:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 159:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*>
 160:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     {
 161:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 162:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 163:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 164:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 165:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 166:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     };
 167:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h **** 
 168:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   /**
 169:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 170:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****    *  sugar for internal library use only.
 171:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   */
 172:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****   template<typename _Iter>
 173:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     inline typename iterator_traits<_Iter>::iterator_category
 174:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 21323              		.loc 45 174 0
 21324              		.cfi_startproc
 21325              		@ args = 0, pretend = 0, frame = 8
 21326              		@ frame_needed = 1, uses_anonymous_args = 0
 21327              		@ link register save eliminated.
 21328 0000 80B4     		push	{r7}
 21329              	.LCFI157:
 21330              		.cfi_def_cfa_offset 4
 21331 0002 83B0     		sub	sp, sp, #12
 21332              	.LCFI158:
 21333              		.cfi_def_cfa_offset 16
 21334 0004 00AF     		add	r7, sp, #0
 21335              		.cfi_offset 7, -4
 21336              	.LCFI159:
 21337              		.cfi_def_cfa_register 7
 21338 0006 7860     		str	r0, [r7, #4]
 175:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 21339              		.loc 45 175 0
 21340 0008 1846     		mov	r0, r3
 21341 000a 07F10C07 		add	r7, r7, #12
 21342 000e BD46     		mov	sp, r7
 21343 0010 80BC     		pop	{r7}
 21344 0012 7047     		bx	lr
 21345              		.cfi_endproc
 21346              	.LFE990:
 21348              		.section	.text._ZSt10__distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15di
 21349              		.align	2
 21350              		.weak	_ZSt10__distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_
 21351              		.thumb
 21352              		.thumb_func
 21354              	_ZSt10__distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES5
 21355              	.LFB991:
  71:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     __distance(_InputIterator __first, _InputIterator __last,
 21356              		.loc 46 71 0
 21357              		.cfi_startproc
 21358              		@ args = 0, pretend = 0, frame = 24
 21359              		@ frame_needed = 1, uses_anonymous_args = 0
 21360 0000 80B5     		push	{r7, lr}
 21361              	.LCFI160:
 21362              		.cfi_def_cfa_offset 8
 21363 0002 86B0     		sub	sp, sp, #24
 21364              	.LCFI161:
 21365              		.cfi_def_cfa_offset 32
 21366 0004 00AF     		add	r7, sp, #0
 21367              		.cfi_offset 14, -4
 21368              		.cfi_offset 7, -8
 21369              	.LCFI162:
 21370              		.cfi_def_cfa_register 7
 21371 0006 F860     		str	r0, [r7, #12]
 21372 0008 B960     		str	r1, [r7, #8]
 21373 000a 3A71     		strb	r2, [r7, #4]
 21374              	.LBB40:
  77:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       typename iterator_traits<_InputIterator>::difference_type __n = 0;
 21375              		.loc 46 77 0
 21376 000c 4FF00003 		mov	r3, #0
 21377 0010 7B61     		str	r3, [r7, #20]
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
 21378              		.loc 46 78 0
 21379 0012 08E0     		b	.L98
 21380              	.L99:
  80:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 	  ++__first;
 21381              		.loc 46 80 0
 21382 0014 07F10C03 		add	r3, r7, #12
 21383 0018 1846     		mov	r0, r3
 21384 001a FFF7FEFF 		bl	_ZNSt20_List_const_iteratorIP9XFTimeoutEppEv
  81:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h **** 	  ++__n;
 21385              		.loc 46 81 0
 21386 001e 7B69     		ldr	r3, [r7, #20]
 21387 0020 03F10103 		add	r3, r3, #1
 21388 0024 7B61     		str	r3, [r7, #20]
 21389              	.L98:
  78:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       while (__first != __last)
 21390              		.loc 46 78 0 discriminator 1
 21391 0026 07F10C02 		add	r2, r7, #12
 21392 002a 07F10803 		add	r3, r7, #8
 21393 002e 1046     		mov	r0, r2
 21394 0030 1946     		mov	r1, r3
 21395 0032 FFF7FEFF 		bl	_ZNKSt20_List_const_iteratorIP9XFTimeoutEneERKS2_
 21396 0036 0346     		mov	r3, r0
 21397 0038 002B     		cmp	r3, #0
 21398 003a EBD1     		bne	.L99
  83:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****       return __n;
 21399              		.loc 46 83 0
 21400 003c 7B69     		ldr	r3, [r7, #20]
 21401              	.LBE40:
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_iterator_base_funcs.h ****     }
 21402              		.loc 46 84 0
 21403 003e 1846     		mov	r0, r3
 21404 0040 07F11807 		add	r7, r7, #24
 21405 0044 BD46     		mov	sp, r7
 21406 0046 80BD     		pop	{r7, pc}
 21407              		.cfi_endproc
 21408              	.LFE991:
 21410              		.section	.text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_get_nodeEv,"axG",%progbits,_ZNSt10_List_b
 21411              		.align	2
 21412              		.weak	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_get_nodeEv
 21413              		.thumb
 21414              		.thumb_func
 21416              	_ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_get_nodeEv:
 21417              	.LFB992:
 315:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_get_node()
 21418              		.loc 54 315 0
 21419              		.cfi_startproc
 21420              		@ args = 0, pretend = 0, frame = 8
 21421              		@ frame_needed = 1, uses_anonymous_args = 0
 21422 0000 80B5     		push	{r7, lr}
 21423              	.LCFI163:
 21424              		.cfi_def_cfa_offset 8
 21425 0002 82B0     		sub	sp, sp, #8
 21426              	.LCFI164:
 21427              		.cfi_def_cfa_offset 16
 21428 0004 00AF     		add	r7, sp, #0
 21429              		.cfi_offset 14, -4
 21430              		.cfi_offset 7, -8
 21431              	.LCFI165:
 21432              		.cfi_def_cfa_register 7
 21433 0006 7860     		str	r0, [r7, #4]
 316:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_impl._Node_alloc_type::allocate(1); }
 21434              		.loc 54 316 0
 21435 0008 7B68     		ldr	r3, [r7, #4]
 21436 000a 1846     		mov	r0, r3
 21437 000c 4FF00101 		mov	r1, #1
 21438 0010 4FF00002 		mov	r2, #0
 21439 0014 FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv
 21440 0018 0346     		mov	r3, r0
 21441 001a 1846     		mov	r0, r3
 21442 001c 07F10807 		add	r7, r7, #8
 21443 0020 BD46     		mov	sp, r7
 21444 0022 80BD     		pop	{r7, pc}
 21445              		.cfi_endproc
 21446              	.LFE992:
 21448              		.section	.text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE9constructEPS2_RKS2_,"axG",%progbits,_ZN9_
 21449              		.align	2
 21450              		.weak	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE9constructEPS2_RKS2_
 21451              		.thumb
 21452              		.thumb_func
 21454              	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE9constructEPS2_RKS2_:
 21455              	.LFB993:
 104:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val) 
 21456              		.loc 51 104 0
 21457              		.cfi_startproc
 21458              		@ args = 0, pretend = 0, frame = 16
 21459              		@ frame_needed = 1, uses_anonymous_args = 0
 21460 0000 80B5     		push	{r7, lr}
 21461              	.LCFI166:
 21462              		.cfi_def_cfa_offset 8
 21463 0002 84B0     		sub	sp, sp, #16
 21464              	.LCFI167:
 21465              		.cfi_def_cfa_offset 24
 21466 0004 00AF     		add	r7, sp, #0
 21467              		.cfi_offset 14, -4
 21468              		.cfi_offset 7, -8
 21469              	.LCFI168:
 21470              		.cfi_def_cfa_register 7
 21471 0006 F860     		str	r0, [r7, #12]
 21472 0008 B960     		str	r1, [r7, #8]
 21473 000a 7A60     		str	r2, [r7, #4]
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 21474              		.loc 51 105 0
 21475 000c BB68     		ldr	r3, [r7, #8]
 21476 000e 4FF00400 		mov	r0, #4
 21477 0012 1946     		mov	r1, r3
 21478 0014 FFF7FEFF 		bl	_ZnwjPv
 21479 0018 0346     		mov	r3, r0
 21480 001a 1A46     		mov	r2, r3
 21481 001c 002A     		cmp	r2, #0
 21482 001e 02D0     		beq	.L101
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 21483              		.loc 51 105 0 is_stmt 0 discriminator 1
 21484 0020 7A68     		ldr	r2, [r7, #4]
 21485 0022 1268     		ldr	r2, [r2, #0]
 21486 0024 1A60     		str	r2, [r3, #0]
 21487              	.L101:
 105:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 21488              		.loc 51 105 0
 21489 0026 07F11007 		add	r7, r7, #16
 21490 002a BD46     		mov	sp, r7
 21491 002c 80BD     		pop	{r7, pc}
 21492              		.cfi_endproc
 21493              	.LFE993:
 21495 002e 00BF     		.section	.text._ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev,"axG",%progbits,_ZNSaISt10_List_nodeIP9XFTim
 21496              		.align	2
 21497              		.weak	_ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev
 21498              		.thumb
 21499              		.thumb_func
 21501              	_ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev:
 21502              	.LFB1024:
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       allocator() throw() { }
 21503              		.loc 49 101 0 is_stmt 1
 21504              		.cfi_startproc
 21505              		@ args = 0, pretend = 0, frame = 8
 21506              		@ frame_needed = 1, uses_anonymous_args = 0
 21507 0000 80B5     		push	{r7, lr}
 21508              	.LCFI169:
 21509              		.cfi_def_cfa_offset 8
 21510 0002 82B0     		sub	sp, sp, #8
 21511              	.LCFI170:
 21512              		.cfi_def_cfa_offset 16
 21513 0004 00AF     		add	r7, sp, #0
 21514              		.cfi_offset 14, -4
 21515              		.cfi_offset 7, -8
 21516              	.LCFI171:
 21517              		.cfi_def_cfa_register 7
 21518 0006 7860     		str	r0, [r7, #4]
 21519              	.LBB41:
 101:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****       allocator() throw() { }
 21520              		.loc 49 101 0
 21521 0008 7B68     		ldr	r3, [r7, #4]
 21522 000a 1846     		mov	r0, r3
 21523 000c FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC2Ev
 21524              	.LBE41:
 21525 0010 7B68     		ldr	r3, [r7, #4]
 21526 0012 1846     		mov	r0, r3
 21527 0014 07F10807 		add	r7, r7, #8
 21528 0018 BD46     		mov	sp, r7
 21529 001a 80BD     		pop	{r7, pc}
 21530              		.cfi_endproc
 21531              	.LFE1024:
 21533              		.weak	_ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev
 21534              		.thumb_set _ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev,_ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev
 21535              		.section	.text._ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE21_M_get_Node_allocatorEv,"axG",%progbits,_ZN
 21536              		.align	2
 21537              		.weak	_ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE21_M_get_Node_allocatorEv
 21538              		.thumb
 21539              		.thumb_func
 21541              	_ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE21_M_get_Node_allocatorEv:
 21542              	.LFB1026:
 330:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       _M_get_Node_allocator() const
 21543              		.loc 54 330 0
 21544              		.cfi_startproc
 21545              		@ args = 0, pretend = 0, frame = 8
 21546              		@ frame_needed = 1, uses_anonymous_args = 0
 21547              		@ link register save eliminated.
 21548 0000 80B4     		push	{r7}
 21549              	.LCFI172:
 21550              		.cfi_def_cfa_offset 4
 21551 0002 83B0     		sub	sp, sp, #12
 21552              	.LCFI173:
 21553              		.cfi_def_cfa_offset 16
 21554 0004 00AF     		add	r7, sp, #0
 21555              		.cfi_offset 7, -4
 21556              	.LCFI174:
 21557              		.cfi_def_cfa_register 7
 21558 0006 7860     		str	r0, [r7, #4]
 331:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return *static_cast<const _Node_alloc_type*>(&this->_M_impl); }
 21559              		.loc 54 331 0
 21560 0008 7B68     		ldr	r3, [r7, #4]
 21561 000a 1846     		mov	r0, r3
 21562 000c 07F10C07 		add	r7, r7, #12
 21563 0010 BD46     		mov	sp, r7
 21564 0012 80BC     		pop	{r7}
 21565 0014 7047     		bx	lr
 21566              		.cfi_endproc
 21567              	.LFE1026:
 21569 0016 00BF     		.section	.text._ZNSaIP9XFTimeoutEC2ISt10_List_nodeIS0_EEERKSaIT_E,"axG",%progbits,_ZNSaIP9XFTimeou
 21570              		.align	2
 21571              		.weak	_ZNSaIP9XFTimeoutEC2ISt10_List_nodeIS0_EEERKSaIT_E
 21572              		.thumb
 21573              		.thumb_func
 21575              	_ZNSaIP9XFTimeoutEC2ISt10_List_nodeIS0_EEERKSaIT_E:
 21576              	.LFB1028:
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 21577              		.loc 49 107 0
 21578              		.cfi_startproc
 21579              		@ args = 0, pretend = 0, frame = 8
 21580              		@ frame_needed = 1, uses_anonymous_args = 0
 21581 0000 80B5     		push	{r7, lr}
 21582              	.LCFI175:
 21583              		.cfi_def_cfa_offset 8
 21584 0002 82B0     		sub	sp, sp, #8
 21585              	.LCFI176:
 21586              		.cfi_def_cfa_offset 16
 21587 0004 00AF     		add	r7, sp, #0
 21588              		.cfi_offset 14, -4
 21589              		.cfi_offset 7, -8
 21590              	.LCFI177:
 21591              		.cfi_def_cfa_register 7
 21592 0006 7860     		str	r0, [r7, #4]
 21593 0008 3960     		str	r1, [r7, #0]
 21594              	.LBB42:
 107:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 21595              		.loc 49 107 0
 21596 000a 7B68     		ldr	r3, [r7, #4]
 21597 000c 1846     		mov	r0, r3
 21598 000e FFF7FEFF 		bl	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC2Ev
 21599              	.LBE42:
 21600 0012 7B68     		ldr	r3, [r7, #4]
 21601 0014 1846     		mov	r0, r3
 21602 0016 07F10807 		add	r7, r7, #8
 21603 001a BD46     		mov	sp, r7
 21604 001c 80BD     		pop	{r7, pc}
 21605              		.cfi_endproc
 21606              	.LFE1028:
 21608              		.weak	_ZNSaIP9XFTimeoutEC1ISt10_List_nodeIS0_EEERKSaIT_E
 21609              		.thumb_set _ZNSaIP9XFTimeoutEC1ISt10_List_nodeIS0_EEERKSaIT_E,_ZNSaIP9XFTimeoutEC2ISt10_List_nodeI
 21610 001e 00BF     		.section	.text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED2Ev,"axG",%progbits,_ZN9__gnu_cxx13new_al
 21611              		.align	2
 21612              		.weak	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED2Ev
 21613              		.thumb
 21614              		.thumb_func
 21616              	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED2Ev:
 21617              	.LFB1034:
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       ~new_allocator() throw() { }
 21618              		.loc 51 73 0
 21619              		.cfi_startproc
 21620              		@ args = 0, pretend = 0, frame = 8
 21621              		@ frame_needed = 1, uses_anonymous_args = 0
 21622              		@ link register save eliminated.
 21623 0000 80B4     		push	{r7}
 21624              	.LCFI178:
 21625              		.cfi_def_cfa_offset 4
 21626 0002 83B0     		sub	sp, sp, #12
 21627              	.LCFI179:
 21628              		.cfi_def_cfa_offset 16
 21629 0004 00AF     		add	r7, sp, #0
 21630              		.cfi_offset 7, -4
 21631              	.LCFI180:
 21632              		.cfi_def_cfa_register 7
 21633 0006 7860     		str	r0, [r7, #4]
  73:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       ~new_allocator() throw() { }
 21634              		.loc 51 73 0
 21635 0008 7B68     		ldr	r3, [r7, #4]
 21636 000a 1846     		mov	r0, r3
 21637 000c 07F10C07 		add	r7, r7, #12
 21638 0010 BD46     		mov	sp, r7
 21639 0012 80BC     		pop	{r7}
 21640 0014 7047     		bx	lr
 21641              		.cfi_endproc
 21642              	.LFE1034:
 21644              		.weak	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED1Ev
 21645              		.thumb_set _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED1Ev,_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE
 21646 0016 00BF     		.section	.text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j,"axG",%
 21647              		.align	2
 21648              		.weak	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j
 21649              		.thumb
 21650              		.thumb_func
 21652              	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j:
 21653              	.LFB1036:
  94:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 21654              		.loc 51 94 0
 21655              		.cfi_startproc
 21656              		@ args = 0, pretend = 0, frame = 16
 21657              		@ frame_needed = 1, uses_anonymous_args = 0
 21658 0000 80B5     		push	{r7, lr}
 21659              	.LCFI181:
 21660              		.cfi_def_cfa_offset 8
 21661 0002 84B0     		sub	sp, sp, #16
 21662              	.LCFI182:
 21663              		.cfi_def_cfa_offset 24
 21664 0004 00AF     		add	r7, sp, #0
 21665              		.cfi_offset 14, -4
 21666              		.cfi_offset 7, -8
 21667              	.LCFI183:
 21668              		.cfi_def_cfa_register 7
 21669 0006 F860     		str	r0, [r7, #12]
 21670 0008 B960     		str	r1, [r7, #8]
 21671 000a 7A60     		str	r2, [r7, #4]
  95:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { ::operator delete(__p); }
 21672              		.loc 51 95 0
 21673 000c B868     		ldr	r0, [r7, #8]
 21674 000e FFF7FEFF 		bl	_ZdlPv
 21675 0012 07F11007 		add	r7, r7, #16
 21676 0016 BD46     		mov	sp, r7
 21677 0018 80BD     		pop	{r7, pc}
 21678              		.cfi_endproc
 21679              	.LFE1036:
 21681 001a 00BF     		.section	.text._ZNKSt20_List_const_iteratorIP9XFTimeoutEneERKS2_,"axG",%progbits,_ZNKSt20_List_con
 21682              		.align	2
 21683              		.weak	_ZNKSt20_List_const_iteratorIP9XFTimeoutEneERKS2_
 21684              		.thumb
 21685              		.thumb_func
 21687              	_ZNKSt20_List_const_iteratorIP9XFTimeoutEneERKS2_:
 21688              	.LFB1037:
 255:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator!=(const _Self& __x) const
 21689              		.loc 54 255 0
 21690              		.cfi_startproc
 21691              		@ args = 0, pretend = 0, frame = 8
 21692              		@ frame_needed = 1, uses_anonymous_args = 0
 21693              		@ link register save eliminated.
 21694 0000 80B4     		push	{r7}
 21695              	.LCFI184:
 21696              		.cfi_def_cfa_offset 4
 21697 0002 83B0     		sub	sp, sp, #12
 21698              	.LCFI185:
 21699              		.cfi_def_cfa_offset 16
 21700 0004 00AF     		add	r7, sp, #0
 21701              		.cfi_offset 7, -4
 21702              	.LCFI186:
 21703              		.cfi_def_cfa_register 7
 21704 0006 7860     		str	r0, [r7, #4]
 21705 0008 3960     		str	r1, [r7, #0]
 256:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       { return _M_node != __x._M_node; }
 21706              		.loc 54 256 0
 21707 000a 7B68     		ldr	r3, [r7, #4]
 21708 000c 1A68     		ldr	r2, [r3, #0]
 21709 000e 3B68     		ldr	r3, [r7, #0]
 21710 0010 1B68     		ldr	r3, [r3, #0]
 21711 0012 9A42     		cmp	r2, r3
 21712 0014 0CBF     		ite	eq
 21713 0016 0023     		moveq	r3, #0
 21714 0018 0123     		movne	r3, #1
 21715 001a DBB2     		uxtb	r3, r3
 21716 001c 1846     		mov	r0, r3
 21717 001e 07F10C07 		add	r7, r7, #12
 21718 0022 BD46     		mov	sp, r7
 21719 0024 80BC     		pop	{r7}
 21720 0026 7047     		bx	lr
 21721              		.cfi_endproc
 21722              	.LFE1037:
 21724              		.section	.text._ZNSt20_List_const_iteratorIP9XFTimeoutEppEv,"axG",%progbits,_ZNSt20_List_const_ite
 21725              		.align	2
 21726              		.weak	_ZNSt20_List_const_iteratorIP9XFTimeoutEppEv
 21727              		.thumb
 21728              		.thumb_func
 21730              	_ZNSt20_List_const_iteratorIP9XFTimeoutEppEv:
 21731              	.LFB1038:
 221:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       operator++()
 21732              		.loc 54 221 0
 21733              		.cfi_startproc
 21734              		@ args = 0, pretend = 0, frame = 8
 21735              		@ frame_needed = 1, uses_anonymous_args = 0
 21736              		@ link register save eliminated.
 21737 0000 80B4     		push	{r7}
 21738              	.LCFI187:
 21739              		.cfi_def_cfa_offset 4
 21740 0002 83B0     		sub	sp, sp, #12
 21741              	.LCFI188:
 21742              		.cfi_def_cfa_offset 16
 21743 0004 00AF     		add	r7, sp, #0
 21744              		.cfi_offset 7, -4
 21745              	.LCFI189:
 21746              		.cfi_def_cfa_register 7
 21747 0006 7860     		str	r0, [r7, #4]
 223:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	_M_node = _M_node->_M_next;
 21748              		.loc 54 223 0
 21749 0008 7B68     		ldr	r3, [r7, #4]
 21750 000a 1B68     		ldr	r3, [r3, #0]
 21751 000c 1A68     		ldr	r2, [r3, #0]
 21752 000e 7B68     		ldr	r3, [r7, #4]
 21753 0010 1A60     		str	r2, [r3, #0]
 224:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h **** 	return *this;
 21754              		.loc 54 224 0
 21755 0012 7B68     		ldr	r3, [r7, #4]
 225:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/bits/stl_list.h ****       }
 21756              		.loc 54 225 0
 21757 0014 1846     		mov	r0, r3
 21758 0016 07F10C07 		add	r7, r7, #12
 21759 001a BD46     		mov	sp, r7
 21760 001c 80BC     		pop	{r7}
 21761 001e 7047     		bx	lr
 21762              		.cfi_endproc
 21763              	.LFE1038:
 21765              		.section	.text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv,"axG",%prog
 21766              		.align	2
 21767              		.weak	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv
 21768              		.thumb
 21769              		.thumb_func
 21771              	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv:
 21772              	.LFB1039:
  84:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 21773              		.loc 51 84 0
 21774              		.cfi_startproc
 21775              		@ args = 0, pretend = 0, frame = 16
 21776              		@ frame_needed = 1, uses_anonymous_args = 0
 21777 0000 80B5     		push	{r7, lr}
 21778              	.LCFI190:
 21779              		.cfi_def_cfa_offset 8
 21780 0002 84B0     		sub	sp, sp, #16
 21781              	.LCFI191:
 21782              		.cfi_def_cfa_offset 24
 21783 0004 00AF     		add	r7, sp, #0
 21784              		.cfi_offset 14, -4
 21785              		.cfi_offset 7, -8
 21786              	.LCFI192:
 21787              		.cfi_def_cfa_register 7
 21788 0006 F860     		str	r0, [r7, #12]
 21789 0008 B960     		str	r1, [r7, #8]
 21790 000a 7A60     		str	r2, [r7, #4]
  86:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	if (__n > this->max_size())
 21791              		.loc 51 86 0
 21792 000c F868     		ldr	r0, [r7, #12]
 21793 000e FFF7FEFF 		bl	_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv
 21794 0012 0246     		mov	r2, r0
 21795 0014 BB68     		ldr	r3, [r7, #8]
 21796 0016 9A42     		cmp	r2, r3
 21797 0018 2CBF     		ite	cs
 21798 001a 0023     		movcs	r3, #0
 21799 001c 0123     		movcc	r3, #1
 21800 001e DBB2     		uxtb	r3, r3
 21801 0020 002B     		cmp	r3, #0
 21802 0022 01D0     		beq	.L115
  87:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 21803              		.loc 51 87 0
 21804 0024 FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 21805              	.L115:
  89:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 21806              		.loc 51 89 0
 21807 0028 BA68     		ldr	r2, [r7, #8]
 21808 002a 1346     		mov	r3, r2
 21809 002c 4FEA4303 		lsl	r3, r3, #1
 21810 0030 9B18     		adds	r3, r3, r2
 21811 0032 4FEA8303 		lsl	r3, r3, #2
 21812 0036 1846     		mov	r0, r3
 21813 0038 FFF7FEFF 		bl	_Znwj
 21814 003c 0346     		mov	r3, r0
  90:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       }
 21815              		.loc 51 90 0
 21816 003e 1846     		mov	r0, r3
 21817 0040 07F11007 		add	r7, r7, #16
 21818 0044 BD46     		mov	sp, r7
 21819 0046 80BD     		pop	{r7, pc}
 21820              		.cfi_endproc
 21821              	.LFE1039:
 21823              		.section	.text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC2Ev,"axG",%progbits,_ZN9_
 21824              		.align	2
 21825              		.weak	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC2Ev
 21826              		.thumb
 21827              		.thumb_func
 21829              	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC2Ev:
 21830              	.LFB1062:
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator() throw() { }
 21831              		.loc 51 66 0
 21832              		.cfi_startproc
 21833              		@ args = 0, pretend = 0, frame = 8
 21834              		@ frame_needed = 1, uses_anonymous_args = 0
 21835              		@ link register save eliminated.
 21836 0000 80B4     		push	{r7}
 21837              	.LCFI193:
 21838              		.cfi_def_cfa_offset 4
 21839 0002 83B0     		sub	sp, sp, #12
 21840              	.LCFI194:
 21841              		.cfi_def_cfa_offset 16
 21842 0004 00AF     		add	r7, sp, #0
 21843              		.cfi_offset 7, -4
 21844              	.LCFI195:
 21845              		.cfi_def_cfa_register 7
 21846 0006 7860     		str	r0, [r7, #4]
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator() throw() { }
 21847              		.loc 51 66 0
 21848 0008 7B68     		ldr	r3, [r7, #4]
 21849 000a 1846     		mov	r0, r3
 21850 000c 07F10C07 		add	r7, r7, #12
 21851 0010 BD46     		mov	sp, r7
 21852 0012 80BC     		pop	{r7}
 21853 0014 7047     		bx	lr
 21854              		.cfi_endproc
 21855              	.LFE1062:
 21857              		.weak	_ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev
 21858              		.thumb_set _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev,_ZN9__gnu_cxx13new_alloca
 21859 0016 00BF     		.section	.text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC2Ev,"axG",%progbits,_ZN9__gnu_cxx13new_al
 21860              		.align	2
 21861              		.weak	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC2Ev
 21862              		.thumb
 21863              		.thumb_func
 21865              	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC2Ev:
 21866              	.LFB1065:
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator() throw() { }
 21867              		.loc 51 66 0
 21868              		.cfi_startproc
 21869              		@ args = 0, pretend = 0, frame = 8
 21870              		@ frame_needed = 1, uses_anonymous_args = 0
 21871              		@ link register save eliminated.
 21872 0000 80B4     		push	{r7}
 21873              	.LCFI196:
 21874              		.cfi_def_cfa_offset 4
 21875 0002 83B0     		sub	sp, sp, #12
 21876              	.LCFI197:
 21877              		.cfi_def_cfa_offset 16
 21878 0004 00AF     		add	r7, sp, #0
 21879              		.cfi_offset 7, -4
 21880              	.LCFI198:
 21881              		.cfi_def_cfa_register 7
 21882 0006 7860     		str	r0, [r7, #4]
  66:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       new_allocator() throw() { }
 21883              		.loc 51 66 0
 21884 0008 7B68     		ldr	r3, [r7, #4]
 21885 000a 1846     		mov	r0, r3
 21886 000c 07F10C07 		add	r7, r7, #12
 21887 0010 BD46     		mov	sp, r7
 21888 0012 80BC     		pop	{r7}
 21889 0014 7047     		bx	lr
 21890              		.cfi_endproc
 21891              	.LFE1065:
 21893              		.weak	_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC1Ev
 21894              		.thumb_set _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC1Ev,_ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE
 21895 0016 00BF     		.section	.text._ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv,"axG",%progbi
 21896              		.align	2
 21897              		.weak	_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv
 21898              		.thumb
 21899              		.thumb_func
 21901              	_ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv:
 21902              	.LFB1070:
  98:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       max_size() const throw() 
 21903              		.loc 51 98 0
 21904              		.cfi_startproc
 21905              		@ args = 0, pretend = 0, frame = 8
 21906              		@ frame_needed = 1, uses_anonymous_args = 0
 21907              		@ link register save eliminated.
 21908 0000 80B4     		push	{r7}
 21909              	.LCFI199:
 21910              		.cfi_def_cfa_offset 4
 21911 0002 83B0     		sub	sp, sp, #12
 21912              	.LCFI200:
 21913              		.cfi_def_cfa_offset 16
 21914 0004 00AF     		add	r7, sp, #0
 21915              		.cfi_offset 7, -4
 21916              	.LCFI201:
 21917              		.cfi_def_cfa_register 7
 21918 0006 7860     		str	r0, [r7, #4]
  99:/opt/toolchains/arm-none-eabi/bin/../lib/gcc/arm-none-eabi/4.5.2/../../../../arm-none-eabi/include/c++/4.5.2/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 21919              		.loc 51 99 0
 21920 0008 45F25553 		movw	r3, #21845
 21921 000c C1F25553 		movt	r3, 5461
 21922 0010 1846     		mov	r0, r3
 21923 0012 07F10C07 		add	r7, r7, #12
 21924 0016 BD46     		mov	sp, r7
 21925 0018 80BC     		pop	{r7}
 21926 001a 7047     		bx	lr
 21927              		.cfi_endproc
 21928              	.LFE1070:
 21930              		.global	_ZTV16XFTimeoutManager
 21931              		.section	.rodata._ZTV16XFTimeoutManager,"a",%progbits
 21932              		.align	3
 21935              	_ZTV16XFTimeoutManager:
 21936 0000 00000000 		.word	0
 21937 0004 00000000 		.word	0
 21938 0008 00000000 		.word	_ZN16XFTimeoutManagerD1Ev
 21939 000c 00000000 		.word	_ZN16XFTimeoutManagerD0Ev
 21940              		.section	.rodata._ZZN16XFTimeoutManager10addTimeoutEP9XFTimeoutE19__PRETTY_FUNCTION__,"a",%progbit
 21941              		.align	2
 21944              	_ZZN16XFTimeoutManager10addTimeoutEP9XFTimeoutE19__PRETTY_FUNCTION__:
 21945 0000 766F6964 		.ascii	"void XFTimeoutManager::addTimeout(XFTimeout*)\000"
 21945      20584654 
 21945      696D656F 
 21945      75744D61 
 21945      6E616765 
 21946 002e 0000     		.text
 21947              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 xftimeoutmanager.cpp
     /tmp/ccovGRcw.s:18540  .text.NVIC_SetPriority:00000000 $t
     /tmp/ccovGRcw.s:18544  .text.NVIC_SetPriority:00000000 NVIC_SetPriority
     /tmp/ccovGRcw.s:18602  .text.SysTick_Config:00000000 $t
     /tmp/ccovGRcw.s:18606  .text.SysTick_Config:00000000 SysTick_Config
     /tmp/ccovGRcw.s:18666  .text._ZnwjPv:00000000 $t
     /tmp/ccovGRcw.s:18671  .text._ZnwjPv:00000000 _ZnwjPv
     /tmp/ccovGRcw.s:18701  .text._ZNK8IXFEvent11getBehaviorEv:00000000 $t
     /tmp/ccovGRcw.s:18706  .text._ZNK8IXFEvent11getBehaviorEv:00000000 _ZNK8IXFEvent11getBehaviorEv
     /tmp/ccovGRcw.s:18740  .bss._ZN16XFTimeoutManager10_pInstanceE:00000000 _ZN16XFTimeoutManager10_pInstanceE
     /tmp/ccovGRcw.s:18737  .bss._ZN16XFTimeoutManager10_pInstanceE:00000000 $d
     /tmp/ccovGRcw.s:18743  .text._ZNSt4listIP9XFTimeoutSaIS1_EED2Ev:00000000 $t
     /tmp/ccovGRcw.s:18748  .text._ZNSt4listIP9XFTimeoutSaIS1_EED2Ev:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EED2Ev
     /tmp/ccovGRcw.s:19927  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev
     /tmp/ccovGRcw.s:18748  .text._ZNSt4listIP9XFTimeoutSaIS1_EED2Ev:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EED1Ev
     /tmp/ccovGRcw.s:18783  .text._ZN16XFTimeoutManagerC2Ev:00000000 $t
     /tmp/ccovGRcw.s:18788  .text._ZN16XFTimeoutManagerC2Ev:00000000 _ZN16XFTimeoutManagerC2Ev
     /tmp/ccovGRcw.s:19847  .text._ZNSt4listIP9XFTimeoutSaIS1_EEC2Ev:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EEC1Ev
     /tmp/ccovGRcw.s:18828  .text._ZN16XFTimeoutManagerC2Ev:00000030 $d
     /tmp/ccovGRcw.s:21935  .rodata._ZTV16XFTimeoutManager:00000000 _ZTV16XFTimeoutManager
     /tmp/ccovGRcw.s:18788  .text._ZN16XFTimeoutManagerC2Ev:00000000 _ZN16XFTimeoutManagerC1Ev
     /tmp/ccovGRcw.s:18835  .text._ZN16XFTimeoutManagerD2Ev:00000000 $t
     /tmp/ccovGRcw.s:18840  .text._ZN16XFTimeoutManagerD2Ev:00000000 _ZN16XFTimeoutManagerD2Ev
     /tmp/ccovGRcw.s:18887  .text._ZN16XFTimeoutManagerD2Ev:0000003c $d
     /tmp/ccovGRcw.s:18840  .text._ZN16XFTimeoutManagerD2Ev:00000000 _ZN16XFTimeoutManagerD1Ev
     /tmp/ccovGRcw.s:18894  .text._ZN16XFTimeoutManagerD0Ev:00000000 $t
     /tmp/ccovGRcw.s:18899  .text._ZN16XFTimeoutManagerD0Ev:00000000 _ZN16XFTimeoutManagerD0Ev
     /tmp/ccovGRcw.s:18931  .text._ZN16XFTimeoutManager11getInstanceEv:00000000 $t
     /tmp/ccovGRcw.s:18936  .text._ZN16XFTimeoutManager11getInstanceEv:00000000 _ZN16XFTimeoutManager11getInstanceEv
     /tmp/ccovGRcw.s:18981  .text._ZN16XFTimeoutManager15setTickIntervalEi:00000000 $t
     /tmp/ccovGRcw.s:18986  .text._ZN16XFTimeoutManager15setTickIntervalEi:00000000 _ZN16XFTimeoutManager15setTickIntervalEi
     /tmp/ccovGRcw.s:19018  .text._ZN16XFTimeoutManager5startEv:00000000 $t
     /tmp/ccovGRcw.s:19023  .text._ZN16XFTimeoutManager5startEv:00000000 _ZN16XFTimeoutManager5startEv
     /tmp/ccovGRcw.s:19757  .text._ZN16XFTimeoutManager18startHardwareTimerEi:00000000 _ZN16XFTimeoutManager18startHardwareTimerEi
     /tmp/ccovGRcw.s:19065  .text._ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive:00000000 $t
     /tmp/ccovGRcw.s:19070  .text._ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive:00000000 _ZN16XFTimeoutManager15scheduleTimeoutEiiP11IXFReactive
     /tmp/ccovGRcw.s:19295  .text._ZN16XFTimeoutManager10addTimeoutEP9XFTimeout:00000000 _ZN16XFTimeoutManager10addTimeoutEP9XFTimeout
     /tmp/ccovGRcw.s:19122  .text._ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive:00000000 $t
     /tmp/ccovGRcw.s:19127  .text._ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive:00000000 _ZN16XFTimeoutManager17unscheduleTimeoutEiP11IXFReactive
     /tmp/ccovGRcw.s:19556  .text._ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive:00000000 _ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive
     /tmp/ccovGRcw.s:19160  .text._ZN16XFTimeoutManager4tickEv:00000000 $t
     /tmp/ccovGRcw.s:19165  .text._ZN16XFTimeoutManager4tickEv:00000000 _ZN16XFTimeoutManager4tickEv
     /tmp/ccovGRcw.s:19969  .text._ZNKSt4listIP9XFTimeoutSaIS1_EE5emptyEv:00000000 _ZNKSt4listIP9XFTimeoutSaIS1_EE5emptyEv
     /tmp/ccovGRcw.s:20010  .text._ZNSt4listIP9XFTimeoutSaIS1_EE5frontEv:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE5frontEv
     /tmp/ccovGRcw.s:20050  .text._ZNKSt4listIP9XFTimeoutSaIS1_EE4sizeEv:00000000 _ZNKSt4listIP9XFTimeoutSaIS1_EE4sizeEv
     /tmp/ccovGRcw.s:20093  .text._ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv
     /tmp/ccovGRcw.s:20132  .text._ZNSt14_List_iteratorIP9XFTimeoutEppEi:00000000 _ZNSt14_List_iteratorIP9XFTimeoutEppEi
     /tmp/ccovGRcw.s:20180  .text._ZNKSt14_List_iteratorIP9XFTimeoutEdeEv:00000000 _ZNKSt14_List_iteratorIP9XFTimeoutEdeEv
     /tmp/ccovGRcw.s:19714  .text._ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout:00000000 _ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout
     /tmp/ccovGRcw.s:20216  .text._ZNSt4listIP9XFTimeoutSaIS1_EE9pop_frontEv:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE9pop_frontEv
     /tmp/ccovGRcw.s:19283  .rodata:00000000 $d
     /tmp/ccovGRcw.s:19284  .rodata:00000000 .LC0
     /tmp/ccovGRcw.s:19287  .rodata:0000001c .LC1
     /tmp/ccovGRcw.s:19290  .text._ZN16XFTimeoutManager10addTimeoutEP9XFTimeout:00000000 $t
     /tmp/ccovGRcw.s:20253  .text._ZNSt4listIP9XFTimeoutSaIS1_EE10push_frontERKS1_:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE10push_frontERKS1_
     /tmp/ccovGRcw.s:20292  .text._ZNSt4listIP9XFTimeoutSaIS1_EE3endEv:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE3endEv
     /tmp/ccovGRcw.s:20330  .text._ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_:00000000 _ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_
     /tmp/ccovGRcw.s:20373  .text._ZNSt4listIP9XFTimeoutSaIS1_EE6insertESt14_List_iteratorIS1_ERKS1_:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE6insertESt14_List_iteratorIS1_ERKS1_
     /tmp/ccovGRcw.s:21944  .rodata._ZZN16XFTimeoutManager10addTimeoutEP9XFTimeoutE19__PRETTY_FUNCTION__:00000000 _ZZN16XFTimeoutManager10addTimeoutEP9XFTimeoutE19__PRETTY_FUNCTION__
     /tmp/ccovGRcw.s:19551  .text._ZN16XFTimeoutManager14removeTimeoutsEiP11IXFReactive:00000000 $t
     /tmp/ccovGRcw.s:20427  .text._ZNSt14_List_iteratorIP9XFTimeoutEppEv:00000000 _ZNSt14_List_iteratorIP9XFTimeoutEppEv
     /tmp/ccovGRcw.s:20468  .text._ZNSt4listIP9XFTimeoutSaIS1_EE5eraseESt14_List_iteratorIS1_E:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE5eraseESt14_List_iteratorIS1_E
     /tmp/ccovGRcw.s:19709  .text._ZN16XFTimeoutManager13returnTimeoutEP9XFTimeout:00000000 $t
     /tmp/ccovGRcw.s:19752  .text._ZN16XFTimeoutManager18startHardwareTimerEi:00000000 $t
     /tmp/ccovGRcw.s:19802  .text._Z14SysTickHandlerv:00000000 $t
     /tmp/ccovGRcw.s:19807  .text._Z14SysTickHandlerv:00000000 _Z14SysTickHandlerv
     /tmp/ccovGRcw.s:19842  .text._ZNSt4listIP9XFTimeoutSaIS1_EEC2Ev:00000000 $t
     /tmp/ccovGRcw.s:19847  .text._ZNSt4listIP9XFTimeoutSaIS1_EEC2Ev:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EEC2Ev
     /tmp/ccovGRcw.s:20516  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev
     /tmp/ccovGRcw.s:19882  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD2Ev:00000000 $t
     /tmp/ccovGRcw.s:19887  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD2Ev:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD2Ev
     /tmp/ccovGRcw.s:20559  .text._ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev:00000000 _ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev
     /tmp/ccovGRcw.s:19887  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD2Ev:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD1Ev
     /tmp/ccovGRcw.s:19922  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev:00000000 $t
     /tmp/ccovGRcw.s:20599  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE8_M_clearEv:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE8_M_clearEv
     /tmp/ccovGRcw.s:19927  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EED2Ev:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EED1Ev
     /tmp/ccovGRcw.s:19964  .text._ZNKSt4listIP9XFTimeoutSaIS1_EE5emptyEv:00000000 $t
     /tmp/ccovGRcw.s:20005  .text._ZNSt4listIP9XFTimeoutSaIS1_EE5frontEv:00000000 $t
     /tmp/ccovGRcw.s:20045  .text._ZNKSt4listIP9XFTimeoutSaIS1_EE4sizeEv:00000000 $t
     /tmp/ccovGRcw.s:20677  .text._ZNKSt4listIP9XFTimeoutSaIS1_EE5beginEv:00000000 _ZNKSt4listIP9XFTimeoutSaIS1_EE5beginEv
     /tmp/ccovGRcw.s:20716  .text._ZNKSt4listIP9XFTimeoutSaIS1_EE3endEv:00000000 _ZNKSt4listIP9XFTimeoutSaIS1_EE3endEv
     /tmp/ccovGRcw.s:20754  .text._ZSt8distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES5_S5_:00000000 _ZSt8distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES5_S5_
     /tmp/ccovGRcw.s:20088  .text._ZNSt4listIP9XFTimeoutSaIS1_EE5beginEv:00000000 $t
     /tmp/ccovGRcw.s:20796  .text._ZNSt14_List_iteratorIP9XFTimeoutEC2EPSt15_List_node_base:00000000 _ZNSt14_List_iteratorIP9XFTimeoutEC1EPSt15_List_node_base
     /tmp/ccovGRcw.s:20127  .text._ZNSt14_List_iteratorIP9XFTimeoutEppEi:00000000 $t
     /tmp/ccovGRcw.s:20175  .text._ZNKSt14_List_iteratorIP9XFTimeoutEdeEv:00000000 $t
     /tmp/ccovGRcw.s:20211  .text._ZNSt4listIP9XFTimeoutSaIS1_EE9pop_frontEv:00000000 $t
     /tmp/ccovGRcw.s:20838  .text._ZNSt4listIP9XFTimeoutSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E
     /tmp/ccovGRcw.s:20248  .text._ZNSt4listIP9XFTimeoutSaIS1_EE10push_frontERKS1_:00000000 $t
     /tmp/ccovGRcw.s:20899  .text._ZNSt4listIP9XFTimeoutSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_
     /tmp/ccovGRcw.s:20287  .text._ZNSt4listIP9XFTimeoutSaIS1_EE3endEv:00000000 $t
     /tmp/ccovGRcw.s:20325  .text._ZNKSt14_List_iteratorIP9XFTimeoutEneERKS2_:00000000 $t
     /tmp/ccovGRcw.s:20368  .text._ZNSt4listIP9XFTimeoutSaIS1_EE6insertESt14_List_iteratorIS1_ERKS1_:00000000 $t
     /tmp/ccovGRcw.s:20945  .text._ZNSt4listIP9XFTimeoutSaIS1_EE14_M_create_nodeERKS1_:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EE14_M_create_nodeERKS1_
     /tmp/ccovGRcw.s:20422  .text._ZNSt14_List_iteratorIP9XFTimeoutEppEv:00000000 $t
     /tmp/ccovGRcw.s:20463  .text._ZNSt4listIP9XFTimeoutSaIS1_EE5eraseESt14_List_iteratorIS1_E:00000000 $t
     /tmp/ccovGRcw.s:20511  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev:00000000 $t
     /tmp/ccovGRcw.s:21003  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC2Ev:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC1Ev
     /tmp/ccovGRcw.s:21050  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE7_M_initEv:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE7_M_initEv
     /tmp/ccovGRcw.s:20516  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC2Ev:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC1Ev
     /tmp/ccovGRcw.s:20554  .text._ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev:00000000 $t
     /tmp/ccovGRcw.s:21090  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED2Ev:00000000 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED2Ev
     /tmp/ccovGRcw.s:20559  .text._ZNSaISt10_List_nodeIP9XFTimeoutEED2Ev:00000000 _ZNSaISt10_List_nodeIP9XFTimeoutEED1Ev
     /tmp/ccovGRcw.s:20594  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE8_M_clearEv:00000000 $t
     /tmp/ccovGRcw.s:21126  .text._ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv:00000000 _ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccovGRcw.s:21209  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE7destroyEPS2_:00000000 _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE7destroyEPS2_
     /tmp/ccovGRcw.s:21169  .text._ZNSaIP9XFTimeoutED2Ev:00000000 _ZNSaIP9XFTimeoutED1Ev
     /tmp/ccovGRcw.s:21242  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E
     /tmp/ccovGRcw.s:20672  .text._ZNKSt4listIP9XFTimeoutSaIS1_EE5beginEv:00000000 $t
     /tmp/ccovGRcw.s:21279  .text._ZNSt20_List_const_iteratorIP9XFTimeoutEC2EPKSt15_List_node_base:00000000 _ZNSt20_List_const_iteratorIP9XFTimeoutEC1EPKSt15_List_node_base
     /tmp/ccovGRcw.s:20711  .text._ZNKSt4listIP9XFTimeoutSaIS1_EE3endEv:00000000 $t
     /tmp/ccovGRcw.s:20749  .text._ZSt8distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES5_S5_:00000000 $t
     /tmp/ccovGRcw.s:21321  .text._ZSt19__iterator_categoryISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E17iterator_categoryERKS5_:00000000 _ZSt19__iterator_categoryISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E17iterator_categoryERKS5_
     /tmp/ccovGRcw.s:21354  .text._ZSt10__distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES5_S5_St18input_iterator_tag:00000000 _ZSt10__distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES5_S5_St18input_iterator_tag
     /tmp/ccovGRcw.s:20791  .text._ZNSt14_List_iteratorIP9XFTimeoutEC2EPSt15_List_node_base:00000000 $t
     /tmp/ccovGRcw.s:20796  .text._ZNSt14_List_iteratorIP9XFTimeoutEC2EPSt15_List_node_base:00000000 _ZNSt14_List_iteratorIP9XFTimeoutEC2EPSt15_List_node_base
     /tmp/ccovGRcw.s:20833  .text._ZNSt4listIP9XFTimeoutSaIS1_EE8_M_eraseESt14_List_iteratorIS1_E:00000000 $t
     /tmp/ccovGRcw.s:20894  .text._ZNSt4listIP9XFTimeoutSaIS1_EE9_M_insertESt14_List_iteratorIS1_ERKS1_:00000000 $t
     /tmp/ccovGRcw.s:20940  .text._ZNSt4listIP9XFTimeoutSaIS1_EE14_M_create_nodeERKS1_:00000000 $t
     /tmp/ccovGRcw.s:21416  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_get_nodeEv:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_get_nodeEv
     /tmp/ccovGRcw.s:21454  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE9constructEPS2_RKS2_:00000000 _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE9constructEPS2_RKS2_
     /tmp/ccovGRcw.s:20998  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC2Ev:00000000 $t
     /tmp/ccovGRcw.s:21003  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC2Ev:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC2Ev
     /tmp/ccovGRcw.s:21501  .text._ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev:00000000 _ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev
     /tmp/ccovGRcw.s:21045  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE7_M_initEv:00000000 $t
     /tmp/ccovGRcw.s:21085  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED2Ev:00000000 $t
     /tmp/ccovGRcw.s:21090  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED2Ev:00000000 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED1Ev
     /tmp/ccovGRcw.s:21121  .text._ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE19_M_get_Tp_allocatorEv:00000000 $t
     /tmp/ccovGRcw.s:21541  .text._ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE21_M_get_Node_allocatorEv:00000000 _ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE21_M_get_Node_allocatorEv
     /tmp/ccovGRcw.s:21575  .text._ZNSaIP9XFTimeoutEC2ISt10_List_nodeIS0_EEERKSaIT_E:00000000 _ZNSaIP9XFTimeoutEC1ISt10_List_nodeIS0_EEERKSaIT_E
     /tmp/ccovGRcw.s:21164  .text._ZNSaIP9XFTimeoutED2Ev:00000000 $t
     /tmp/ccovGRcw.s:21169  .text._ZNSaIP9XFTimeoutED2Ev:00000000 _ZNSaIP9XFTimeoutED2Ev
     /tmp/ccovGRcw.s:21616  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED2Ev:00000000 _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED2Ev
     /tmp/ccovGRcw.s:21204  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE7destroyEPS2_:00000000 $t
     /tmp/ccovGRcw.s:21237  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_put_nodeEPSt10_List_nodeIS1_E:00000000 $t
     /tmp/ccovGRcw.s:21652  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j:00000000 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j
     /tmp/ccovGRcw.s:21274  .text._ZNSt20_List_const_iteratorIP9XFTimeoutEC2EPKSt15_List_node_base:00000000 $t
     /tmp/ccovGRcw.s:21279  .text._ZNSt20_List_const_iteratorIP9XFTimeoutEC2EPKSt15_List_node_base:00000000 _ZNSt20_List_const_iteratorIP9XFTimeoutEC2EPKSt15_List_node_base
     /tmp/ccovGRcw.s:21316  .text._ZSt19__iterator_categoryISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E17iterator_categoryERKS5_:00000000 $t
     /tmp/ccovGRcw.s:21349  .text._ZSt10__distanceISt20_List_const_iteratorIP9XFTimeoutEENSt15iterator_traitsIT_E15difference_typeES5_S5_St18input_iterator_tag:00000000 $t
     /tmp/ccovGRcw.s:21730  .text._ZNSt20_List_const_iteratorIP9XFTimeoutEppEv:00000000 _ZNSt20_List_const_iteratorIP9XFTimeoutEppEv
     /tmp/ccovGRcw.s:21687  .text._ZNKSt20_List_const_iteratorIP9XFTimeoutEneERKS2_:00000000 _ZNKSt20_List_const_iteratorIP9XFTimeoutEneERKS2_
     /tmp/ccovGRcw.s:21411  .text._ZNSt10_List_baseIP9XFTimeoutSaIS1_EE11_M_get_nodeEv:00000000 $t
     /tmp/ccovGRcw.s:21771  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv:00000000 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv
     /tmp/ccovGRcw.s:21449  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutE9constructEPS2_RKS2_:00000000 $t
     /tmp/ccovGRcw.s:21496  .text._ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev:00000000 $t
     /tmp/ccovGRcw.s:21829  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC2Ev:00000000 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC2Ev
     /tmp/ccovGRcw.s:21501  .text._ZNSaISt10_List_nodeIP9XFTimeoutEEC2Ev:00000000 _ZNSaISt10_List_nodeIP9XFTimeoutEEC1Ev
     /tmp/ccovGRcw.s:21536  .text._ZNKSt10_List_baseIP9XFTimeoutSaIS1_EE21_M_get_Node_allocatorEv:00000000 $t
     /tmp/ccovGRcw.s:21570  .text._ZNSaIP9XFTimeoutEC2ISt10_List_nodeIS0_EEERKSaIT_E:00000000 $t
     /tmp/ccovGRcw.s:21575  .text._ZNSaIP9XFTimeoutEC2ISt10_List_nodeIS0_EEERKSaIT_E:00000000 _ZNSaIP9XFTimeoutEC2ISt10_List_nodeIS0_EEERKSaIT_E
     /tmp/ccovGRcw.s:21865  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC2Ev:00000000 _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC2Ev
     /tmp/ccovGRcw.s:21611  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED2Ev:00000000 $t
     /tmp/ccovGRcw.s:21616  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED2Ev:00000000 _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED1Ev
     /tmp/ccovGRcw.s:21647  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE10deallocateEPS4_j:00000000 $t
     /tmp/ccovGRcw.s:21682  .text._ZNKSt20_List_const_iteratorIP9XFTimeoutEneERKS2_:00000000 $t
     /tmp/ccovGRcw.s:21725  .text._ZNSt20_List_const_iteratorIP9XFTimeoutEppEv:00000000 $t
     /tmp/ccovGRcw.s:21766  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8allocateEjPKv:00000000 $t
     /tmp/ccovGRcw.s:21901  .text._ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv:00000000 _ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv
     /tmp/ccovGRcw.s:21824  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC2Ev:00000000 $t
     /tmp/ccovGRcw.s:21829  .text._ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC2Ev:00000000 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC1Ev
     /tmp/ccovGRcw.s:21860  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC2Ev:00000000 $t
     /tmp/ccovGRcw.s:21865  .text._ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC2Ev:00000000 _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC1Ev
     /tmp/ccovGRcw.s:21896  .text._ZNK9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEE8max_sizeEv:00000000 $t
     /tmp/ccovGRcw.s:21932  .rodata._ZTV16XFTimeoutManager:00000000 $d
     /tmp/ccovGRcw.s:21941  .rodata._ZZN16XFTimeoutManager10addTimeoutEP9XFTimeoutE19__PRETTY_FUNCTION__:00000000 $d
                     .debug_frame:00000010 $d
                           .group:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EED5Ev
                           .group:00000000 _ZNSt4listIP9XFTimeoutSaIS1_EEC5Ev
                           .group:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implD5Ev
                           .group:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EED5Ev
                           .group:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EEC5Ev
                           .group:00000000 _ZNSaISt10_List_nodeIP9XFTimeoutEED5Ev
                           .group:00000000 _ZNSt14_List_iteratorIP9XFTimeoutEC5EPSt15_List_node_base
                           .group:00000000 _ZNSt10_List_baseIP9XFTimeoutSaIS1_EE10_List_implC5Ev
                           .group:00000000 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEED5Ev
                           .group:00000000 _ZNSaIP9XFTimeoutED5Ev
                           .group:00000000 _ZNSt20_List_const_iteratorIP9XFTimeoutEC5EPKSt15_List_node_base
                           .group:00000000 _ZNSaISt10_List_nodeIP9XFTimeoutEEC5Ev
                           .group:00000000 _ZNSaIP9XFTimeoutEC5ISt10_List_nodeIS0_EEERKSaIT_E
                           .group:00000000 _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutED5Ev
                           .group:00000000 _ZN9__gnu_cxx13new_allocatorISt10_List_nodeIP9XFTimeoutEEC5Ev
                           .group:00000000 _ZN9__gnu_cxx13new_allocatorIP9XFTimeoutEC5Ev

UNDEFINED SYMBOLS
_ZdlPv
_Znwj
_ZN9XFTimeoutC1EiiP11IXFReactive
enterCritical
__assert_func
exitCritical
_ZNK9XFTimeouteqERKS_
_ZN9XFTimeoutD1Ev
SystemCoreClockUpdate
SystemCoreClock
bInISR
_ZNSt15_List_node_base7_M_hookEPS_
_ZNSt15_List_node_base9_M_unhookEv
_ZSt17__throw_bad_allocv
